<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>聊一聊 Java 中的 ThreadLocal</title>
    <url>/2020/08/14/threadlocal/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>提到 ThreadLocal， Java 开发者并不陌生。在面试中，也经常被面试官提及，对 Java 开发者而言也是一个必须掌握的知识点，所以将它理解透彻是很有必要的。</p>
<p>文章稍微有点长，不过介绍的还是比较细致。</p>
<a id="more"></a>
<h3 id="ThreadLocal-是什么"><a href="#ThreadLocal-是什么" class="headerlink" title="ThreadLocal 是什么"></a>ThreadLocal 是什么</h3><p>ThreadLocal 是一个关于创建线程局部变量的类，主要作用是做数据隔离，保存到 ThreadLocal 中的数据只属于当前线程，该数据对其他线程而言是隔离的。也就是说，使用 ThreadLocal 保存的数据只能被当前线程访问，其他线程无法访问和修改。在多线程环境下，防止自己的变量被其他线程篡改。</p>
<blockquote>
<p>注意：ThreadLocal 设计的目的就是为了能够在当前线程中有属于自己的变量，并不是为了解决并发或者共享变量的问题。</p>
</blockquote>
<p>下面，我们来看看这个例子：主线程初始化了一个 ThreadLocal 对象 threadLocal，并通过 threadLocal.set() 方法保存了一个值：“value1”，然后使用 threadLocal.get() 拿到设置的值。其中，子线程也使用 threadLocal.get() 去拿值，但是拿到的值是 null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 主线程设置值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        threadLocal.set(<span class="string">"value1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" = "</span> + threadLocal.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 子线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 子线程获取的值是：null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" = "</span> + threadLocal.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main &#x3D; value1</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread-0 &#x3D; null</span></pre></td></tr></table></figure>

<p>但是，上面例子中，如果我们把变量换成是一个共享的对象保存到 ThreadLocal 中，那么多个线程的 ThreadLocal.get() 取得的还是这个共享对象本身，还是有并发访问问题。 所以要在保存到 ThreadLocal 之前，通过克隆或者 new 来创建新的对象，然后再进行保存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;User&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 主线程设置值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        User user = <span class="keyword">new</span> User();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threadLocal.set(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" = "</span> + threadLocal.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 子线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                threadLocal.set(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 获取到的对象地址是一样的，如果对它的值进行了修改，那么其他线程拿到的值也会改变。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" = "</span> + threadLocal.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main &#x3D; top.yifan.User@17f052a3</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread-0 &#x3D; top.yifan.User@17f052a3</span></pre></td></tr></table></figure>

<p>从上面的例子，我们可以看出 ThreadLocal 的使用很简单，主要就是 set 和 get 方法，没有其他花里胡哨的操作。</p>
<p>下面，我们来看看 ThreadLocal 是如何做到线程间数据隔离的？</p>
<h3 id="ThreadLocal-源码分析"><a href="#ThreadLocal-源码分析" class="headerlink" title="ThreadLocal 源码分析"></a>ThreadLocal 源码分析</h3><p>首先，我们先来看看 ThreadLocal 的 set 方法的源码。理解了 set 方法的实现，就明白 ThreadLocal 是如何做到数据隔离的。</p>
<p>set 源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 获取当前线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Thread t = Thread.currentThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 利用当前线程获取一个 ThreadLocalMap 的对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ThreadLocalMap map = getMap(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 如果上面获取的 ThreadLocalMap 对象不为空，则设置值，否则创建这个 ThreadLocalMap 对象并设置值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    map.set(<span class="keyword">this</span>, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    createMap(t, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * Create the map associated with a ThreadLocal. Overridden in</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * InheritableThreadLocal.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * <span class="doctag">@param</span> t the current thread</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * <span class="doctag">@param</span> firstValue value for the initial entry of the map</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>表面上看，ThreadLocal 的 set 方法源码很简单，其实不然。我们继续深入，这里需要关注一下 ThreadLocalMap。</p>
<p>从 set 源码中，我们得知 ThreadLocalMap 是利用当前线程 Thread 作为参数获取的。源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> t.threadLocals;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>其实，上面的代码获取的是 Thread 对象的 threadLocals 变量。源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    省略其他内容...</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * by the ThreadLocal class. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    省略其他内容...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>到这里，我们基本可以知道 ThreadLocal 的数据是放入了当前线程的一个ThreadLocalMap 实例中，key 就是 ThreadLocal 对象本身，所以只能在本线程中访问，其他线程无法访问，从而实现了数据隔离。</p>
<p>下面，我们再来看看 ThreadLocal 的 get 方法源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 获取当前线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread t = Thread.currentThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 获取 ThreadLocalMap 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ThreadLocalMap map = getMap(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 以 ThreadLocal 对象本身作为 key，获取值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            T result = (T)e.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 如果 ThreadLocalMap 对象不存在，就设置初始值并返回</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 从下面 setInitialValue() 的源码可知，设置的初始值是一个 null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> setInitialValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * Variant of set() to establish initialValue. Used instead</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * of set() in case user has overridden the set() method.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * <span class="doctag">@return</span> the initial value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    T value = initialValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread t = Thread.currentThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ThreadLocalMap map = getMap(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.set(<span class="keyword">this</span>, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        createMap(t, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这里，我们应该知道 ThreadLocal 的工作原理了。</p>
<ul>
<li>Thread 类中维护着一个 ThreadLocalMap 类型的成员变量。</li>
<li>ThreadLocalMap 是一个定义在 ThreadLocal 类中的内部类，是一个 map，用Entry 来进行数据存储。</li>
<li>当调用 ThreadLocal 的 set() 方法时，先获取当前线程的 ThreadLocalMap 对象，然后以 ThreadLocal 对象作为 key 往ThreadLocalMap 中设置值。</li>
<li>当调用 ThreadLocal 的 get() 方法时，也是先获取当前线程的 ThreadLocalMap 对象，以 ThreadLocal 对象作为 key 从 ThreadLocalMap 中获取值。</li>
<li>ThreadLocal 本身并不存储值，它只是作为一个 key 来让线程在ThreadLocalMap 中获取或设置值。</li>
</ul>
<p><strong>ThreadLocal 的工作原理决定了，ThreadLocal 活动范围仅限于某个线程，每个线程独自拥有自己的变量</strong>。</p>
<p>我们都知道，在 Java 中，栈内存归属于单个线程，每个线程都会有一个栈内存，其存储的变量只能在其所属线程中可见，即栈内存可以理解成线程的私有内存，而堆内存中的对象对所有线程可见，堆内存中的对象可以被所有线程访问。<strong>那么是不是说 ThreadLocal 的实例以及其值存放在栈上呢？</strong><br>其实不是的，因为 ThreadLocal 实例实际上也是被其创建的类持有（更顶端应该是被线程持有），而 ThreadLocal 的值其实也是被线程实例持有。它们都是位于堆上，只是通过一些技巧将可见性修改成了线程可见。（摘自 <a href="https://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/" target="_blank" rel="noopener">理解Java中的ThreadLocal</a> ）</p>
<p>下面，我们聊聊 ThreadLocal 的内部类 ThreadLocalMap。</p>
<h3 id="ThreadLocalMap-源码分析"><a href="#ThreadLocalMap-源码分析" class="headerlink" title="ThreadLocalMap 源码分析"></a>ThreadLocalMap 源码分析</h3><p>初看，ThreadLocalMap 是一个类似 HashMap 的数据结构，但是在 ThreadLocal 中，并没实现 Map 接口。ThreadLoalMap 的 Entry 是继承 WeakReference（弱引用），在 Entry 的构造方法中，调用了 super(k) 方法，只是将传入的 key 包装成一个弱引用对象。同时 Entry 中没有 next 字段，所以就不存在链表的情况了。ThreadLocalMap 和 HashMap 还是有很大的区别的。</p>
<p>ThreadLocalMap 部分源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * Entry 是 ThreadLocalMap 的内部类，是一个弱引用对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="comment">// Entry 的 key 为 ThreadLocal 对象，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">super</span>(k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                value = v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 初始长度是 16，必须是 2 的幂</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * Entry 数组，用来存放一个线程的多个 ThreadLocal 变量，长度必须是 2 的幂</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">private</span> Entry[] table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 扩容的阈值，默认是数组大小的 2/3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> threshold;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 设置扩容阈值，数组大小的 2/3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      省略其他内容...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>从源码中，我们可以得知 ThreadLocalMap 的结构大致如下：</p>
<p><img alt="ThreadLocalMap" data-src="https://img-blog.csdnimg.cn/2020081715500060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70#pic_center"></p>
<p>在创建 ThreadLoalMap 对象时会初始化一个大小是 16 的 Entry 数组，扩容阈值是数组大小的 2/3，Entry 对象用来保存每一个键值对(key-value)，而这里的 key 永远都是ThreadLocal 对象本身，通过 ThreadLocal 对象的 set 方法，把 ThreadLocal 对象自己当做 key，放进了 ThreadLoalMap 中。</p>
<h3 id="ThreadLocalMap-的-Hash-冲突问题"><a href="#ThreadLocalMap-的-Hash-冲突问题" class="headerlink" title="ThreadLocalMap 的 Hash 冲突问题"></a>ThreadLocalMap 的 Hash 冲突问题</h3><p>上面，我们知道 ThreadLocalMap 底层数据结构是一个数组，那么它是如何解决 Hash 冲突的呢？</p>
<p>我们先看看 ThreadLocalMap 的 set 方法源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Entry[] tab = table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = tab.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 根据 ThreadLocal 对象的 hashCode 确定 Entry 应该存放的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (Entry e = tab[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">         e != <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 如果当前位置的 Entry 对象的 key 正好与传入的 key 相同，那么就覆盖 Entry 中的 value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.value = value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 当 key 为 null 时，说明 ThreadLocal 弱引用已经被释放掉，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 那么就无法再通过这个 key 获取 ThreadLocalMap 中对应的 Entry 对象中的 value，这里就存在内存泄漏的可能性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 用当前传入的 key 和 value 替换掉这个 key 为 null 的 Entry 对象，并清除过期的对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            replaceStaleEntry(key, value, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 如果位置为空，新建 Entry 对象并插入 table 中 i 处</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    tab[i] = <span class="keyword">new</span> Entry(key, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> sz = ++size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 插入后再次清除一些 key 为 null 的 Entry 对象，如果大于阈值就需要扩容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rehash();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>从 set 方法的源码中，可以知道 ThreadLocalMap 在存储数据的大致过程如下：</p>
<ul>
<li>首先，利用 ThreadLocal 对象的 threadLocalHashCode 计算一个 hash 值作为数据插入的位置 i（int i = key.threadLocalHashCode &amp; (len-1);）。</li>
<li>如果位置 i 存在有 Entry 对象且 Entry 的 key 刚好与传入的 key 相等，就使用传入的 value 覆盖原有的 value。</li>
<li>如果位置 i 存在有 Entry 对象但是 Entry 的 key 与传入的 key 不相关，就继续往下找。</li>
<li>如果位置 i 存在有 Entry 对象但是 Entry 的 key 为 null，则使用传入的 key 和 value 替换</li>
<li>如果位置 i 刚好是空的，就新建 Entry 对象插入到该位置。</li>
</ul>
<p>到这里，我们知道 ThreadLocalMap 是通过 <code>nextIndex(i, len)</code> 方法解决 Hash 冲突的问题。通过遍历，从冲突的位置依次往后搜索空单元，如果到数组尾部，再从头开始搜索，形成环形查找。其实，这就是<strong>线性搜索法</strong>。</p>
<p>这里需要注意一下 <code>threadLocalHashCode</code>，请看 ThreadLocal 部分源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ThreadLocal 对象的 hash 值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">new</span> AtomicInteger();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>根据源码可知，每个 ThreadLocal 对象都有一个 hash 值threadLocalHashCode，每初始化一个 ThreadLocal 对象，hash 值就递增 <code>0x61c88647</code> 大小。查资料得知，<code>0x61c88647</code> 这个数是有特殊意义的，它能够保证 hash 表的每个散列桶能够均匀的分布，这是<strong>斐波那契散列</strong>。</p>
<p>说完 ThreadLocalMap 的 set 方法，我们再来看看它的 getEntry 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 计算 Entry 的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 根据计算出的位置 i 获取 Entry 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Entry e = table[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 满足条件则返回该 Entry</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 未查找到满足条件的 Entry，继续进行处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Entry[] tab = table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = tab.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (k == key)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 找到和查询的 key 相同的 Entry 则返回， 不相等就继续往下查找</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 如果遇到 key 是 null 的 Entry 对象，则进行清除</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            expungeStaleEntry(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 继续往下环形查找</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            i = nextIndex(i, len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        e = tab[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>可以看出，在 getEntry 的时候，也会利用 ThreadLocal 对象的 <code>threadLocalHashCode</code> 计算 hash 值以确定 Entry 的位置，然后判断 Entry 的 key 和传入的 key 是否相等。如果相等，就直接返回这个  Entry；如果不相等，说明在 set 值的时候存在 Hash 冲突的情况，然后调用 getEntryAfterMiss 方法继续往下进行环形查找。</p>
<p>通过 set 和 getEntry 源码可以看出，如果 Hash 冲突严重的话，它们的效率都很低。</p>
<h3 id="ThreadLocal-的内存泄露问题"><a href="#ThreadLocal-的内存泄露问题" class="headerlink" title="ThreadLocal 的内存泄露问题"></a>ThreadLocal 的内存泄露问题</h3><p>通过上面一系列源码的分析，我们可以知道 ThreadLocal 其实存在内存泄漏问题。</p>
<p>我们知道 ThreadLocalMap 使用 ThreadLocal 的弱引用作为 key，如果一个 ThreadLocal 没有外部强引用时，那么系统 GC 的时候，这个 ThreadLocal 势必会被回收，这样 ThreadLocalMap 中就会出现 key 是 null 的 Entry 对象，那么这些 key 是 null 的 Entry 对象中的 value 就无法访问到，一直存在内存中。如果当前线程一直处于运行中，那么这些 Entry 对象中的 value 就可能一直无法回收，就会发生内存泄漏。</p>
<blockquote>
<p>关于<strong>弱引用</strong>的解释：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>
</blockquote>
<p>在实际开发中，会使用线程池去维护线程的创建和复用，比如固定大小的线程池，线程为了复用是不会主动结束的，那么 ThreadLocal 设置的 value 值就一直被引用，就会发生内存泄漏。</p>
<p>其实，为了避免内存泄漏问题， ThreadLocalMap 也是做了很多努力的。细心的小伙伴应该已经注意到了，在 ThreadLocalMap 的 set 和 getEntry 方法中，出现了 <code>replaceStaleEntry</code>、<code>cleanSomeSlots</code> 以及 <code>expungeStaleEntry</code> 方法。这三个方法其实就是清除 key 是 null 的 Entry 对象的。 然而， 核心还是 <code>expungeStaleEntry</code> 方法，其他两个方法都调用了它。expungeStaleEntry 方法会将 key 是 null 的 Entry 对象的 value 置为 null，以便垃圾回收时能够清理，同时也会将 Entry 对象置为 null。</p>
<p>expungeStaleEntry 方法源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Entry[] tab = table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = tab.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// expunge entry at staleSlot</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    tab[staleSlot].value = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tab[staleSlot] = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Rehash until we encounter null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Entry e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          (e = tab[i]) != <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          i = nextIndex(i, len)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.value = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tab[i] = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (h != i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tab[i] = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// Unlike Knuth 6.4 Algorithm R, we must scan until</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// null because multiple entries could have been stale.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    h = nextIndex(h, len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tab[h] = e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>所以，从 ThreadLocal 的设计上看，在调用 set 和 get 方法时，都会对 key 是 null 的 Entry 对象进行清除处理，解决隐藏的内存泄漏的问题。这里不得不佩服 Josh Bloch 和 Doug Lea 大师的厉害之处。</p>
<p>但是，光这样还是不够的，因为只有在调用 ThreadLocal 的 set 或 get 方法时，才会对 key 是 null 的 Entry 对象进行清除处理，这是一个前提条件，但我们不可能在任何情况都调用 set 或 get方法。所以，为了在任何情况下都能防止内存泄漏，我们最好手动调用 ThreadLocal 的 remove 方法，清除过期的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    threadLocal.set(<span class="string">"value"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 其它业务逻辑</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    threadLocal.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>remove 方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ThreadLocalMap m = getMap(Thread.currentThread());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 其实是调用了 ThreadLocalMap 的 remove 方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        m.remove(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ThreadLocalMap 的 remove 方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Entry[] tab = table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len = tab.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (Entry e = tab[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">          e != <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          e = tab[i = nextIndex(i, len)]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (e.get() == key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            expungeStaleEntry(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>上面，我们看到 ThreadLocalMap 的 remove 方法也调用了 expungeStaleEntry 方法。</p>
<h3 id="ThreadLocal-的使用场景"><a href="#ThreadLocal-的使用场景" class="headerlink" title="ThreadLocal 的使用场景"></a>ThreadLocal 的使用场景</h3><p><strong>Hibernate 中的 Session 管理</strong></p>
<p>Hibernate 中通过 ThreadLocal 管理 session 就是一个典型的案例，不同的请求线程（用户）拥有自己的 session，若将 session 共享出去被多线程访问，必然会带来线程安全问题。</p>
<p><strong>解决 SimpleDateFormat 线程不安全问题</strong></p>
<p>SimpleDateFormat.parse() 方法存在线程安全问题，该方法内部有一个 Calendar 对象。在调用 parse 方法时会先调用 Calendar.clear() 方法，然后调用 Calendar.add() 方法。如果在此期间，有一个线程先调用了 Calendar.add() 方法，然后另一个线程又调用了 Calendar.clear() 方法，那么最后 parse 方法解析的时间就是错误的。这里我们就可以使用 ThreadLocal 包装 SimpleDateFormat 来解决线程安全问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal &lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr></table></figure>

<p><strong>管理数据库连接池中的 Connection 对象</strong></p>
<p>ThreadLocal 能够实现当前线程的操作都是用同一个 Connection，保证了事务。</p>
<p><strong>避免一个线程内过度传递参数的问题</strong></p>
<p>项目中经常会遇到在一个线程中横跨若干方法调用，需要传递的对象，通常叫上下文（Context），它是一种状态，可以是用户身份、任务信息等，这样就会存在过度传参问题。如果给每个方法增加一个 context 参数非常麻烦，而且有些时候存在调用链有无法修改源码的第三方库，context 参数就传不进去了。这个时候，就可以使用 ThreadLocal 在这些方法之间进行参数传递。只需在之前将参数设置到 ThreadLocal 中，其他方法使用参数时，只需调用 ThreadLocal 的 get 方法就可以拿到参数。</p>
<p>未使用 ThreadLocal：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Context context)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    step1(context);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    step2(context);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    step3(context);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>使用 ThreadLocal：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Context context)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threadLocal.set(context);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 在方法内部调用 threadLocal.get() 就可以拿到参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        step1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        step2();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        step3();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threadLocal.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">step1</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Context context = threadLocal.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// do something</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>到这里，小伙伴们应该对 ThreadLocal 有一定的了解了。那么，我们来思考两个问题。</p>
<p><strong>当一个线程中有多个 ThreadLocal 对象，每一个 ThreadLocal 对象是如何区分的呢？</strong></p>
<p>其实，通过 ThreadLocal 的源码，我们可以看到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ThreadLocal 对象的 hash 值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">new</span> AtomicInteger();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>对于每一个 ThreadLocal 对象，都有一个 final 修饰的 threadLocalHashCode 不可变属性，初始化后便不可修改，所以可以唯一确定一个 ThreadLocal 对象。同时，通过 nextHashCode() 方法，每次初始化的 ThreadLocal 对象的 threadLocalHashCode 都会递增，所以保证了每一个 ThreadLocal 都是不同的。</p>
<p><strong>为什么不直接用线程 id 来作为 ThreadLocalMap 的 key？</strong></p>
<p>这一点其实比较容易理解，如果直接用线程 id 来作为 ThreadLocalMap 的 key 的话，在同一个线程中就无法区分放入 ThreadLocalMap 中的多个 value。在获取 value 时，就无法知道获取的是哪个。</p>
<p>代码示列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ThreadLocal&lt;String&gt; threadLocal1 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                threadLocal1.set(<span class="string">"value1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ThreadLocal&lt;String&gt; threadLocal2 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                threadLocal2.set(<span class="string">"value2"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(threadLocal1.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(threadLocal2.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>
<p>通过之前的源码，我们可以知道 ThreadLocalMap 在定位数据时，使用的 ThreadLocal 对象的 threadLocalHashCode 值计算出的 hash 值，而每个 ThreadLocal 的 threadLocalHashCode 值又是唯一的，所以使用 ThreadLocal 作为 key 是最好的选择。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次阅读 ThreadLocal 的源码，给了我不少的震撼，就像一个好奇宝宝见到很多新鲜的事物一样。同时，也让我体会到了阅读源码的快乐，收获挺多的。希望也能给看到这篇文章的读者，带来一些收获。共勉！</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] <a href="https://www.cnblogs.com/wupeixuan/p/12638203.html" target="_blank" rel="noopener">一文搞懂 ThreadLocal 原理</a><br>[2] <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1306581251653666" target="_blank" rel="noopener">使用 ThreadLocal</a><br>[3] <a href="https://www.jianshu.com/p/377bb840802f" target="_blank" rel="noopener">Java 面试必问，ThreadLocal 终极篇</a><br>[4] <a href="https://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/" target="_blank" rel="noopener">理解 Java 中的 ThreadLocal</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>如何规范地提交 Git Commit Message</title>
    <url>/2020/07/21/git-commit/</url>
    <content><![CDATA[<p>Commit message 是开发的日常操作，它可以提供更多的历史信息，方便，还可以有效的生成 Change log，对项目的管理实际至关重要，但是实际工作中却常常被大家忽略。</p>
<a id="more"></a>

<h2 id="Commit-Message-格式"><a href="#Commit-Message-格式" class="headerlink" title="Commit Message 格式"></a>Commit Message 格式</h2><p>目前，社区有多种 Commit message 的写法规范，但使用较多的是 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noopener">Angular 团队的规范</a>， 继而衍生了 <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noopener">Conventional Commits specification</a>。同时，很多配套工具也是基于此规范。</p>
<p>每个 commit message 均由 <strong>header</strong>，<strong>body</strong> 和 <strong>footer</strong> 组成。header 具有一种特殊的格式，其中包括 <strong>type</strong>，<strong>scope</strong> 和 <strong>subject</strong>。</p>
<p>它的 message 格式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 空白行</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 空白行</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;footer&gt;</span></pre></td></tr></table></figure>
<p>Commit message 的任何一行都不能超过 100 个字符，这使得该消息在 GitHub 以及各种 git 工具中更易于阅读。</p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>header 是必填的，描述主要修改类型和内容，header 的 scope 是可选的。</p>
<h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>必须为以下之一：</p>
<ul>
<li>feat：一项新功能  </li>
<li>fix：一个错误修复  </li>
<li>docs：仅文档更改  </li>
<li>style：不会影响代码含义的更改（空格，格式，缺少分号等）  </li>
<li>refactor：既不修正错误也不增加功能的代码更改  </li>
<li>perf：代码更改可提高性能  </li>
<li>test：添加缺失的测试或更正现有的测试  </li>
<li>build：影响构建系统，CI 配置或外部依赖项的更改（比如：gulp，npm）  </li>
<li>chore：其他不会修改 src 或测试文件的更改（比如文档修改，构建流程）</li>
<li>release：发布版本提交 </li>
</ul>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>可选的，可以是指定提交更改位置的任何内容，例如菜单，侧边栏等。  </p>
<h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>subject 包含对变更的简洁描述：</p>
<ul>
<li>使用第一人称现在时的命令性语气开头， 如 change，而不是 changed 或 changes</li>
<li>第一个字母不要大写</li>
<li>末尾不加句号（。）</li>
</ul>
<h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><p>可选的。与 subject 一样，使用命令式现在时态， 如 change，而不是 changed 或 changes。</p>
<p>body 应包括改变的动机，并将其与以前的行为进行对比。也就是说，描述为什么修改，做了什么样的修改，以及开发的思路等，是 commit 的详细描述。</p>
<h2 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h2><p>可选的。页脚应包含有关 Breaking Changes 的所有信息，也是此次 commit 关闭 GitHub issue 的地方。</p>
<p><strong>Breaking Changes</strong> 应以单词 <strong>BREAKING CHANGE</strong> 开头：用空格或两个换行符。后面是对变动的描述和变动的理由。</p>
<ul>
<li>关闭 issue</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Closes #233, #344</span></pre></td></tr></table></figure>

<ul>
<li>Breaking Changes<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    To migrate the code follow the example below:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Before:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    scope: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      myAttr: &#39;attribute&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    After:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    scope: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      myAttr: &#39;@&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    The removed &#96;inject&#96; wasn&#39;t generaly useful for directives so there should be no code using it.</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h3><p>还有一种特殊情况，如果当前 commit 还原了先前的 commit，则应以 revert：开头，后跟还原的 commit 的 header。在 body 中必须写成：<code>This reverts commit &lt;hash&gt;</code>。其中 hash 是要还原的 commit 的 SHA 标识。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revert: feat(pencil): add &#39;&#39; option</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span></pre></td></tr></table></figure>

<h2 id="git-commit-模板"><a href="#git-commit-模板" class="headerlink" title="git commit 模板"></a>git commit 模板</h2><p>如果你想尝试一下这样的规范格式，那么可以为 git 设置 commit 模板， 每次 git commit 的时候在 vim 中带出， 时刻提醒自己:</p>
<p>在 ~/.gitconfig 添加:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[commit]</span></pre></td></tr><tr><td class="code"><pre><span class="line">template &#x3D; ~&#x2F;.gitmessage</span></pre></td></tr></table></figure>

<p>新建 ~/.gitmessage 内容可以如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># head: &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"># - type: feat, fix, docs, style, refactor, test, chore</span></pre></td></tr><tr><td class="code"><pre><span class="line"># - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)</span></pre></td></tr><tr><td class="code"><pre><span class="line"># - subject: start with verb (such as &#39;change&#39;), 50-character line</span></pre></td></tr><tr><td class="code"><pre><span class="line">#</span></pre></td></tr><tr><td class="code"><pre><span class="line"># body: 72-character wrapped. This should answer:</span></pre></td></tr><tr><td class="code"><pre><span class="line"># * Why was this change necessary?</span></pre></td></tr><tr><td class="code"><pre><span class="line"># * How does it address the problem?</span></pre></td></tr><tr><td class="code"><pre><span class="line"># * Are there any side effects?</span></pre></td></tr><tr><td class="code"><pre><span class="line">#</span></pre></td></tr><tr><td class="code"><pre><span class="line"># footer: </span></pre></td></tr><tr><td class="code"><pre><span class="line"># - Include a link to the ticket, if any.</span></pre></td></tr><tr><td class="code"><pre><span class="line"># - BREAKING CHANGE</span></pre></td></tr><tr><td class="code"><pre><span class="line">#</span></pre></td></tr></table></figure>

<h2 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h2><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a> 是一个撰写合格 Commit message 的工具。我们需要借助它提供的 git cz 命令替代我们的 git commit 命令，帮助我们生成符合规范的 commit message。</p>
<p>下面，我们就来安装一下吧。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install commitizen -g</span></pre></td></tr></table></figure>
<p>在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 规范。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commitizen init cz-conventional-changelog --save --save-exact</span></pre></td></tr></table></figure>

<p>那么在对应的项目中执行 <code>git cz</code> 替代 <code>git commit</code>，之后就会出现选项，用来生成符合规范的 commit message。</p>
<p>效果如下：<br><img alt="add-commit" data-src="https://img-blog.csdnimg.cn/20200721175725796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p>更多安装方式可以查看：<a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a> </p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>作为程序猿，我个人认为适当遵守一些开发规范，可以帮助我们减少编程中的一些错误，提高开发效率。所以，一定要养成良好的编程习惯。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noopener">Angular Git Commit Guidelines</a></p>
<p><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4#heading-2" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>一文读懂 Java 集合中的快速失败(fail-fast)和安全失败(fail-safe)机制</title>
    <url>/2020/07/20/java-fail-safe/</url>
    <content><![CDATA[<h3 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h3><p>采用快速失败机制的集合容器，使用迭代器进行遍历集合时，除了通过迭代器自身的 <code>remove()</code> 方法之外，对集合进行任何其他方式的结构性修改，则会抛出 ConcurrentModificationException 异常。</p>
<p>在 <code>java.util</code> 包下的集合类都采用的是快速失败机制，不能在多线程下发生并发修改（迭代过程中被修改）。</p>
<a id="more"></a>
<p><strong>原理</strong></p>
<p>迭代器在遍历时直接访问集合的内容时，因此集合中的内容在遍历的过程中无法被修改。为了保证不被修改，迭代器内部维护了一个 modCount 变量 ，当集合结构改变（添加、删除或者修改），就会改变 modCount 的值。每当迭代器使用 hasNext() 和 next() 方法遍历下一个元素之前，都会检查 modCount 的值是否等于 expectedmodCount 的值，当检测到 <code>modCount != expectedmodCount</code> 时，抛出 ConcurrentModificationException 异常，反之继续遍历。</p>
<blockquote>
<p>注意: 迭代器的快速失败机制是无法得到保证的，这里异常的抛出条件是检测到 <code>modCount != expectedmodCount</code> 这个条件。如果集合发生变化时 modCount 的值刚好等于 expectedmodCount 的值，则异常不会抛出。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法，迭代器的快速失败机制应该仅用于检测 bug。</p>
</blockquote>
<p><strong>优缺点</strong></p>
<ul>
<li>单线程下效率相对较高。</li>
<li>多线程环境下，线程不安全。</li>
</ul>
<p>这里排除 HashTable。</p>
<h3 id="安全失败"><a href="#安全失败" class="headerlink" title="安全失败"></a>安全失败</h3><p>采用安全失败机制的集合容器，使用迭代器进行遍历时不是直接在集合内容上访问的，而是将原有集合内容进行拷贝，在拷贝的集合上进行遍历。  </p>
<p><strong>原理</strong></p>
<p>迭代器在遍历时访问的是拷贝的集合，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发 ConcurrentModificationException 异常。</p>
<p><strong>优缺点</strong></p>
<ul>
<li>由于对集合进行了拷贝，避免了 ConcurrentModificationException 异常，但拷贝时产生大量的无效对象，开销大。</li>
<li>无法保证读取到的数据是原集合中最新的数据，即迭代器进行遍历的是拷贝的集合，在遍历期间原集合发生的修改，迭代器是检测不到的。</li>
</ul>
<h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>结构性修改：指改变集合大小的修改。</p>
<p>非结构性修改：指不涉及集合大小的修改。</p>
<p>本文所提到的“修改”指的是“结构性修改”。也就是说，如果只是改变集合中元素本身的内容，不会触发快速失败机制。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo + GitHub Pages 搭建个人博客及 NexT 主题配置</title>
    <url>/2020/07/19/hexo-blog-creat/</url>
    <content><![CDATA[<p>最近，自己根据网上的一些教程，基于 Hexo 搭建了自己的博客，并把搭建过程整理了出来，以供参考。</p>
<p>博客地址：<a href="http://yifanstar.top/">http://yifanstar.top/</a></p>
<p>源码仓库：<a href="https://github.com/yifanzheng/yifanzheng.github.io/tree/hexo-blog-backup" target="_blank" rel="noopener">https://github.com/yifanzheng/yifanzheng.github.io/tree/hexo-blog-backup</a></p>
<p>框架驱动：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>  </p>
<p>博客主题：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT ^6.x</a></p>
<a id="more"></a>

<h2 id="博客搭建与配置"><a href="#博客搭建与配置" class="headerlink" title="博客搭建与配置"></a>博客搭建与配置</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></p>
</li>
<li><p><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p>
</li>
</ul>
<h3 id="Hexo-搭建"><a href="#Hexo-搭建" class="headerlink" title="Hexo 搭建"></a>Hexo 搭建</h3><p>安装 Hexo，打开 Git Bash 命令窗口，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span></pre></td></tr></table></figure>
<p>安装好 Hexo 后，在任意目录新建一个空文件夹，名字可以为 blogs，然后进入这个文件夹，在命令行输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span></pre></td></tr></table></figure>
<p>执行完成后（如果命令窗口出现橙色的 WARN 不用管），生成文件结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── node_modules       //依赖安装目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span></pre></td></tr><tr><td class="code"><pre><span class="line">|   ├── draft.md         //草稿模板</span></pre></td></tr><tr><td class="code"><pre><span class="line">|   ├── page.md          //页面模板</span></pre></td></tr><tr><td class="code"><pre><span class="line">|   └── post.md          //文章模板</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── <span class="built_in">source</span>             //资源文件夹，用于放置图片、数据、文章等资源</span></pre></td></tr><tr><td class="code"><pre><span class="line">|   └── _posts           //文章目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── themes             //主题文件夹</span></pre></td></tr><tr><td class="code"><pre><span class="line">|   └── landscape        //默认主题</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── .gitignore         //指定不纳入git版本控制的文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── _config.yml        //站点配置文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── db.json            </span></pre></td></tr><tr><td class="code"><pre><span class="line">├── package.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">└── package-lock.json</span></pre></td></tr></table></figure>
<p>下载依赖包，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span></pre></td></tr></table></figure>
<p>依赖包下载完成后，输入如下命令启动 hexo 的内置 Web 服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g // 打包文件</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">hexo s // 启动服务器</span></pre></td></tr></table></figure>

<p>然后可以在在浏览器中通过地址 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 访问博客了。</p>
<h3 id="更换-NexT-主题"><a href="#更换-NexT-主题" class="headerlink" title="更换 NexT 主题"></a>更换 NexT 主题</h3><p>Hexo 更换主题的方式很简单，只需要将主题文件拷贝至根目录下的 themes 目录中， 然后修改根目录下 <code>_config.yml</code> 文件中的 theme 字段，便可完成更换。</p>
<p>在博客项目的根目录下，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span></pre></td></tr></table></figure>
<p>打开根目录下 <code>_config.yml</code> 文件,将 theme 字段的值修改为 next。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span></pre></td></tr></table></figure>

<p>这个时候需要重启服务器 <code>hexo g &amp;&amp; hexo s</code> 并刷新才能使主题生效。</p>
<h3 id="重要定义"><a href="#重要定义" class="headerlink" title="重要定义"></a>重要定义</h3><p>在项目文件中存在两个 <code>_config.yml</code> 文件，为了方便区分。</p>
<ul>
<li><p>项目根目录下的 <code>_config.yml</code> 文件叫作<code>站点配置文件</code>。</p>
</li>
<li><p>主题文件夹根目录下的 <code>themes/next/_config.yml</code> 文件叫作<code>主题配置文件</code>。</p>
</li>
</ul>
<h3 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h3><p><strong>GitHub 配置</strong></p>
<ul>
<li><p>创建 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 账号</p>
</li>
<li><p>创建仓库，仓库名必须是：&lt;GitHub 账号名称&gt;.github.io，这是GitHub pages 的特殊命名规范</p>
</li>
</ul>
<p><strong>修改站点配置文件 _config.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">repo:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/yifanzheng/yifanzheng.github.io.git</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span></pre></td></tr></table></figure>

<p><strong>注意</strong>：<code>GitHub pages</code> 仅在 <code>master</code> 分支下实现。</p>
<p><strong>部署</strong>  </p>
<ul>
<li>在项目根目录下，安装 Git 部署插件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span></pre></td></tr></table></figure>

<ul>
<li>部署到 Github Pages</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">hexo d</span></pre></td></tr></table></figure>

<p>部署完成后，在浏览器访问网址：https://&lt;Github账号名称&gt;.github.io 即可查看博客。</p>
<p>详细过程可以参考：<a href="https://blog.csdn.net/weixin_39510813/article/details/80216552" target="_blank" rel="noopener">借助 GitHub pages 搭建静态个人网站并绑定域名</a></p>
<h3 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h3><p>站点配置可以查看 Hexo 官方文档。</p>
<p>Hexo 官方文档：<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration.html</a> 。</p>
<p><strong>注意</strong>：所有的 <code>:</code> 都为英文字符，后面必须有一个空格。</p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>NexT 的主题配置可以先查看官方文档，写得很不错，很完善。</p>
<p>NexT 官方文档：<a href="http://theme-next.iissnan.com/getting-started" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started</a> 。</p>
<p>NexT （最新）官方文档：<a href="https://theme-next.org/docs/getting-started/" target="_blank" rel="noopener">https://theme-next.org/docs/getting-started/</a> 。</p>
<h3 id="第三方配置"><a href="#第三方配置" class="headerlink" title="第三方配置"></a>第三方配置</h3><p><strong>鼠标点击特效</strong></p>
<p>从各个站点里收集了以下四个比较常用的鼠标点击特效：</p>
<ul>
<li>礼花特效</li>
</ul>
<p><img alt="礼花" data-src="https://img-blog.csdnimg.cn/20191209130449915.gif">  </p>
<p>下载：<a href="https://github.com/yifanzheng/yifanzheng.github.io/blob/hexo-blog-backup/asset/js/firework.js" target="_blank" rel="noopener">礼花特效</a></p>
<ul>
<li>爆炸特效</li>
</ul>
<p><img alt="爆炸" data-src="https://img-blog.csdnimg.cn/20191209130524319.gif"></p>
<p>下载：<a href="https://github.com/yifanzheng/yifanzheng.github.io/blob/hexo-blog-backup/asset/js/explosion.min.js" target="_blank" rel="noopener">爆炸特效</a></p>
<ul>
<li>浮出爱心</li>
</ul>
<p><img alt="爱心" data-src="https://img-blog.csdnimg.cn/20191209130555950.gif"></p>
<p>下载：<a href="https://github.com/yifanzheng/yifanzheng.github.io/blob/hexo-blog-backup/asset/js/love.min.js" target="_blank" rel="noopener">浮出爱心</a></p>
<ul>
<li>浮出文字</li>
</ul>
<p><img alt="文字" data-src="https://img-blog.csdnimg.cn/20191209130636567.gif"></p>
<p>下载：<a href="https://github.com/yifanzheng/yifanzheng.github.io/blob/hexo-blog-backup/asset/js/text.js" target="_blank" rel="noopener">浮出文字</a></p>
<p>将脚本文件放置于 <code>themes/next/source/js/cursor</code> 目录下（如果没有相应的目录，需要自行创建，可以根据自己习惯命名）。</p>
<p>在主题自定义布局文件 <code>themes/next/layout/_custom/custom.swig</code> （如果没有 custom.swig 文件，需自行创建）中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.cursor_effect == <span class="string">"fireworks"</span> %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">"/js/cursor/fireworks.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% elseif theme.cursor_effect == <span class="string">"explosion"</span> %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">"fireworks"</span> style=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script src=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">"/js/cursor/explosion.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% elseif theme.cursor_effect == <span class="string">"love"</span> %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">"/js/cursor/love.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% elseif theme.cursor_effect == <span class="string">"text"</span> %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">"/js/cursor/text.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% endif %&#125;</span></pre></td></tr></table></figure>

<p>在 <code>themes/next/layout/_layout.swig</code> 文件 body 标签中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;% include <span class="string">'_custom/custom.swig'</span> %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;<span class="regexp">/body&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>html&gt;</span></pre></td></tr></table></figure>

<p>在主题配置文件 <code>themes/next/_config.yml</code> 中添加如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">cursor_effect:</span> <span class="string">love</span></span></pre></td></tr></table></figure>

<p><strong>打字特性</strong></p>
<ul>
<li>打字礼花</li>
</ul>
<p><img alt="打字礼花" data-src="https://img-blog.csdnimg.cn/20191209130716149.gif"></p>
<p>下载：<a href="https://github.com/yifanzheng/yifanzheng.github.io/blob/hexo-blog-backup/asset/js/activate-power-mode.min.js" target="_blank" rel="noopener">打字礼花</a>  </p>
<p>将脚本文件放置到 <code>themes/next/source/js</code> 目录下。</p>
<p>在主题自定义配置 <code>themes/next/layout/_custom/custom.swig</code> 文件中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.typing_effect %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">"/js/activate-power-mode.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    POWERMODE.colorful = &#123;&#123; theme.typing_effect.colorful &#125;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    POWERMODE.shake = &#123;&#123; theme.typing_effect.shake &#125;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'input'</span>, POWERMODE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span></pre></td></tr></table></figure>

<p>在主题配置文件 <code>themes/next/_config.yml</code> 中添加如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># typing effect</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">typing_effect:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span>  <span class="comment"># 礼花特效</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">shake:</span> <span class="literal">false</span>  <span class="comment"># 震动特效</span></span></pre></td></tr></table></figure>

<p>在 <code>themes/next/layout/_layout.swig</code> 文件 body 标签中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;% include <span class="string">'_custom/custom.swig'</span> %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;<span class="regexp">/body&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>html&gt;</span></pre></td></tr></table></figure>

<p><strong>网站运行时间</strong></p>
<p>在主题自定义配置 <code>themes/next/layout/_custom/custom.swig</code> 文件中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;# 页脚站点运行时间统计 #&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.footer.site_runtime.enable %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/moment@2.22.2/moment.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/moment-precise-range-plugin@1.3.0/moment-precise-range.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">var</span> ages = moment.preciseDiff(moment(),moment(&#123;&#123; theme.footer.site_runtime.since &#125;&#125;,<span class="string">"YYYYMMDD"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ages = ages.replace(<span class="regexp">/years?/</span>, <span class="string">"年"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ages = ages.replace(<span class="regexp">/months?/</span>, <span class="string">"月"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ages = ages.replace(<span class="regexp">/days?/</span>, <span class="string">"天"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ages = ages.replace(<span class="regexp">/hours?/</span>, <span class="string">"小时"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ages = ages.replace(<span class="regexp">/minutes?/</span>, <span class="string">"分"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ages = ages.replace(<span class="regexp">/seconds?/</span>, <span class="string">"秒"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ages = ages.replace(<span class="regexp">/\d+/g</span>, <span class="string">'&lt;span style="color:&#123;&#123; theme.footer.site_runtime.color &#125;&#125;"&gt;$&amp;&lt;/span&gt;'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      div.innerHTML = <span class="string">`&#123;&#123; __('footer.site_runtime')&#125;&#125; <span class="subst">$&#123;ages&#125;</span>`</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//插入到copyright之后</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> copyright = <span class="built_in">document</span>.querySelector(<span class="string">".copyright"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">".footer-inner"</span>).insertBefore(div, copyright.nextSibling);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    timer();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setInterval(<span class="string">"timer()"</span>,<span class="number">1000</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;<span class="regexp">/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span></pre></td></tr></table></figure>

<p>在 <code>themes/next/layout/_layout.swig</code> 文件 body 标签中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;% include <span class="string">'_custom/custom.swig'</span> %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;<span class="regexp">/body&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>html&gt;</span></pre></td></tr></table></figure>

<p>在主题主题配置文件 <code>themes/next/_config.yml</code> 中添加如下内容：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  footer:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ...</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+  # Web Site runtime </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+  site_runtime: </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+  enable: true </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+  # Specify the date when the site was setup</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+  since: 20191124</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+  # color of number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+  color: "#1890ff"</span></span></pre></td></tr></table></figure>

<p>然后在文件 <code>themes\next\languages\zh-CN.yml</code> 中补全对应文案：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  footer:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    powered: "由 %s 强力驱动"</span></pre></td></tr><tr><td class="code"><pre><span class="line">    theme: 主题</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # total_views: 总访问量</span></pre></td></tr><tr><td class="code"><pre><span class="line">    # total_visitors: 总访客量</span></pre></td></tr><tr><td class="code"><pre><span class="line">    total_views: "历经 %s 次回眸才与你相遇"</span></pre></td></tr><tr><td class="code"><pre><span class="line">    total_visitors: "我的第 %s 位朋友"</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+   site_runtime: "我已在此等候你"</span></span></pre></td></tr></table></figure>

<p><strong>文章阅读量 - LeanCloud</strong> </p>
<p>LeanCloud 能够给每篇博客统计访问量的工具。首先注册并登录 LeanCloud。  </p>
<p>LeanCloud 官网：<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">https://www.leancloud.cn/</a> 。</p>
<ul>
<li>LeanCloud 应用配置</li>
</ul>
<p>参考：<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md</a></p>
<ul>
<li>hexo-leancloud-counter-security 插件安装与配置</li>
</ul>
<p>参考：<a href="https://github.com/theme-next/hexo-leancloud-counter-security" target="_blank" rel="noopener">https://github.com/theme-next/hexo-leancloud-counter-security</a></p>
<p><strong>评论系统 - Valine</strong></p>
<p>Valine 是一款基于 Leancloud 的快速，简单和高效的无后端评论系统。</p>
<p>Valine 官网：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a> 。</p>
<p>配置参考：<a href="https://theme-next.org/docs/third-party-services/comments#Valine" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/comments#Valine</a></p>
<h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>登录<a href="https://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>， 定位到站点的代码获取页面。<br>复制 hm.js? 后面那串统计脚本 id，如图：   </p>
<p><img alt="baidu-analytics" data-src="https://img-blog.csdnimg.cn/20191209175741779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p>编辑<code>主题配置文件</code>，修改字段 <code>baidu_analytics</code>, 字段值设置成你的百度统计脚本 id。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Baidu Analytics</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">baidu_analytics:</span> <span class="comment"># &lt;app_id&gt;</span></span></pre></td></tr></table></figure>

<h3 id="收录"><a href="#收录" class="headerlink" title="收录"></a>收录</h3><p><strong>百度收录</strong></p>
<ul>
<li>添加站点</li>
</ul>
<p>在 <a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台</a> 中提交站点域名，勾选站点属性，最后一步中同样会要求验证网站的所有权身份，选择 <strong>CNAME 验证</strong>，然后将给出的 ID 信息使用 CNAME 解析到 <code>ziyuan.baidu.com</code>。 </p>
<p><img alt="baiduziyuan1" data-src="https://img-blog.csdnimg.cn/20191209130807319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p><img alt="baiduziyuan2" data-src="https://img-blog.csdnimg.cn/20191209131230683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p>到 <a href="https://dns.console.aliyun.com/" target="_blank" rel="noopener">阿里云</a> 进行域名解析。</p>
<p><img alt="cname" data-src="https://img-blog.csdnimg.cn/20191209131251558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<ul>
<li>生成网站地图</li>
</ul>
<p>使用 npm 自动生成网站的 sitemap，然后将生成的 sitemap 提交到百度搜索引擎，输入如下命令安装 sitemap 插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span></pre></td></tr></table></figure>
<p>在 <code>站点配置文件</code> 添加如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo sitemap</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">baidusitemap:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span></pre></td></tr></table></figure>

<p>配置成功后，会生成 <code>sitemap.xml</code> 和 <code>baidusitemap.xml</code>，<code>sitemap.xml</code> 一般提交给谷歌搜素引擎，<code>baidusitemap.xml</code> 一般适合提交百度搜索引擎。</p>
<p>提交百度 sitemap：</p>
<p><img alt="baidu-sitemap" data-src="https://img-blog.csdnimg.cn/20191209131547939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70">  </p>
<p>除了 sitemap 之外还提供了多种推送站点内容的方案：</p>
<ol>
<li>主动推送：通过 API 接口推送站点内容，实时性较高。</li>
<li>自动推送：在网页内添加 JS 脚本，每当页面被访问的时候会将页面 url 推送给百度，比较被动。</li>
<li>sitemap：填写站点地图文件地址，百度会周期性的抓取其中的内容进行分析收录，收录效率比较低。</li>
<li>手动提交：手动填写链接地址进行收录。</li>
</ol>
<ul>
<li>开启主动推送</li>
</ul>
<p><img alt="baidupush" data-src="https://img-blog.csdnimg.cn/2019120913161683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p>Hexo 中可以利用 hexo-baidu-url-submit 插件实现主动推送，在项目根目录下输入以下命令安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span></pre></td></tr></table></figure>

<p>在 <code>站点配置文件</code> 中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># baidu SEO</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">count:</span> <span class="number">80</span> <span class="comment"># 提交最新的一个链接 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">host:</span> <span class="string">www.yifanstar.top</span> <span class="comment"># 在百度站长平台中注册的域名 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">token:</span> <span class="string">&lt;your</span> <span class="string">token&gt;</span> <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span></pre></td></tr></table></figure>
<p>在 <code>站点配置文件</code> 中修改部署策略：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># Deployment</span></pre></td></tr><tr><td class="code"><pre><span class="line">## Docs: https://hexo.io/docs/deployment.html</span></pre></td></tr><tr><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="code"><pre><span class="line"> -</span></pre></td></tr><tr><td class="code"><pre><span class="line">  type: 'git'</span></pre></td></tr><tr><td class="code"><pre><span class="line">  repo: </span></pre></td></tr><tr><td class="code"><pre><span class="line">    github: https://github.com/yifanzheng/yifanzheng.github.io.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">    coding: https://git.dev.tencent.com/yifanzheng/blogs.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">  branch: master</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+ - </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="addition">+  type: baidu_url_submitter</span></span></pre></td></tr></table></figure>

<ul>
<li>开启自动推送</li>
</ul>
<p>Next 主题中内置了开启百度自动推送的选项，只需将其设置成 true 即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span></pre></td></tr></table></figure>

<p><strong>谷歌收录</strong>  </p>
<p>在 <a href="https://search.google.com/search-console" target="_blank" rel="noopener">Google Search Console</a> 中提交站点域名，此时会提供几种验证网站所有权的方法，展开其他验证方法中的 <strong>HTML 标记</strong>，然后将 meta 标签的 content 属性值复制到主题配置文件中：</p>
<p><img alt="google-seach1" data-src="https://img-blog.csdnimg.cn/201912091316456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">google_site_verification:</span> <span class="string">&lt;content&gt;</span></span></pre></td></tr></table></figure>

<p>回到 Search Console 页面点击验证按钮，验证成功后将进入控制台，点击左侧 <strong>站点地图</strong> 菜单，在域名后输入 <code>sitemap.xml</code> 并提交，完成站点地图的添加。</p>
<p><img alt="google-search" data-src="https://img-blog.csdnimg.cn/20191209131724140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<h3 id="使用-Gulp-压缩静态资源"><a href="#使用-Gulp-压缩静态资源" class="headerlink" title="使用 Gulp 压缩静态资源"></a>使用 Gulp 压缩静态资源</h3><p>Gulp 是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。</p>
<ul>
<li>安装 Gulp</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span></pre></td></tr></table></figure>
<ul>
<li>安装 Gulp 的插件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装功能模块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 额外的功能模块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --save</span></pre></td></tr></table></figure>

<p>接下来在博客项目的根目录下新建 <code>gulpfile.js</code> 文件，并复制下面的内容到文件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">"gulp-debug"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">"gulp-clean-css"</span>); <span class="comment">//css压缩组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>); <span class="comment">//js压缩组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">"gulp-htmlmin"</span>); <span class="comment">//html压缩组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">"gulp-htmlclean"</span>); <span class="comment">//html清理组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">"gulp-imagemin"</span>); <span class="comment">//图片压缩组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">"gulp-changed"</span>); <span class="comment">//文件更改校验组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">"gulp-if"</span>); <span class="comment">//任务 帮助调用组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> plumber = <span class="built_in">require</span>(<span class="string">"gulp-plumber"</span>); <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>; <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">true</span>; <span class="comment">//是否调试显示 编译通过的文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulpBabel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> es2015Preset = <span class="built_in">require</span>(<span class="string">"babel-preset-es2015"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">"del"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">"hexo"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;); <span class="comment">// 初始化一个hexo对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 清除public文件夹</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> del([<span class="string">"public/**/*"</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"generate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> hexo</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .call(<span class="string">"generate"</span>, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        watch: <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> hexo.exit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> hexo.exit(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 启动Hexo服务器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"server"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> hexo</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .init()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> hexo.call(<span class="string">"server"</span>, &#123;&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">console</span>.log(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 部署到服务器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"deploy"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> hexo</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .call(<span class="string">"deploy"</span>, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        watch: <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> hexo.exit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> hexo.exit(err);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"compressJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> gulp</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .src([<span class="string">"./public/**/*.js"</span>, <span class="string">"!./public/libs/**"</span>]) <span class="comment">//排除的js</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress JS:"</span> &#125;)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(plumber())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      gulpBabel(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        presets: [es2015Preset] <span class="comment">// es5检查机制</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(uglify()) <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>)); <span class="comment">//输出到目标目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"compressCss"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> option = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    rebase: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//advanced: true,               //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    compatibility: <span class="string">"ie7"</span> <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//keepBreaks: true,             //类型：Boolean 默认：false [是否保留换行]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//keepSpecialComments: '*'      //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> gulp</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .src([<span class="string">"./public/**/*.css"</span>, <span class="string">"!./public/**/*.min.css"</span>]) <span class="comment">//排除的css</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress CSS:"</span> &#125;)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(plumber())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(cleancss(option))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"compressHtml"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> cleanOptions = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protect: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>, <span class="comment">//忽略处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/gi</span> <span class="comment">//特殊处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> minOption = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    collapseWhitespace: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值  &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值    &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    removeComments: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    minifyJS: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    minifyCSS: <span class="literal">true</span>, <span class="comment">//压缩页面CSS</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    minifyURLs: <span class="literal">true</span> <span class="comment">//替换页面URL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> gulp</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .src(<span class="string">"./public/**/*.html"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress HTML:"</span> &#125;)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(plumber())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(htmlclean(cleanOptions))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(htmlmin(minOption))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩 public/uploads 目录内图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"compressImage"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> option = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    optimizationLevel: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    interlaced: <span class="literal">false</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    multipass: <span class="literal">false</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> gulp</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .src(<span class="string">"./public/medias/**/*.*"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public/medias"</span>)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulpif(isDebug, debug(&#123; <span class="attr">title</span>: <span class="string">"Compress Images:"</span> &#125;)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(plumber())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(imagemin(option))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="string">"build"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  gulp.series(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"clean"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"generate"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"compressHtml"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"compressCss"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"compressJs"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"compressImage"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gulp.parallel(<span class="string">"deploy"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  )</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 默认任务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp.task(</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="string">"default"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  gulp.series(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"clean"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"generate"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gulp.parallel(<span class="string">"compressHtml"</span>, <span class="string">"compressCss"</span>, <span class="string">"compressImage"</span>, <span class="string">"compressJs"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  )</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></span></pre></td></tr></table></figure>
<p>以后在部署时，只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩，压缩完成后执行 deploy 命令同步到服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">gulp</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">hexo d</span></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.im/post/5dd2e898e51d45400206a466#heading-0" target="_blank" rel="noopener">https://juejin.im/post/5dd2e898e51d45400206a466#heading-0</a></p>
<p><a href="https://juejin.im/post/5bebfe51e51d45332a456de0#heading-0" target="_blank" rel="noopener">https://juejin.im/post/5bebfe51e51d45332a456de0#heading-0</a></p>
<p><a href="https://hexo-guide.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">https://hexo-guide.readthedocs.io/zh_CN/latest/index.html</a></p>
<p><a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener">https://io-oi.me/tech/hexo-next-optimization/</a></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
  </entry>
  <entry>
    <title>使用 GitHub Actions 自动部署 Hexo 博客到 GitHub Pages</title>
    <url>/2020/07/19/hexo-github-actions/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近，看到网上有很多人开始使用 GitHub Actions 进行项目的持续集成（CI）以及持续部署（CD）。于是，我也心血来潮，开始使用 GitHub Actions 来进行个人博客的自动部署。不得不说，GitHub Actions 真香！</p>
<a id="more"></a>

<p>之前，我部署 Hexo 博客时，先通过 <code>hexo g</code> 将写好的 Markdown 文件转化为 HTML 文件，然后再使用 <code>hexo d</code> 把生成的 public 文件推送到 Github 仓库中，然后又使用 git 命令将 Hexo 博客开发源码推送到仓库的另一个分支中进行备份。这样来来回回的操作，着实有点麻烦。但使用了 GitHub Actions 后就方便多了，我只需提前写好自动化执行的脚本，当我将 Hexo 开发源码推送指定分支，GitHub Actions 自动就帮我生成好 HTML 文件并发布到 GitHub Pages 上，是不是很方便呀。</p>
<p>下面，我们就来看看是如何利用  GitHub Actions 实现自动化部署 Hexo 博客的吧。</p>
<h3 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h3><p><a href="https://github.com/features/actions" target="_blank" rel="noopener">GitHub Actions</a> 是 GitHub 于 2018 年 10 月推出的持续集成服务。</p>
<p>GitHub Actions 的工作原理：当我们提前设置好需要自动化执行的任务脚本（.github/workflows 下的 .yml 文件）后，GitHub Actions 监控当前仓库的某一个操作（如：push），一旦有此操作，就会分配一个虚拟主机来自动化执行这些任务。</p>
<p>我们设置的任务即为 Action ，它存放在项目根目录的 <code>.github/workflows</code> 文件下，后缀为 .yml。一个 Action 相当于是一个工作流 workflow，一个工作流则可以有多个任务 job，而每个任务又能分成几个步骤 step。任务、步骤会依次执行。</p>
<p>关于 GitHub Actions 更多知识，请看 <a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程 - 阮一峰</a> 或 <a href="https://github.com/features/actions" target="_blank" rel="noopener">GitHub Actions 官网</a>。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>GitHub 仓库</strong></p>
<p>首先，我们需要准备一个部署博客的仓库，一般命名为 <code>.github.io</code> 这种形式，同时在本仓库上再创建一个分支用于保存 Hexo 开发源码。我这里使用建好的 <code>hexo-blog-backup</code> 分支进行 Hexo 开发源码备份，使用 <code>master</code> 分支进行博客源码部署。</p>
<blockquote>
<p>提醒，这里也可以建两个仓库分别进行博客源码和 Hexo 开发源码的保存，跟建两个分支一样。</p>
</blockquote>
<p><strong>创建 GitHub Personal Access Token</strong></p>
<p>这里还需要创建 Personal Access Token  用于 GitHub Actions 所构建得虚拟系统可以内容推送到仓库。</p>
<p>Personal Access Token 的生成教程见 <a href="https://docs.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token" target="_blank" rel="noopener">Creating a personal access token</a></p>
<p><strong>设置仓库 Secrets</strong></p>
<p>将创建好的 Personal Access Token 添加到仓库的 Secrets 中，并设置名称， 如图：<br><img alt="secrets" data-src="https://img-blog.csdnimg.cn/20200719212408637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"><br><strong>创建 workflow 脚本</strong></p>
<p>在项目根目录下创建 <code>.github/workflows</code> 文件夹，并在文件夹下创建 YAML 文件用于编写任务执行脚本。（我这里创建的是 main.yml，命名可以随意）</p>
<p>脚本内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Blog</span> <span class="string">CI/CD</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 触发条件：在 push 到 hexo-blog-backup 分支后触发</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">push:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">branches:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="bullet">-</span> <span class="string">hexo-blog-backup</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">env:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">blog-cicd:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 使用最新的 Ubuntu 系统作为编译部署的环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">steps:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment"># 设置 node.js 环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">with:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">node-version:</span> <span class="string">'12.x'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment"># 设置包缓存目录，避免每次下载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">with:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">hexo</span> <span class="string">dependencies</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment"># 下载 hexo-cli 脚手架及相关安装包</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">npm</span> <span class="string">install</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment"># 编译 markdown 文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span> <span class="string">blog</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">env:</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># Github 仓库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">GITHUB_REPO:</span> <span class="string">github.com/yifanzheng/yifanzheng.github.io</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># Coding 仓库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">CODING_REPO:</span> <span class="string">e.coding.net/yifanzheng/blogs.git</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># Gitee 仓库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">GITEE_REPO:</span> <span class="string">gitee.com/yifanzheng/yifangzheng.gitee.io.git</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment"># 将编译后的博客文件推送到指定仓库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">cd</span> <span class="string">./public</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">init</span> <span class="string">&amp;&amp;</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"yifanzheng"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"zhengyifan1996@outlook.com"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"GitHub Actions Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://$<span class="template-variable">&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span>@$GITHUB_REPO"</span> <span class="string">master:master</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://RoYFbFDSfM:$<span class="template-variable">&#123;&#123; secrets.CODING_TOKEN &#125;&#125;</span>@$CODING_REPO"</span> <span class="string">master:master</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://yifanzheng:$<span class="template-variable">&#123;&#123; secrets.GITEE_ACCESS_TOKEN &#125;&#125;</span>@$GITEE_REPO"</span> <span class="string">master:master</span></span></pre></td></tr></table></figure>
<p>workflow 详细语法见： <a href="https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions" target="_blank" rel="noopener">GitHub 操作的工作流程语法</a></p>
<p>小伙伴们可以根据实际情况将上面的脚本修改成自己可用的脚本。</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>最后，我们只需要将源码推送到指定分支，GitHub Actions 就会自动帮我们部署项目啦。<br><img alt="deploy" data-src="https://img-blog.csdnimg.cn/20200719221322516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p>最后再说一下怎么找 action，以下是几个常用的网址：</p>
<ul>
<li>GitHub 官方的 action：<a href="https://github.com/actions" target="_blank" rel="noopener">https://github.com/actions</a></li>
<li>GitHub 官方市场中的 action：<a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">https://github.com/marketplace?type=actions</a></li>
<li>第三方收集的有用的 action：<a href="https://github.com/sdras/awesome-actions" target="_blank" rel="noopener">https://github.com/sdras/awesome-actions</a></li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://vuepress-theme-reco.recoluan.com/views/other/github-actions.html#%E8%AE%BE%E7%BD%AE-secrets" target="_blank" rel="noopener">使用 GitHub Actions 自动部署博客</a></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2020/07/17/proxy-pattern/</url>
    <content><![CDATA[<p>代理模式（Proxy）意图是为另一个对象提供代理，以控制对其的访问。即通过代理类访问目标类，这样做可以通过代理对象扩展目标类的功能以及控制对目标类的访问。</p>
<p>代理模式主要有三种形式，分别是<strong>静态代理</strong>、<strong>动态代理</strong>、<strong>CGlib 代理</strong>。</p>
<a id="more"></a>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设，我们要记录老师授课前和授课后的信息，分别使用上面三种代理模式实现。</p>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>若代理类在程序运行前就已经存在，那么这种代理方式被成为<strong>静态代理</strong> ，这种情况下的代理类通常都是我们在 Java 代码中定义的。使用静态代理实现时，需要定义接口或者父类，被代理类（即目标类）与代理类一起实现相同接口或者父类。</p>
<p><strong>代码示列</strong></p>
<ul>
<li>Teach 接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Teach</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Teach</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doTeach</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>TeachImpl 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * TeachImpl</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeachImpl</span> <span class="keyword">implements</span> <span class="title">Teach</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTeach</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Do teach."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>TeachProxy 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * TeachProxy</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeachProxy</span> <span class="keyword">implements</span> <span class="title">Teach</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Teach teach;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeachProxy</span><span class="params">(Teach teach)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.teach = teach;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTeach</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Do teach before."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.teach.doTeach();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Do teach after."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Client 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Client</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Teach teachProxy = <span class="keyword">new</span> TeachProxy(<span class="keyword">new</span> TeachImpl());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        teachProxy.doTeach();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>静态代理特点</strong></p>
<p>在不改变目标类功能的前提下，能通过代理类对目标类进行功能扩展，同时可以实现客户端与目标类间的解耦。</p>
<p>但是，静态代理的局限在于运行前必须编写好代理对象，由于代理类和目标类都要实现相同的接口，所以会有很多代理类，一旦接口增加功能，目标类和代理类都需要进行维护，增加了维护负担。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>代理类在程序运行时创建的代理方式被成为<strong>动态代理</strong>，动态代理又叫 JDK 代理。这种情况下，代理类并不是在 Java 代码中定义的，而是在运行时根据我们在 Java 代码中的“指示”动态生成的。使用动态代理实现时，代理类不需要实现接口，目标类需要实现接口；代理对象的生成是利用 JDK 的 API(java.lang.reflect 包)，动态的在内存中创建对象。</p>
<p>JDK 实现动态代理，需要使用 <code>java.lang.reflect</code> 包下 Proxy 类中的方法：<br><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code></p>
<p>方法参数介绍：<br><code>ClassLoader loader</code>: 指当前目标对象的类加载器。<br><code>Class&lt;?&gt;[] interfaces</code>: 目标对象实现的接口类型。<br><code>InvocationHandler h</code>: 处理程序，当执行目标对象的方法时，会触发处理程序，会把当前执行的目标对象的方法作为参数传入。</p>
<p><strong>代码示列</strong></p>
<ul>
<li>Teach 接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Teach</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Teach</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doTeach</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>TeachImpl 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * TeachImpl</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeachImpl</span> <span class="keyword">implements</span> <span class="title">Teach</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTeach</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Do teach."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>TeachProxyFactory 类，用于动态创建代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * TeachProxyFactory</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeachProxyFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Object target;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeachProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.target = target;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                target.getClass().getClassLoader(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                target.getClass().getInterfaces(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(<span class="string">"Do teach before."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Object invoke = method.invoke(target, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(<span class="string">"Do teach after."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">return</span> invoke;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Client 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Client</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Teach teachProxy = (Teach) <span class="keyword">new</span> TeachProxyFactory(<span class="keyword">new</span> TeachImpl()).getInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        teachProxy.doTeach();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>动态代理特点</strong></p>
<p>与静态代理相比，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类的函数。但是，动态代理的代理类字节码在创建时，需要实现目标类所实现的接口作为参数。如果目标类是没有实现接口而是直接定义业务方法的话，就无法使用 JDK 动态代理了。   </p>
<p>动态代理是基于接口实现的，只能对接口进行代理，不能对类进行代理。</p>
<h3 id="CGlib-代理"><a href="#CGlib-代理" class="headerlink" title="CGlib 代理"></a>CGlib 代理</h3><p>CGlib 代理模式是基于继承被代理类生成代理子类，不用实现接口。只需要被代理类是非 final 类即可。(CGlib 代理底层是借助 ASM 字节码技术）它也是一种动态代理。</p>
<p><strong>代码示列</strong></p>
<ul>
<li>Teach 接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Teach</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Teach</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doTeach</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>TeachImpl 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * TeachImpl</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeachImpl</span> <span class="keyword">implements</span> <span class="title">Teach</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTeach</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Do teach."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>TeachMethodInterceptor 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * TeachMethodInterceptor</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeachMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; target;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeachMethodInterceptor</span><span class="params">(Class&lt;?&gt; target)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.target = target;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 为代理类指定需要代理的类，也即是父类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 设置方法拦截器回调引用，对于代理类上所有方法的调用，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 都会调用 CallBack，而 Callback 则需要实现 intercept() 方法进行拦截</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        enhancer.setSuperclass(target);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 获取动态代理类对象并返回</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> enhancer.create();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Do Teach before."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object result = proxy.invokeSuper(obj, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Do Teach after."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Client 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Client</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        TeachMethodInterceptor methodInterceptor = <span class="keyword">new</span> TeachMethodInterceptor(TeachImpl<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Teach proxyInstance = (Teach) methodInterceptor.getProxyInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxyInstance.doTeach();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述代码中，我们通过 CGlib 的 <code>Enhancer</code> 来指定要代理的目标对象，最终通过调用 <code>create()</code> 方法得到代理对象，对这个对象所有非 final 方法的调用都会转发给 <code>MethodInterceptor.intercept()</code> 方法，在 <code>intercept()</code> 方法里我们可以加入任何逻辑，比如修改方法参数，加入日志功能、安全检查功能等；通过调用 <code>MethodProxy.invokeSuper()</code> 方法，我们将调用转发给原始对象，也就是示例中 <code>TeachIpml</code> 的具体方法。</p>
<p><strong>CGlib 代理特点</strong></p>
<p>使用 CGLiB 实现动态代理，CGLi b底层采用 ASM 字节码生成框架，使用字节码技术生成代理类，比使用 Java 反射效率要高。唯一需要注意的是，CGLib 不能对声明为 final 的方法进行代理， 因为 CGLib 原理是动态生成被代理类的子类，是基于继承实现的。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>代理模式适用的几种常见情况</p>
<ul>
<li>远程代理为不同地址空间中的对象提供了本地代表。</li>
<li>虚拟代理，当对象的实例化成本很高时，将使用虚拟代理。在实现中，它决定何时需要创建对象以及何时可以重用它。</li>
<li>保护代理用于控制对原始对象的访问。当对象应具有不同的访问权限时，保护代理很有用。</li>
</ul>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/2020/07/17/flyweight-pattern/</url>
    <content><![CDATA[<p>享元模式(Flyweight)，使用共享技术有效地支持大量细粒度的对象。常用于系统底层开发，解决系统的性能问题。比如，数据库连接池技术。</p>
<a id="more"></a>

<p>享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似对象，需要缓冲池时，不需总是创建新对象，可以从缓冲池里获取。这样可以降低系统内存消耗，同时提高效率。</p>
<p>享元模式经典的应用场景就是池技术了，String 常量池、数据库连接池、缓冲池等等都是享元模式的应用，它是池技术的重要实现方式。</p>
<p>要应用享元模式，我们需要将对象属性分为内部属性和外部属性。内部属性使对象唯一，而外部属性由客户端代码设置并用于执行不同的操作。</p>
<h3 id="享元模式解析"><a href="#享元模式解析" class="headerlink" title="享元模式解析"></a>享元模式解析</h3><p><img alt="享元模式结构图" data-src="./asset/imgs/flyweight.png"></p>
<p><strong>角色介绍</strong></p>
<ul>
<li><p>Flyweight：它是所有具体享元类的超类或接口，通过这个接口，Flyweight 可以接受并作用于外部状态。</p>
</li>
<li><p>ConcreteFlyweight：它是继承 Flyweight 超类或实现 Flyweight 接口，并为内部状态增加存储空间。</p>
</li>
<li><p>UnsharedConcreteFlyweight：它是指那些不需要共享的Flyweight子类。因为 Flyweight 接口共享成为可能，但它并不强制共享。</p>
</li>
<li><p>FlyweightFactory：它是一个享元工厂，用来创建并管理 Flyweight 对象.它主要是用来确保合理地共享 Flyweight ，当用户请求一个 Flyweight 时，Flywei ghtFactory 对象提供一个 已创建的实例或者创建一个（如果不存在的话）。</p>
</li>
</ul>
<p><strong>享元模式基本代码</strong></p>
<ul>
<li>Flyweight 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> status)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ConcreteFlyweight 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"具体的 Flyweight: "</span> + status);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>UnshareConcreteFlyweight 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnshareConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"不共享的具体Flyweight: "</span> + status);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>FlyweightFactory 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Flyweight&gt; flyweightMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FlyweightFactory</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Flyweight flyweight = flyweightMap.get(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (flyweight == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (Objects.equals(key, <span class="string">"A"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                flyweight = <span class="keyword">new</span> ConcreteFlyweight();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (Objects.equals(key, <span class="string">"B"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                flyweight = <span class="keyword">new</span> ConcreteFlyweight();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            flyweightMap.put(key, flyweight);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> flyweight;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Client 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 外部状态</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> status = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Flyweight flyweightA = FlyweightFactory.getFlyweight(<span class="string">"A"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        flyweightA.operation(status);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Flyweight flyweightB = FlyweightFactory.getFlyweight(<span class="string">"B"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        flyweightB.operation(status + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 不共享的 Flyweight</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        UnshareConcreteFlyweight unshareConcreteFlyweight = <span class="keyword">new</span> UnshareConcreteFlyweight();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        unshareConcreteFlyweight.operation(status + <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设我们需要使用线条和椭圆形创建图形。因此，我们将有一个接口 Shape 和它的具体实现为 Line 和 Oval。椭圆类将具有固有属性，以确定是否用给定的颜色填充椭圆，而 Line 将不具有任何固有属性。</p>
<p><strong>使用享元模式实现</strong></p>
<ul>
<li>Shape 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height, Color color)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Line 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Line</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Line</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.println(<span class="string">"Creating Line object"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">			Color color)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			System.out.println(<span class="string">"Draw Line"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Oval 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oval</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// 内部属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> fill;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Oval</span><span class="params">(<span class="keyword">boolean</span> isFill)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">this</span>.fill = fisFill;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.println(<span class="string">"Creating Oval object"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">			Color color)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.println(<span class="string">"Draw Oval"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span>(fill)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			System.out.println(<span class="string">"Fill Oval with color"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ShapeFactory 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;ShapeType,Shape&gt; shapes = <span class="keyword">new</span> HashMap&lt;ShapeType,Shape&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(ShapeType type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Shape shape = shapes.get(type);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (shape == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">if</span> (type.equals(ShapeType.OVAL_FILL)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				shape = <span class="keyword">new</span> Oval(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(ShapeType.OVAL_NOFILL)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				shape = <span class="keyword">new</span> Oval(<span class="keyword">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(ShapeType.LINE)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				shape = <span class="keyword">new</span> Line();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			shapes.put(type, shape);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> shape;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> ShapeType&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		OVAL_FILL, OVAL_NOFILL, LINE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Client 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Shape shape = ShapeFactory.getShape(ShapeType.LINE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 伪代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    shape.draw(x1, y1, x2, y2);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Shape shape1 = ShapeFactory.getShape(ShapeType.LINE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 伪代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    shape1.draw(x1, y1, x2, y2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>当我们多次创建 Line 图形时，由于程序使用了共享库，因此程序将快速执行。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>当我们需要创建一个类的许多对象且没有足够的内存容量时，可以使用享元模式。由于每个对象都会占用至关重要的内存空间，因此可以应用享元模式来通过共享对象来减少内存负载，同时也能提高程序效率。</p>
<p>事实上，享元模式可以避免大量非常相似类的开销。在程序设计中，有时需要生成大量细粒度的类实例来表示数据。如果能发现这些实例除了几个参数外基本上都是相同的，有时就能够受大幅度地减少需要实例化的类的数量。如果能把那些参数移到类实例的外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/2020/07/17/facade-pattern/</url>
    <content><![CDATA[<p>外观模式(Facade)，为子系统中的一组接口提供统一的接口。此模式定义了一个高层接口，这个接口使子系统更易于使用。简而言之，外观模式提供了到复杂子系统的简化接口。</p>
<a id="more"></a>

<h3 id="外观模式解析"><a href="#外观模式解析" class="headerlink" title="外观模式解析"></a>外观模式解析</h3><p><img alt="外观模式结构图" data-src="facade.png"></p>
<p><strong>角色介绍</strong></p>
<ul>
<li>Facade：外观类，知道哪些子系统负责处理请求，将客户的请求代理给适当的子系统。</li>
<li>SubSystemOne/SubSystemTwo：子系统类，实现子系统的功能，处理 Facade 对象指派的任务。</li>
</ul>
<p><strong>外观模式基本代码</strong></p>
<ul>
<li>Facade 类：外观类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Facade</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> SubSystemOne subSystemOne;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> SubSystemTwo subSystemTwo;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.subSystemOne = <span class="keyword">new</span> SubSystemOne();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.subSystemTwo = <span class="keyword">new</span> SubSystemTwo();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.subSystemOne.operation1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.subSystemTwo.operation2();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.subSystemTwo.operation2();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>SubSystemOne 类：子系统一</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * SubSystemOne</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystemOne</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"operation1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>SubSystemTwo 类：子系统二</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * SubSystemTwo</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystemTwo</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"operation2"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="示列"><a href="#示列" class="headerlink" title="示列"></a>示列</h3><p>假设我们有一个带有一组接口的应用程序，以使用 MySQL / SQLServer 数据库并生成不同类型的报告，比如 HTML 报告，PDF 报告等。</p>
<p>因此，我们将使用不同的接口集来处理不同类型的数据库。 然后，客户端应用程序可以使用这些接口来获取所需的数据库连接并生成报告。</p>
<p><strong>使用外观设计模式实现</strong></p>
<p>首先，创建两个帮助程序接口，分别是 MySQLHelper 和 SQLServerHelper。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * MySQLHelper</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLHelper</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getMySQLDBConnection</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 获取 MySQL 数据库连接对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateMySQLPDFReport</span><span class="params">(String tableName, Connection con)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 从数据库中获取数据并生成 PDF 报告</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateMySqlHTMLReport</span><span class="params">(String tableName, Connection con)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 从数据库中获取数据并生成 HTML 报告</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * SQLServerHelper</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLServerHelper</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getSQLServerDBConnection</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 获取 SQLServer 数据库连接对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateSQLServerPDFReport</span><span class="params">(String tableName, Connection con)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 从数据库中获取数据并生成 PDF 报告</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateSQLServerHTMLReport</span><span class="params">(String tableName, Connection con)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 从数据库中获取数据并生成 HTML 报告</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后，创建 Facade 类，为 MySQLHelper 和 SQLServerHelper 提供统一的界面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HelperFacade</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelperFacade</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateReport</span><span class="params">(DBTypes dbType, ReportTypes reportType, String tableName)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Connection con = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">switch</span> (dbType)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">case</span> MYSQL: </span></pre></td></tr><tr><td class="code"><pre><span class="line">			con = MySQLHelper.getMySQLDBConnection();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			MySQLHelper mySqlHelper = <span class="keyword">new</span> MySQLHelper();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">switch</span>(reportType)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">case</span> HTML:</span></pre></td></tr><tr><td class="code"><pre><span class="line">				mySqlHelper.generateMySQLHTMLReport(tableName, con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">case</span> PDF:</span></pre></td></tr><tr><td class="code"><pre><span class="line">				mySqlHelper.generateMySQLPDFReport(tableName, con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">case</span> ORACLE: </span></pre></td></tr><tr><td class="code"><pre><span class="line">			con = SQLServerHelper.getOracleDBConnection();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			SQLServerHelper sqlServerHelper = <span class="keyword">new</span> SQLServerHelper();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">switch</span>(reportType)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">case</span> HTML:</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sqlServerHelper.generateSQLServerHTMLReport(tableName, con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">case</span> PDF:</span></pre></td></tr><tr><td class="code"><pre><span class="line">				sqlServerHelper.generateSQLServerPDFReport(tableName, con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> DBTypes&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MYSQL, SQLSERVER;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> ReportTypes&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		HTML, PDF;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>最后，创建客户端程序，分别使用 Facade 模式和不使用 Facade 模式生成报告。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		String tableName = <span class="string">"Student"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 不使用 Facade 模式生成报告</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		Connection con = MySqlHelper.getMySqlDBConnection();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		MySqlHelper mySqlHelper = <span class="keyword">new</span> MySqlHelper();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		mySqlHelper.generateMySqlHTMLReport(tableName, con);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		Connection con1 = OracleHelper.getOracleDBConnection();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		OracleHelper oracleHelper = <span class="keyword">new</span> OracleHelper();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		oracleHelper.generateOraclePDFReport(tableName, con1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 使用 Facade 模式生成报告</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		HelperFacade.generateReport(HelperFacade.DBTypes.MYSQL, HelperFacade.ReportTypes.HTML, tableName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		HelperFacade.generateReport(HelperFacade.DBTypes.ORACLE, HelperFacade.ReportTypes.PDF, tableName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>从程序中可知，使用 Facade 模式界面是一种避免客户端逻辑过多的简便方法。获得数据库连接的 JDBC Driver Manager 类是外观设计模式的一个很好的例子。</p>
<p>我们还可以将工厂模式与外观模式结合使用，改善上面的代码，使程序更加易用。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>外观设计模式更像是客户端应用程序的助手，它不会对客户端隐藏子系统接口，是否使用Facade 完全取决于客户端代码。   </p>
<p>当客户端与抽象的实现类之间存在许多依赖关系，可以引入外观模式让子系统与客户端和其他子系统分离，从而提高子系统的独立性和可移植性。  </p>
<p>外观设计模式应应用于相似类型的接口，其目的是提供一个单一的接口，而不是提供多个执行相似类型工作的接口。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/2020/07/17/composite-pattern/</url>
    <content><![CDATA[<p>组合模式(Composite)，将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<a id="more"></a>

<h3 id="组合模式解析"><a href="#组合模式解析" class="headerlink" title="组合模式解析"></a>组合模式解析</h3><p><img alt="composite-struct" data-src="composite-struct.png"></p>
<p><strong>角色介绍</strong></p>
<ul>
<li><p>Component：组合中的对象声明接口，在适当情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理 Component 的子部件。</p>
</li>
<li><p>Leaf：在组合中表示叶节点对象，叶节点没有子节点。</p>
</li>
<li><p>Composite：定义有枝节点行为，用来存储子部件，在 Component 接口中实现与子部件有关的操作，比如增加 Add 和删除 Remove。</p>
</li>
</ul>
<p><strong>组合模式基本代码</strong></p>
<ul>
<li>Component 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Component</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Composite 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Composite</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 存放子节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;Component&gt; childCompoents = <span class="keyword">new</span> LinkedList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composite</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.childCompoents.add(component);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.childCompoents.remove(component);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"========"</span> + <span class="keyword">this</span>.getName() + <span class="string">"=========="</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 遍历子节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (Component c : childCompoents) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            c.display();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Leaf 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Leaf</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot add to a leaf"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot remove from a leaf"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 只打印叶子节点，叶子节点没有子节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="keyword">this</span>.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>展示一个学校院系结构，一个学校有多个学院，一个学院有多个专业。</p>
<p><strong>类结构图</strong></p>
<p><img alt="composite-code-struct" data-src="composite-code-struct.png"></p>
<p><strong>编码</strong></p>
<ul>
<li>OrganizationComponent 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OrganizationComponent</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganizationComponent</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">OrganizationComponent</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>University 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * University 就是 Composite , 可以管理 College</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">University</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	List&lt;OrganizationComponent&gt; organizationComponents = <span class="keyword">new</span> LinkedList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">University</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">super</span>(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		organizationComponents.add(organizationComponent);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		organizationComponents.remove(organizationComponent);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.println(<span class="string">"--------------"</span> + getName() + <span class="string">"--------------"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 遍历 organizationComponents</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			organizationComponent.print();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>College 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * College 学院</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">College</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	 *  存放节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	List&lt;OrganizationComponent&gt; organizationComponents = <span class="keyword">new</span> LinkedList&lt;OrganizationComponent&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">College</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">super</span>(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">//  将来实际业务中，Colleage 的 add 和  University add 不一定完全一样</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		organizationComponents.add(organizationComponent);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		organizationComponents.remove(organizationComponent);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.println(<span class="string">"--------------"</span> + getName() + <span class="string">"--------------"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 遍历 organizationComponents</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">for</span> (OrganizationComponent organizationComponent : organizationComponents) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			organizationComponent.print();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Department 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Department</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">super</span>(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		System.out.println(<span class="keyword">this</span>.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Main 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 学校</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		OrganizationComponent university = <span class="keyword">new</span> University(<span class="string">"清华大学"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 创建学院</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		OrganizationComponent infoEngineerCollege = <span class="keyword">new</span> College(<span class="string">"信息工程学院"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">// 创建各个学院下面的专业</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">"软件工程"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">"网络工程"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">"计算机科学与技术"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">//将学院加入到学校</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		university.add(infoEngineerCollege);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">		university.print();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在组合模式中，基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断地递归下去，客户代码中，任何用到基本对象的地方都可以使用组合对象了。用户是不用关心到底是处理一个叶节点还是处理一个组合组件，也就用不着为定义组合而写一些选择判断语句了。组合模式让客户可以一致地使用组合结构和单个对象。</p>
<p>如果你发现需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑用组合模式了。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>装饰者模式</title>
    <url>/2020/07/17/decorator-pattern/</url>
    <content><![CDATA[<p>装饰者模式(Decorator)，动态地给一个对象添加一些额外的功能，就增加功能来说，装饰者模式比继承更灵活。</p>
<a id="more"></a>

<h3 id="装饰者模式解析"><a href="#装饰者模式解析" class="headerlink" title="装饰者模式解析"></a>装饰者模式解析</h3><p><img alt="装饰者模式结构图" data-src="decorator-struct.png"></p>
<p><strong>角色介绍</strong></p>
<ul>
<li><p>Component：定义一个对象接口，可以给这些对象动态地添加功能。</p>
</li>
<li><p>ConcreteComponent：是定义了一个具体的对象，也可以给这个对象添加一些功能。</p>
</li>
<li><p>Decorator：装饰抽象类，继承了 Component，从外类来扩展 Component 类的功能，但对于 Component 来说，是无需知道 Decorator 的存在的.</p>
</li>
<li><p>ConcreteDecorator(A/B)：具体的装饰对象，起到给 Component 添加功能的作用。</p>
</li>
</ul>
<p><strong>装饰者模式基本代码</strong></p>
<ul>
<li>Component 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Component</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ConcreteComponent 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"具体的操作"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Decorator 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Decorator</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> Component component;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.component = component;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.component == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 执行功能</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.component.operation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ConcreteDecoratorA 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * ConcreteDecoratorA</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorA</span><span class="params">(Component component)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(component);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 执行原 Component 对象的功能</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>.operation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 执行本类的功能</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"装饰者 A 的操作"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ConcreteDecoratorB 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * ConcreteDecoratorB</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorB</span><span class="params">(Component component)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(component);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 执行原 Component 对象的功能</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>.operation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 执行本类的功能</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"装饰者 B 的操作"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Main 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 装饰组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ConcreteDecoratorB decoratorB = <span class="keyword">new</span> ConcreteDecoratorB(<span class="keyword">new</span> ConcreteDecoratorA(<span class="keyword">new</span> ConcreteComponent()));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        decoratorB.operation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>咖啡订单程序，咖啡种类有美式咖啡（American coffee）、无因咖啡（Causeless coffee），配料有牛奶（Milk），巧克力（Chocolate）。客户在点咖啡时可以选择配料进行混合。使用装饰者模式编程代码。</p>
<p><strong>类结构图</strong></p>
<p><img alt="装饰者模式类结构图" data-src="decorator-code-struct.png"></p>
<p><strong>编码</strong></p>
<ul>
<li>Drink 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Drink</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> price;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">getCost</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> price;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.price = price;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Cafe 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Cafe</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cafe</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.price;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"商品："</span> + <span class="keyword">this</span>.name + <span class="string">"价格："</span> + <span class="keyword">this</span>.price;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>AmericanCafe 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * AmericanCafe</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericanCafe</span> <span class="keyword">extends</span> <span class="title">Cafe</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AmericanCafe</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = <span class="string">"美式咖啡"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.price = <span class="number">6.0f</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>CauselessCafe 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * CauselessCafe</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CauselessCafe</span> <span class="keyword">extends</span> <span class="title">Cafe</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CauselessCafe</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = <span class="string">"无因咖啡"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.price = <span class="number">7.0f</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>AbstractIngredients 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * AbstractIngredients</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractIngredients</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Drink drink;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractIngredients</span><span class="params">(Drink drink)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.drink = drink;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.price + <span class="keyword">this</span>.drink.getCost();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> drink.getDescription() + <span class="string">"配料："</span> + <span class="keyword">this</span>.name + <span class="string">" 价格："</span> + <span class="keyword">this</span>.price ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Milk 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Milk</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">AbstractIngredients</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Drink drink)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(drink);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = <span class="string">"牛奶"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.price = <span class="number">3.0f</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>Chocolate 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chocolate</span> <span class="keyword">extends</span> <span class="title">AbstractIngredients</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chocolate</span><span class="params">(Drink drink)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(drink);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = <span class="string">"巧克力"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.price = <span class="number">2.0f</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Main 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 牛奶巧克力美式咖啡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Drink drink = <span class="keyword">new</span> Chocolate(<span class="keyword">new</span> Milk(<span class="keyword">new</span> AmericanCafe()));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(drink.getDescription());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(drink.getCost());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>一般情况下，当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或主要行为，但这种做法的问题在于，它们在主类中加入了新的字段，新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才执行的特殊行为的需要。  </p>
<p>而装饰者模式却提供了一个非常好的解决方案，装饰者模式是为已有功能动态地添加更多功能的一种方式，它把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象，因此，当需要执行特殊行为时，客户代码就可以在运行时根据需要有选择地、按顺序地使用装饰功能包装对象了。  </p>
<p>装饰者模式的好处就是有效地把<strong>类的核心职责</strong>和<strong>装饰功能</strong>区分开了，而且可以去除相关类中重复的装饰逻辑。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security With JWT 入门教程</title>
    <url>/2020/07/09/spring-security-jwt/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>GitHub 源码地址：<a href="https://github.com/yifanzheng/spring-security-jwt" target="_blank" rel="noopener">https://github.com/yifanzheng/spring-security-jwt</a></p>
</blockquote>
<p>Spring Security 是 Spring 全家桶中一个功能强大且高度可定制的身份验证和访问控制框架。与所有 Spring 项目一样，我们可以轻松扩展 Spring Security 以满足自定义要求。 </p>
<p>由于 Spring Security 功能十分强大，相比于其他技术来说很难上手，很多刚接触 Spring Security 的开发者很难通过文档或者视频就能将其进行运用到实际开发中。</p>
<a id="more"></a>

<p>在公司实习的时候接触到的一个项目就使用了 Spring Security 这个强大的安全验证框架来完成用户的登录模块，并且也是自己负责的一个模块。当时自己对 Spring Security 基本不熟悉，可以说是第一次接触，查阅了很多关于这方面的资料，看得似懂非懂的，并且还在导师的指导下都花了将近一周的时间才勉强完成。</p>
<p>Spring Security 对于初学者来说，的确很难上手。于是自己在工作之余对这部分知识进行了学习，并实现了一个简单的项目，主要使用了 Spring Boot 技术集成 Spring Security 和 Spring Data Jpa 技术。这个项目实现的比较简单，还有很多地方需要优化，希望有兴趣的朋友可以一起完善，期待你的 PR。</p>
<h3 id="项目下载"><a href="#项目下载" class="headerlink" title="项目下载"></a>项目下载</h3><ul>
<li><p>git clone <a href="https://github.com/yifanzheng/spring-security-jwt.git" target="_blank" rel="noopener">https://github.com/yifanzheng/spring-security-jwt.git</a> 。</p>
</li>
<li><p>配置好 Maven 仓库，使用 IntelliJ IDEA 工具打开项目。</p>
</li>
<li><p>在 application.properties 配置文件中将数据库信息改成你自己的。</p>
</li>
</ul>
<h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>本 Demo 权限控制采用 RBAC 思想。简单地说，一个用户拥有若干角色，用户与角色形成多对多关系。</p>
<p><strong>模型</strong><br><img alt="权限模型" data-src="https://img-blog.csdnimg.cn/20200628230812139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p><strong>数据表设计</strong></p>
<p>用户表与用户角色表是多对多的关系。因为这里比较简单，所以表设计上有点冗余。小伙伴们可以根据实际情况重新设计。<br><img alt="表设计" data-src="https://img-blog.csdnimg.cn/2020062823082793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p><strong>数据交互</strong></p>
<p>用户登录 -&gt; 后端验证登录并返回 token -&gt; 前端携带 token 请求后端数据 -&gt; 后端返回数据。<br><img alt="数据交互" data-src="https://img-blog.csdnimg.cn/20200628230845973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<h3 id="项目核心类说明"><a href="#项目核心类说明" class="headerlink" title="项目核心类说明"></a>项目核心类说明</h3><p><strong>WebCorsConfiguration</strong>  </p>
<p>WebCorsConfiguration 配置类，主要解决 HTTP 请求跨域问题。这里需要注意的是，如果没有将 <code>Authorization</code> 头字段暴露给客户端的话，客户端是无法获取到 Token 信息的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * WebCorsConfiguration 跨域配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebCorsConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 设置swagger为默认主页</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"redirect:/swagger-ui.html"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        registry.setOrder(Ordered.HIGHEST_PRECEDENCE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        WebMvcConfigurer.<span class="keyword">super</span>.addViewControllers(registry);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        config.setAllowedOrigins(Collections.singletonList(<span class="string">"*"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        config.setAllowedMethods(Collections.singletonList(<span class="string">"*"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        config.setAllowedHeaders(Collections.singletonList(<span class="string">"*"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 暴露 header 中的其他属性给客户端应用程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        config.setExposedHeaders(Arrays.asList(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"Authorization"</span>, <span class="string">"X-Total-Count"</span>, <span class="string">"Link"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"Access-Control-Allow-Origin"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"Access-Control-Allow-Credentials"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>WebSecurityConfig</strong>  </p>
<p>WebSecurityConfig 配置类继承了 Spring Security 的 WebSecurityConfigurerAdapter 类。WebSecurityConfigurerAdapter 类提供了默认的安全配置，并允许其他类通过覆盖其方法来扩展它并自定义安全配置。</p>
<p>这里配置了如下内容：</p>
<ul>
<li><p>忽略某些不需要验证的就能访问的资源路径；</p>
</li>
<li><p>设置 <code>CustomAuthenticationProvider</code> 自定义身份验证组件，用于验证用户的登录信息（用户名和密码）；</p>
</li>
<li><p>在 Spring Security 机制中配置需要验证后才能访问的资源路径、不需要验证就可以访问的资源路径以及指定某些资源只能被特定角色访问。</p>
</li>
<li><p>配置请求权限认证异常时的处理类；</p>
</li>
<li><p>将自定义的 <code>JwtAuthenticationFilter</code> 和 <code>JwtAuthorizationFilter</code> 两个过滤器添加到 Spring Security 机制中。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Web 安全配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(SecurityProblemSupport<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SecurityConfiguration</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> CorsFilter corsFilter;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> SecurityProblemSupport securityProblemSupport;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 使用 Spring Security 推荐的加密方式进行登录密码的加密</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">bCryptPasswordEncoder</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 此方法配置的资源路径不会进入 Spring Security 机制进行验证</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        web.ignoring()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(HttpMethod.OPTIONS, <span class="string">"/**"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/app/**/*.&#123;js,html&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/v2/api-docs/**"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/i18n/**"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/test/**"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/content/**"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/webjars/springfox-swagger-ui/**"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/swagger-resources/**"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/swagger-ui.html"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// TODO 如果将登录接口暴露在 Controller 层，则注释此配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//protected void configure(AuthenticationManagerBuilder authenticationManagerBuilder) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//    // 设置自定义身份验证组件，用于从数据库中验证用户登录信息（用户名和密码）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//    CustomAuthenticationProvider authenticationProvider = new CustomAuthenticationProvider(bCryptPasswordEncoder());</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//    authenticationManagerBuilder.authenticationProvider(authenticationProvider);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 定义安全策略，设置 HTTP 访问规则</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        http</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .addFilterBefore(corsFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">                .<span class="title">exceptionHandling</span>()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">                // 当用户无权访问资源时发送 401 响应</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">                .<span class="title">authenticationEntryPoint</span>(<span class="title">new</span> <span class="title">HttpStatusEntryPoint</span>(<span class="title">HttpStatus</span>.<span class="title">UNAUTHORIZED</span>))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">                // 当用户访问资源因权限不足时发送 403 响应</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">                .<span class="title">accessDeniedHandler</span>(<span class="title">securityProblemSupport</span>)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">             .<span class="title">and</span>()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">                // 禁用 <span class="title">CSRF</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">                .<span class="title">csrf</span>().<span class="title">disable</span>()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">                .<span class="title">headers</span>().<span class="title">frameOptions</span>().<span class="title">disable</span>()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">             .<span class="title">and</span>()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .logout().logoutUrl("/auth/logout").and()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .authorizeRequests()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 <span class="comment">// 指定路径下的资源需要进行验证后才能访问</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(<span class="string">"/"</span>).permitAll()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 配置登录地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(HttpMethod.POST, SecurityConstants.AUTH_LOGIN_URL).permitAll()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .antMatchers(HttpMethod.POST,<span class="string">"/api/users/register"</span>).permitAll()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 其他请求需验证</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .anyRequest().authenticated()</span></pre></td></tr><tr><td class="code"><pre><span class="line">             .and()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// TODO 添加用户登录验证过滤器，将登录请求交给此过滤器处理，如果将登录接口暴露在 Controller 层，则注释这行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="comment">//  .addFilter(new JwtAuthenticationFilter(authenticationManager()))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 不需要 session（不创建会话）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .sessionManagement()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span></pre></td></tr><tr><td class="code"><pre><span class="line">             .and()</span></pre></td></tr><tr><td class="code"><pre><span class="line">               .apply(securityConfigurationAdapter());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>.configure(http);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> JwtConfigurer <span class="title">securityConfigurationAdapter</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtConfigurer(<span class="keyword">new</span> JwtAuthorizationFilter(authenticationManager()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>CustomAuthenticationProvider （已过时）</strong></p>
<p>CustomAuthenticationProvider 自定义用户身份验证组件类，它用于验证用户登录信息是否正确。需要将其配置到 Spring Sercurity 机制中才能使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * CustomAuthenticationProvider 自定义用户身份验证组件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * &lt;p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 提供用户登录密码验证功能。根据用户名从数据库中取出用户信息，进行密码验证，验证通过则赋予用户相应权限。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder bCryptPasswordEncoder;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomAuthenticationProvider</span><span class="params">(BCryptPasswordEncoder bCryptPasswordEncoder)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.bCryptPasswordEncoder = bCryptPasswordEncoder;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.userService = SpringSecurityContextHelper.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> BadCredentialsException, UsernameNotFoundException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 获取验证信息中的用户名和密码 （即登录请求中的用户名和密码）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        String userName = authentication.getName();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String password = authentication.getCredentials().toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 根据登录名获取用户信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        User user = userService.getUserByName(userName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 验证登录密码是否正确。如果正确，则赋予用户相应权限并生成用户认证信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.bCryptPasswordEncoder.matches(password, user.getPassword())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            List&lt;String&gt; roles = userService.listUserRoles(userName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 如果用户角色为空，则默认赋予 ROLE_USER 权限</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(roles)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                roles = Collections.singletonList(UserRoleConstants.ROLE_USER);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 设置权限</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            List&lt;GrantedAuthority&gt; authorities = roles.stream()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .collect(Collectors.toList());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 生成认证信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userName, password, authorities);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 验证不成功就抛出异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"The userName or password error."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> aClass.equals(UsernamePasswordAuthenticationToken<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>JwtAuthenticationFilter（已过时）</strong></p>
<p>JwtAuthenticationFilter 用户登录验证过滤器，主要配合 <code>CustomAuthenticationProvider</code> 对用户登录请求进行验证，检查登录名和登录密码。如果验证成功，则生成 token 返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * JwtAuthenticationFilter 用户登录验证过滤器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * &lt;p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 用于验证使用 URL 地址是 &#123;<span class="doctag">@link</span> SecurityConstants#AUTH_LOGIN_URL&#125; 进行登录的用户请求。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 通过检查请求中的用户名和密码参数，并调用 Spring 的身份验证管理器进行验证。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 如果用户名和密码正确，那么过滤器将创建一个 token，并在 Authorization 标头中将其返回。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 格式：Authorization: "Bearer + 具体 token 值"&lt;/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Boolean&gt; rememberMeLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 指定需要验证的登录 URL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>.setFilterProcessesUrl(SecurityConstants.AUTH_LOGIN_URL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">                                                HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 获取用户登录信息，JSON 反序列化成 UserDTO 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            UserLoginDTO loginUser = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), UserLoginDTO<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            rememberMeLocal.set(loginUser.getRememberMe());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 根据用户名和密码生成身份验证信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Authentication authentication = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser.getUserName(), loginUser.getPassword(), <span class="keyword">new</span> ArrayList&lt;&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 这里返回 Authentication 后会通过我们自定义的 &#123;@see CustomAuthenticationProvider&#125; 进行验证</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.authenticationManager.authenticate(authentication);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 如果验证通过，就生成 token 并返回</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">                                            HttpServletResponse response,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">                                            FilterChain chain,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">                                            Authentication authentication)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 获取用户信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            String username = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 获取身份信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object principal = authentication.getPrincipal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (principal <span class="keyword">instanceof</span> UserDetails) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                UserDetails user = (UserDetails) principal;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                username = user.getUsername();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (principal <span class="keyword">instanceof</span> String) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                username = (String) principal;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 获取用户认证权限</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 获取用户角色权限</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            List&lt;String&gt; roles = authorities.stream()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .map(GrantedAuthority::getAuthority)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .collect(Collectors.toList());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">boolean</span> isRemember = <span class="keyword">this</span>.rememberMeLocal.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 生成 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            String token = JwtUtils.generateToken(username, roles, isRemember);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 将 token 添加到 Response Header 中返回</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            response.addHeader(SecurityConstants.TOKEN_HEADER, token);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 清除变量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.rememberMeLocal.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 如果验证证不成功，返回错误信息提示</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authenticationException)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        logger.warn(authenticationException.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (authenticationException <span class="keyword">instanceof</span> UsernameNotFoundException) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND, authenticationException.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authenticationException.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>此过滤器继承了 <code>UsernamePasswordAuthenticationFilter</code> 类，并重写了三个方法：</p>
<ul>
<li><p><code>attemptAuthentication</code>: 此方法用于验证用户登录信息；</p>
</li>
<li><p><code>successfulAuthentication</code>: 此方法在用户验证成功后会调用；</p>
</li>
<li><p><code>unsuccessfulAuthentication</code>: 此方法在用户验证失败后会调用。</p>
</li>
</ul>
<p>同时，通过 <code>super.setFilterProcessesUrl(SecurityConstants.AUTH_LOGIN_URL)</code> 方法重新指定需要进行验证的登录请求。</p>
<p>当登录请求进入此过滤器时，会先进入 <code>attemptAuthentication</code> 方法，通过此方法从登录请求中获取用户名和密码，并使用<code>authenticationManager.authenticate(authenticate)</code> 对用户信息进行认证，当执行此方法后会进入 <code>CustomAuthenticationProvider</code> 组件并调用 <code>authenticate(Authentication authentication)</code> 方法进行验证。如果验证成功后会返回一个 Authentication 对象（它里面包含了用户的完整信息，如角色权限），然后会去调用 <code>successfulAuthentication</code> 方法；如果验证失败，就会去调用 <code>unsuccessfulAuthentication</code> 方法。</p>
<p>至此，整个验证过程就结束了。</p>
<p><strong>JwtAuthorizationFilter</strong></p>
<p>JwtAuthorizationFilter 用户请求授权过滤器，用于从用户请求中获取 token 信息，并对其进行验证，同时加载与 token 相关联的用户身份认证信息，并添加到 Spring Security 上下文中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * JwtAuthorizationFilter 用户请求授权过滤器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * &lt;p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 提供请求授权功能。用于处理所有 HTTP 请求，并检查是否存在带有正确 token 的 Authorization 标头。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 如果 token 有效，则过滤器会将身份验证数据添加到 Spring 的安全上下文中，并授权此次请求访问资源。&lt;/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">BasicAuthenticationFilter</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtAuthorizationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(authenticationManager);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(@NotNull HttpServletRequest request, @NotNull HttpServletResponse response, @NotNull FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 从 HTTP 请求中获取 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        String token = <span class="keyword">this</span>.getTokenFromHttpRequest(request);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 验证 token 是否有效</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(token) &amp;&amp; JwtUtils.validateToken(token)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 获取认证信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Authentication authentication = JwtUtils.getAuthentication(token);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 将认证信息存入 Spring 安全上下文中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            SecurityContextHolder.getContext().setAuthentication(authentication);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 放行请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        filterChain.doFilter(request, response);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 从 HTTP 请求中获取 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> request HTTP 请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTokenFromHttpRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String authorization = request.getHeader(SecurityConstants.TOKEN_HEADER);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (authorization == <span class="keyword">null</span> || !authorization.startsWith(SecurityConstants.TOKEN_PREFIX)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 去掉 token 前缀</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> authorization.replace(SecurityConstants.TOKEN_PREFIX, <span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>所有的用户请求</strong>都会经过此过滤器，当请求进入过滤器后会经历如下步骤：</p>
<ul>
<li><p>首先，从请求中获取 token 信息，并检查 token 的有效性。</p>
</li>
<li><p>如果 token 有效，则解析 token 获取用户名，然后使用用户名从数据库中获取用户角色信息，并在 Spring Security 的上下文中设置身份验证。</p>
</li>
<li><p>如果 token 无效或请求不带 token 信息，则直接放行。</p>
</li>
</ul>
<p>特别说明，这里用户的角色信息，是从数据库中重新获取的。其实，这里也可以换成从 token 信息中解析出用户角色，这样可以避免直接访问数据库。</p>
<p>但是，直接从数据库获取用户信息也是很有帮助的。例如，如果用户角色已更改，则可能要禁止使用此 token 进行访问。</p>
<p><strong>JwtUtils</strong></p>
<p>JwtUtils 工具类，在用户登录成功后，主要用于生成 token，并验证用户请求中发送的 token。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Jwt 工具类，用于生成、解析与验证 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtUtils<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] secretKey = DatatypeConverter.parseBase64Binary(SecurityConstants.JWT_SECRET_KEY);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JwtUtils</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot create instance of static util class"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 根据用户名和用户角色生成 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName   用户名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> roles      用户角色</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> isRemember 是否记住我</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回生成的 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(String userName, List&lt;String&gt; roles, <span class="keyword">boolean</span> isRemember)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">byte</span>[] jwtSecretKey = DatatypeConverter.parseBase64Binary(SecurityConstants.JWT_SECRET_KEY);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 过期时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">long</span> expiration = isRemember ? SecurityConstants.EXPIRATION_REMEMBER_TIME : SecurityConstants.EXPIRATION_TIME;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 生成 token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        String token = Jwts.builder()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 生成签证信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .setHeaderParam(<span class="string">"typ"</span>, SecurityConstants.TOKEN_TYPE)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .signWith(Keys.hmacShaKeyFor(jwtSecretKey), SignatureAlgorithm.HS256)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .setSubject(userName)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .claim(SecurityConstants.TOKEN_ROLE_CLAIM, roles)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .setIssuer(SecurityConstants.TOKEN_ISSUER)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .setAudience(SecurityConstants.TOKEN_AUDIENCE)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 设置有效时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + expiration * <span class="number">1000</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .compact();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> token;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 验证 token 是否有效</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * &lt;p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 如果解析失败，说明 token 是无效的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token 信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果返回 true，说明 token 有效</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validateToken</span><span class="params">(String token)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            getTokenBody(token);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            logger.warn(<span class="string">"Request to parse expired JWT : &#123;&#125; failed : &#123;&#125;"</span>, token, e.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            logger.warn(<span class="string">"Request to parse unsupported JWT : &#123;&#125; failed : &#123;&#125;"</span>, token, e.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            logger.warn(<span class="string">"Request to parse invalid JWT : &#123;&#125; failed : &#123;&#125;"</span>, token, e.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            logger.warn(<span class="string">"Request to parse empty or null JWT : &#123;&#125; failed : &#123;&#125;"</span>, token, e.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 根据 token 获取用户认证信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token 信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回用户认证信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Authentication <span class="title">getAuthentication</span><span class="params">(String token)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Claims claims = getTokenBody(token);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 获取用户角色字符串</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; roles = (List&lt;String&gt;)claims.get(SecurityConstants.TOKEN_ROLE_CLAIM);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities =</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Objects.isNull(roles) ? Collections.singletonList(<span class="keyword">new</span> SimpleGrantedAuthority(UserRoleConstants.ROLE_USER)) :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        roles.stream()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                .collect(Collectors.toList());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 获取用户名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        String userName = claims.getSubject();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userName, token, authorities);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Claims <span class="title">getTokenBody</span><span class="params">(String token)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> Jwts.parser()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .setSigningKey(secretKey)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .parseClaimsJws(token)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .getBody();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="请求认证流程说明"><a href="#请求认证流程说明" class="headerlink" title="请求认证流程说明"></a>请求认证流程说明</h3><p><del>本项目中出现了两个过滤器，分别是 <code>JwtAuthenticationFilter</code> 和 <code>JwtAuthorizationFilter</code>。当用户发起请求时，都会先进入 <code>JwtAuthorizationFilter</code> 过滤器。如果请求是登录请求，又会进入 <code>JwtAuthenticationFilter</code> 过滤器。也就是说，只有是指定的登录请求才会进入 <code>JwtAuthenticationFilter</code> 过滤器。通过过滤器后，就进入 Spring Security 机制中。</del><br>由于已将登录接口暴露在了 Controller 层，所以登录请求不会经过 <code>JwtAuthenticationFilter</code> 过滤器，它已经废弃。请求认证过程将变成，所有的请求会先经过 <code>JwtAuthorizationFilter</code> 过滤器，然后进入 Spring Security 机制中。</p>
<h3 id="测试-API"><a href="#测试-API" class="headerlink" title="测试 API"></a>测试 API</h3><p><strong>注册账号</strong><br><img alt="register" data-src="https://img-blog.csdnimg.cn/20200524195659308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"><br><strong>登录</strong><br><img alt="login" data-src="https://img-blog.csdnimg.cn/20200524195721904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"><br><strong>带上正确的 token 访问需要身份验证的资源</strong><br><img alt="correctToken" data-src="https://img-blog.csdnimg.cn/20200524200233825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"><br><strong>带上不正确的 token 访问需要身份验证的资源</strong><br><img alt="incorrectToken" data-src="https://img-blog.csdnimg.cn/20200524200307326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<p><strong>不带 token 访问需要身份验证的资源</strong><br><img alt="noToken" data-src="https://img-blog.csdnimg.cn/20200524200408739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<h3 id="项目调整记录"><a href="#项目调整记录" class="headerlink" title="项目调整记录"></a>项目调整记录</h3><ul>
<li>增加 Swagger UI，方便查看项目接口。</li>
<li>增加全局异常捕获功能。</li>
<li>增加 JPA 审计功能，完善数据表审计信息。</li>
<li>在 Controller 层中暴露用户登录接口(/api/auth/login)。</li>
<li>完善项目详解内容。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><p><a href="https://www.callicoder.com/spring-boot-spring-security-jwt-mysql-react-app-part-2/" target="_blank" rel="noopener">https://www.callicoder.com/spring-boot-spring-security-jwt-mysql-react-app-part-2/
</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000009231329" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009231329</a></p>
</li>
<li><p><a href="https://www.springcloud.cc/spring-security.html" target="_blank" rel="noopener">https://www.springcloud.cc/spring-security.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS 7 安装 MySQL</title>
    <url>/2020/05/07/linux-mysql/</url>
    <content><![CDATA[<p>最近，将家里的旧电脑装成了 Linux 系统，当作自己的一个私人服务器，用于编程学习。于是，我首先在上面安装了 MySQL 数据库，中间也遇到了不少问题，所以安装过程以及一些问题的解决方法记录了下来。</p>
<a id="more"></a>

<p>这里要提醒一下，CentOS 7 中直接使用 <code>yum install mysql</code> 命令进行安装时，安装的不是 MySQL，而是MySQL 分支版本 MariaDB。</p>
<h3 id="检查系统"><a href="#检查系统" class="headerlink" title="检查系统"></a>检查系统</h3><p>虽然，我是新装的 Linux 系统，但是要养成良好的使用习惯，在安装任何软件之前，先检查系统是否已经存在此软件。</p>
<ol>
<li>检查 Linux 系统是否安装 MariaDB，输入命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mariadb</span></pre></td></tr></table></figure>
<p>如果存在的话，请使用以下命令删除：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-server</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -e --nodeps mariadb</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs</span></pre></td></tr></table></figure>

<ol start="2">
<li>检查 Linux 系统是否安装 MySQL，输入命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql</span></pre></td></tr></table></figure>

<p>如果存在的话，可以使用以下命令删除：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove mysql</span></pre></td></tr></table></figure>

<h3 id="添加-MySQL-Yum-存储库"><a href="#添加-MySQL-Yum-存储库" class="headerlink" title="添加 MySQL Yum 存储库"></a>添加 MySQL Yum 存储库</h3><p>前面提到，CentOS 7 以上版本，MariaDB 成为 Yum 源中默认的数据库安装包。如果想安装官方 MySQL 版本，需要使用 MySQL 提供的 Yum 存储库。</p>
<p>通过官网地址 (<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a>) 选择适合 Linux 平台的发行包。</p>
<p>我这里是 CentOS 7，就选择 CentOS 7 的 MySQL 源版本。</p>
<p><strong>下载 MySQL YUM 存储库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span></pre></td></tr></table></figure>

<p><strong>安装 MySQL 存储库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span></pre></td></tr></table></figure>

<p>然后，可以通过以下命令检查是否已成功添加 MySQL Yum 存储库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum repolist enabled | grep "mysql.*-community.*"</span></pre></td></tr></table></figure>


<h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><p>使用 MySQL Yum 存储库时，默认情况下会选择最新的 GA 系列进行安装。如果这是您想要的，则可以跳到下一步， 安装 MySQL。如果不是，可使用此命令可查看 MySQL Yum 存储库中的所有子存储库，并查看已启用或禁用了哪些子存储库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum repolist all | grep mysql</span></pre></td></tr></table></figure>

<p>再通过以下命令，选择需要禁用的子存储库和需要启用的子存储库。我这里禁用了最新的存储库，选择了 5.7 版本的存储库进行 MySQL 安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --disable mysql80-community</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo yum-config-manager --enable mysql57-community</span></pre></td></tr></table></figure>
<p>然后，通过以下命令进行 MySQL 安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install mysql-community-server</span></pre></td></tr></table></figure>

<h3 id="启动-MySQL-服务器"><a href="#启动-MySQL-服务器" class="headerlink" title="启动 MySQL 服务器"></a>启动 MySQL 服务器</h3><p>使用以下命令启动MySQL服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysqld.service</span></pre></td></tr></table></figure>
<p>使用以下命令检查 MySQL 服务器的状态，查看是否启动成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl status mysqld.service</span></pre></td></tr></table></figure>

<h3 id="登录-MySQL，修改密码"><a href="#登录-MySQL，修改密码" class="headerlink" title="登录 MySQL，修改密码"></a>登录 MySQL，修改密码</h3><p>MySQL 首次启动后会创建超级管理员账号<code>root@localhost</code>，初始密码存储在错误日志文件中，可以使用以下命令进行查看。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo grep 'temporary password' /var/log/mysqld.log</span></pre></td></tr></table></figure>

<p>通过使用生成的临时密码登录 MySQL 并修改超级管理员登录密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录数据库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mysql -u root -h 127.0.0.1 -p</span></pre></td></tr></table></figure>
<p>登录数据库后，使用以下命令进行密码修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';</span></pre></td></tr></table></figure>
<p>这里说明一下，如果设置的密码过于简单，会出现 <code>Your password does not satisfy the current policy requirements</code> 问题。原因是 MySQL 默认的密码策略默认密码策略<code>validate_password</code> 要求密码至少包含一个大写字母，一个小写字母，一位数字和一个特殊字符，并且密码总长度至少为 8 个字符。</p>
<p>如果不想遵守默认策略，可以使用以下命令更改密码策略。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置密码强度为 Low</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">set global validate_password_policy=0;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 密码最低长度为 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">set global validate_password_length=4;</span></pre></td></tr></table></figure>

<p><code>validate_password_policy</code> 有以下取值：</p>
<table>
<thead>
<tr>
<th>Policy</th>
<th>Tests Performed</th>
</tr>
</thead>
<tbody><tr>
<td>0 or LOW</td>
<td>Length</td>
</tr>
<tr>
<td>1 or MEDIUM</td>
<td>Length; numeric, lowercase/uppercase, and special characters</td>
</tr>
<tr>
<td>2 or STRONG</td>
<td>Length; numeric, lowercase/uppercase, and special characters; dictionary file</td>
</tr>
</tbody></table>
<h3 id="添加远程账户"><a href="#添加远程账户" class="headerlink" title="添加远程账户"></a>添加远程账户</h3><p>如果我们需要进行远程访问安装好的 MySQL，就要进行远程账户设置，使用以下命令进行远程账户设置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加远程账户</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO '用户名'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span></pre></td></tr></table></figure>

<h3 id="防火墙开放-3306-端口"><a href="#防火墙开放-3306-端口" class="headerlink" title="防火墙开放 3306 端口"></a>防火墙开放 3306 端口</h3><p>设置完上面的东西后，此时使用远程登录，仍然无法连接数据，会告诉你 <code>connection refuse</code>。那是因为 Linux 系统开启了防火墙。</p>
<p>使用以下命令查看防火墙状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld.service</span></pre></td></tr></table></figure>

<p>直接的做法是关闭防火墙，但不建议这样做，会增加系统的风险。我们只需要让防火墙开放 MySQL 默认端口号 3306 就好了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙，不推荐</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开放 3306 端口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span></pre></td></tr></table></figure>

<p>命令含义：</p>
<ul>
<li>zone #作用域</li>
<li>add-port=3306/tcp #添加端口，格式为：端口/通讯协议</li>
<li>permanent #永久生效，没有此参数重启后失效</li>
</ul>
<p>最后，重启防火墙。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld.service</span></pre></td></tr></table></figure>

<h3 id="设置数据库编码字符集"><a href="#设置数据库编码字符集" class="headerlink" title="设置数据库编码字符集"></a>设置数据库编码字符集</h3><p>设置完上面内容后，我们可以将数据库编码字符集修改成国际通用的 UTF-8 编码。</p>
<p>使用 vi 命令打开文件 <code>/etc/my.cnf</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span></pre></td></tr></table></figure>
<p>在 [mysqld] 节点下输入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">character_set_server&#x3D;utf8</span></pre></td></tr><tr><td class="code"><pre><span class="line">init-connect&#x3D;&#39;SET NAMES utf8&#39;</span></pre></td></tr></table></figure>

<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>将 MySQL 设置成开启启动，这样我们重启 Linux 系统后，就不用在单独去启动了。</p>
<p>这里最后养成一个习惯，安装的所有服务，都设置成开机自动启动。不然，在服务很多的时候，自己手动一个一个的启动，简直要命。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span></pre></td></tr></table></figure>

<h3 id="设置-MySQL-用户组权限"><a href="#设置-MySQL-用户组权限" class="headerlink" title="设置 MySQL 用户组权限"></a>设置 MySQL 用户组权限</h3><p>设置 mysql 用户及用户组对 mysql 所有目录及文件有操作权限，这样我们就可以进行数据操作啦。不然，在进行数据库创建时会报 <code>ERROR 1006 (HY000) Can&#39;t create database (errno: 13)</code> 错误。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chown -R mysql:mysql /var/lib/mysql/</span></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>MySQL 官网：<a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/</a></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
  </entry>
  <entry>
    <title>volatile 关键字，你真的理解吗？</title>
    <url>/2020/05/07/volatile/</url>
    <content><![CDATA[<p>最近，在一篇文章中了解到了 volatile 关键字，在强烈的求知欲趋使下，我查阅了一些相关资料进行了学习，并将学习笔记记录如下，希望能给小伙伴们带来一些帮助。如果文章内容存在一些错误，也请小伙伴们指正，感谢。</p>
<a id="more"></a>

<p>这里先给大家分享一个我在 B 站发现的讲解 volitle 关键字的视频，有兴趣的同学可以认真看一下，挺不错的，我就是通过它进行的学习。</p>
<p>视频地址：<a href="https://www.bilibili.com/video/BV1BJ411j7qb?from=search&seid=7212869160158812321" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1BJ411j7qb?from=search&amp;seid=7212869160158812321</a>。</p>
<h3 id="volatile-的作用"><a href="#volatile-的作用" class="headerlink" title="volatile 的作用"></a>volatile 的作用</h3><p>大家都应该知道 volatile 的主要作用有两点：</p>
<ul>
<li>保证变量的内存可见性</li>
<li>禁止指令重排序</li>
</ul>
<p>那么，什么是内存可见性，什么是指令重排序，以及它们涉及了那些机制呢？下面就让我们来看看吧。</p>
<p>在这里提醒一下，各位小伙伴要有个心理准备，就一个 volatile 关键字所涉及的知识点超乎你的想象哟。</p>
<h3 id="可见性问题"><a href="#可见性问题" class="headerlink" title="可见性问题"></a>可见性问题</h3><p>在理解 volatile 的内存可见性前，我们先来看看这个比较常见的多线程访问共享变量的例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 变量的内存可见性例子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileExample</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * main 方法作为一个主线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 开启线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        myThread.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 主线程执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (myThread.isFlag()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(<span class="string">"主线程访问到 flag 变量"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 子线程类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 修改变量值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"flag = "</span> + flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> flag;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.flag = flag;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>执行上面的程序，你会发现，控制台永远都不会输出 <strong>“主线程访问到 flag 变量”</strong> 这句话。我们可以看到，子线程执行时已经将 flag 设置成 true，但主线程执行时没有读到 flag 的最新值，导致控制台没有输出上面的句子。</p>
<p>那么，我们思考一下为什么会出现这种情况呢？这里我们就要了解一下 Java 内存模型（简称 JMM）。</p>
<p><strong>Java 内存模型</strong></p>
<p>JMM（Java Memory Model）：Java 内存模型，是 Java 虚拟机规范中所定义的一种内存模型，Java 内存模型是标准化的，屏蔽掉了底层不同计算机的区别。也就是说，JMM 是 JVM 中定义的一种并发编程的底层模型机制。</p>
<p>JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。</p>
<p>JMM 的规定：  </p>
<ul>
<li><p>所有的共享变量都存储于主内存。这里所说的变量指的是实例变量和类变量，不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题。</p>
</li>
<li><p>每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本。</p>
</li>
<li><p>线程对变量的所有的操作（读，取）都必须在工作内存中完成，而不能直接读写主内存中的变量。</p>
</li>
<li><p>不同线程之间也不能直接访问对方工作内存中的变量，线程间变量的值的传递需要通过主内存中转来完成。</p>
</li>
</ul>
<p>JMM 的抽象示意图：<br><img alt="JMM" data-src="JMM.png"></p>
<p>然而，JMM 这样的规定可能会导致线程对共享变量的修改没有即时更新到主内存，或者线程没能够即时将共享变量的最新值同步到工作内存中，从而使得线程在使用共享变量的值时，该值并不是最新的。</p>
<p><strong>正因为 JMM 这样的机制，就出现了可见性问题。也就是我们上面那个例子出现的问题</strong>。</p>
<p>那我们要如何解决可见性问题呢？接下来我们就聊聊内存可见性以及可见性问题的解决方案。</p>
<h3 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h3><p>内存可见性是指当一个线程修改了某个变量的值，其它线程总是能知道这个变量变化。也就是说，如果线程 A 修改了共享变量 V 的值，那么线程 B 在使用 V 的值时，能立即读到 V 的最新值。</p>
<h3 id="可见性问题的解决方案"><a href="#可见性问题的解决方案" class="headerlink" title="可见性问题的解决方案"></a>可见性问题的解决方案</h3><p>我们如何保证多线程下共享变量的可见性呢？也就是当一个线程修改了某个值后，对其他线程是可见的。</p>
<p>这里有两种方案：<strong>加锁</strong> 和 <strong>使用 volatile 关键字</strong>。</p>
<p>下面我们使用这两个方案对上面的例子进行改造。</p>
<p><strong>加锁</strong></p>
<p>使用 synchronizer 进行加锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * main 方法作为一个主线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     MyThread myThread = <span class="keyword">new</span> MyThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="comment">// 开启线程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     myThread.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="comment">// 主线程执行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">for</span> (; ; ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">synchronized</span> (myThread) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             <span class="keyword">if</span> (myThread.isFlag()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 System.out.println(<span class="string">"主线程访问到 flag 变量"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr></table></figure>
<p><strong>这里大家应该有个疑问是，为什么加锁后就保证了变量的内存可见性了？</strong> 因为当一个线程进入 synchronizer 代码块后，线程获取到锁，会清空本地内存，然后从主内存中拷贝共享变量的最新值到本地内存作为副本，执行代码，又将修改后的副本值刷新到主内存中，最后线程释放锁。</p>
<p>这里除了 synchronizer 外，其它锁也能保证变量的内存可见性。</p>
<p><strong>使用 volatile 关键字</strong></p>
<p>使用 volatile 关键字修饰共享变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 子线程类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 修改变量值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"flag = "</span> + flag);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> flag;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.flag = flag;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>使用 volatile 修饰共享变量后，每个线程要操作变量时会从主内存中将变量拷贝到本地内存作为副本，当线程操作变量副本并写回主内存后，会通过 <strong>CPU 总线嗅探机制</strong>告知其他线程该变量副本已经失效，需要重新从主内存中读取。</p>
<p>volatile 保证了不同线程对共享变量操作的可见性，也就是说一个线程修改了 volatile 修饰的变量，当修改后的变量写回主内存时，其他线程能立即看到最新值。</p>
<p>接下来我们就聊聊一个比较底层的知识点：<code>总线嗅探机制</code>。</p>
<p><strong>总线嗅探机制</strong></p>
<p>在现代计算机中，CPU 的速度是极高的，如果 CPU 需要存取数据时都直接与内存打交道，在存取过程中，CPU 将一直空闲，这是一种极大的浪费，所以，为了提高处理速度，CPU 不直接和内存进行通信，而是在 CPU 与内存之间加入很多寄存器，多级缓存，它们比内存的存取速度高得多，这样就解决了 CPU 运算速度和内存读取速度不一致问题。</p>
<p>由于 CPU 与内存之间加入了缓存，在进行数据操作时，先将数据从内存拷贝到缓存中，CPU 直接操作的是缓存中的数据。但在多处理器下，将可能导致各自的缓存数据不一致（这也是可见性问题的由来），为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，而<strong>嗅探是实现缓存一致性的常见机制</strong>。</p>
<p><img alt="cpu 内存模型" data-src="CPU.png"></p>
<blockquote>
<p>注意，缓存的一致性问题，不是多处理器导致，而是多缓存导致的。</p>
</blockquote>
<p><strong>嗅探机制工作原理</strong>：每个处理器通过监听在总线上传播的数据来检查自己的缓存值是不是过期了，如果处理器发现自己缓存行对应的内存地址修改，就会将当前处理器的缓存行设置无效状态，当处理器对这个数据进行修改操作的时候，会重新从主内存中把数据读到处理器缓存中。</p>
<blockquote>
<p>注意：基于 CPU 缓存一致性协议，JVM 实现了 volatile 的可见性，但由于总线嗅探机制，会不断的监听总线，如果大量使用 volatile 会引起总线风暴。所以，volatile 的使用要适合具体场景。</p>
</blockquote>
<p><strong>可见性问题小结</strong></p>
<p>上面的例子中，我们看到，使用 volatile 和 synchronized 锁都可以保证共享变量的可见性。相比 synchronized 而言，volatile 可以看作是一个轻量级锁，所以使用 volatile 的成本更低，因为它不会引起线程上下文的切换和调度。但 volatile 无法像 synchronized 一样保证操作的原子性。</p>
<p>下面我们来聊聊 volatile 的原子性问题。</p>
<h3 id="volatile-的原子性问题"><a href="#volatile-的原子性问题" class="headerlink" title="volatile 的原子性问题"></a>volatile 的原子性问题</h3><p>所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行。</p>
<p>在多线程环境下，volatile 关键字可以保证共享数据的可见性，但是并不能保证对数据操作的原子性。也就是说，多线程环境下，使用 volatile 修饰的变量是<strong>线程不安全的</strong>。</p>
<p>要解决这个问题，我们可以使用锁机制，或者使用原子类（如 AtomicInteger）。</p>
<p>这里特别说一下，对任意单个使用 volatile 修饰的变量的读 / 写是具有原子性，但类似于 <code>flag = !flag</code> 这种复合操作不具有原子性。简单地说就是，<strong>单纯的赋值操作是原子性的</strong>。</p>
<h3 id="禁止指令重排序"><a href="#禁止指令重排序" class="headerlink" title="禁止指令重排序"></a>禁止指令重排序</h3><p><strong>什么是重排序？</strong>  </p>
<p>为了提高性能，在遵守 <code>as-if-serial</code> 语义（即不管怎么重排序，单线程下程序的执行结果不能被改变。编译器，runtime 和处理器都必须遵守。）的情况下，编译器和处理器常常会对指令做重排序。</p>
<p>一般重排序可以分为如下三种类型：</p>
<ul>
<li><p>编译器优化重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p>
</li>
<li><p>指令级并行重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p>
</li>
<li><p>内存系统重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。  </p>
</li>
</ul>
<blockquote>
<p>数据依赖性：如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。这里所说的数据依赖性仅针对单个处理器中执行的指令序列和单个线程中执行的操作，不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑。</p>
</blockquote>
<p>从 Java 源代码到最终执行的指令序列，会分别经历下面三种重排序：</p>
<p><img alt="重排序顺序" data-src="zhiling.png"></p>
<p>为了更好地理解重排序，请看下面的部分示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 线程 A</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>;           <span class="comment">// 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">flag = <span class="keyword">true</span>;     <span class="comment">// 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 线程 B</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag) &#123; <span class="comment">// 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> i = a; <span class="comment">// 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>单看上面的程序好像没有问题，最后 i 的值是 1。但是为了提高性能，编译器和处理器常常会在不改变数据依赖的情况下对指令做重排序。假设线程 A 在执行时被重排序成先执行代码 2，再执行代码 1；而线程 B 在线程 A 执行完代码 2 后，读取了 flag 变量。由于条件判断为真，线程 B 将读取变量 a。此时，变量 a 还根本没有被线程 A 写入，那么 i 最后的值是 0，导致执行结果不正确。那么如何程序执行结果正确呢？这里仍然可以使用 volatile 关键字。</p>
<p>这个例子中， 使用 volatile 不仅保证了变量的内存可见性，还禁止了指令的重排序，即保证了 volatile 修饰的变量编译后的顺序与程序的执行顺序一样。那么使用 volatile 修饰 flag 变量后，在线程 A 中，保证了代码 1 的执行顺序一定在代码 2 之前。</p>
<p>那么，让我们继续往下探索， volatile 是如何禁止指令重排序的呢？这里我们将引出一个概念：<code>内存屏障指令</code></p>
<p><strong>内存屏障指令</strong></p>
<p>为了实现 volatile 内存语义（即内存可见性），JMM 会限制特定类型的编译器和处理器重排序。为此，JMM 针对编译器制定了 volatile 重排序规则表，如下所示：</p>
<p><img alt="volatile重排序规则" data-src="volatileguize.png"></p>
<p>使用 volatile 修饰变量时，根据 volatile 重排序规则表，Java 编译器在生成字节码时，会在指令序列中插入内存屏障指令来禁止特定类型的处理器重排序。</p>
<p><code>内存屏障</code>是一组处理器指令，它的作用是禁止指令重排序和解决内存可见性的问题。</p>
<p>JMM 把内存屏障指令分为下列四类：</p>
<table>
<thead>
<tr>
<th>屏障类型</th>
<th>指令示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>LoadLoad 屏障</td>
<td>Load1; LoadLoad; Load2</td>
<td>确保 Load1 数据的读取操作，在 Load2 及所有后续的读取操作之前。</td>
</tr>
<tr>
<td>StoreStore 屏障</td>
<td>Store1; StoreStore; Store2</td>
<td>确保 Store1 数据的写入操作对其他处理器可见（刷新到内存），在 Store2 及所有后续数据的写入操作之前。</td>
</tr>
<tr>
<td>LoadStore 屏障</td>
<td>Load1; LoadStore; Store2</td>
<td>确保 Load1 数据的读取操作，在 Store2 及所有后续的数据刷新到内存之前。</td>
</tr>
<tr>
<td>StoreLoad 屏障</td>
<td>Store1; StoreLoad; Load2</td>
<td>确保 Store1 数据的写入操作对其他处理器变得可见（指刷新到内存），在 Load2 及所有后续数据的写入操作之前。StoreLoad 屏障会使该屏障之前的所有内存访问指令（读取和写入指令）完成之后，才执行该屏障之后的内存访问指令。</td>
</tr>
</tbody></table>
<blockquote>
<p>StoreLoad 屏障是一个全能型的屏障，它同时具有其他三个屏障的效果。所以执行该屏障开销会很大，因为它使处理器要把缓存中的数据全部刷新到内存中。</p>
</blockquote>
<p>下面我们来看看 volatile  读 / 写时是如何插入内存屏障的，见下图：</p>
<p><img alt="内存屏障" data-src="volatilebarrier.png"></p>
<p>从上图，我们可以知道 volatile 读 / 写插入内存屏障规则：</p>
<ul>
<li>在每个 volatile 读操作的后面插入 LoadLoad 屏障和 LoadStore 屏障。</li>
<li>在每个 volatile 写操作的前后分别插入一个 StoreStore 屏障和一个 StoreLoad 屏障。</li>
</ul>
<p>也就是说，编译器不会对 volatile 读与 volatile 读后面的任意内存操作重排序；编译器不会对 volatile 写与 volatile 写前面的任意内存操作重排序。</p>
<h3 id="happens-before-概述"><a href="#happens-before-概述" class="headerlink" title="happens-before 概述"></a>happens-before 概述</h3><p>上面我们讲述了重排序原则，为了提高处理速度， JVM 会对代码进行编译优化，也就是指令重排序优化，但是并发编程下指令重排序也会带来一些安全隐患：如<strong>指令重排序导致的多个线程操作之间的不可见性</strong>。为了理解 JMM 提供的内存可见性保证，让程序员再去学习复杂的重排序规则以及这些规则的具体实现，那么程序员的负担就太重了，严重影响了并发编程的效率。</p>
<p>所以从 JDK5 开始，提出了 happens-before 的概念，通过这个概念来阐述操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 </p>
<p>happens-before 规则如下：</p>
<ul>
<li><p>程序顺序规则：一个线程中的每个操作，happens-before 于该线程中的任意后续操作。</p>
</li>
<li><p>监视器锁规则：对一个监视器锁的解锁，happens-before 于随后对这个监视器锁的加锁。</p>
</li>
<li><p>volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</p>
</li>
<li><p>传递性：如果 A happens-before B，且 B happens-before C，那么 A happens-before C。</p>
</li>
<li><p>start() 规则：Thread.start() 的调用会 happens-before 于启动线程里面的动作。</p>
</li>
<li><p>join() 规则：Thread 中的所有动作都 happens-before 于其他线程从 Thread.join() 中成功返回。</p>
</li>
</ul>
<p>这里特别说明一下，happens-before 规则不是描述实际操作的先后顺序，它是用来描述可见性的一种规则。</p>
<p>从 happens-before 的 volatile 变量规则可知，如果线程 A 写入了 volatile 修饰的变量 V，接着线程 B 读取了变量 V，那么，线程 A 写入变量 V 及之前的写操作都对线程 B 可见。</p>
<h3 id="volatile-在单例模式中的应用"><a href="#volatile-在单例模式中的应用" class="headerlink" title="volatile 在单例模式中的应用"></a>volatile 在单例模式中的应用</h3><p>单例模式有 8 种，而懒汉式单例双重检测模式中就使用到了 volatile 关键字。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// volatile 保证可见性和禁止指令重排序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第一次检查</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">// 同步代码块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>.getClass()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="comment">// 第二次检查</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="comment">// 对象的实例化是一个非原子性操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> singleton;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>上面代码中， <code>new Singleton()</code> 是一个非原子性操作，对象实例化分为三步操作：（1）分配内存空间，（2）初始化实例，（3）返回内存地址给引用。所以，在使用构造器创建对象时，编译器可能会进行指令重排序。假设线程 A 在执行创建对象时，（2）和（3）进行了重排序，如果线程 B 在线程 A 执行（3）时拿到了引用地址，并在第一个检查中判断 singleton != null 了，但此时线程 B 拿到的不是一个完整的对象，在使用对象进行操作时就会出现问题。</p>
<p>所以，这里使用 volatile 修饰 singleton 变量，就是为了禁止在实例化对象时进行指令重排序。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>volatile 修饰符适用于以下场景：某个属性被多个线程共享，其中有一个线程修改了此属性，其他线程可以立即得到修改后的值；或者作为状态变量，如 flag = ture，实现轻量级同步。 </p>
</li>
<li><p>volatile 属性的读写操作都是无锁的，它不能替代 synchronized，因为它没有提供原子性和互斥性。因为无锁，不需要花费时间在获取锁和释放锁上，所以说它是低成本的。</p>
</li>
<li><p>volatile 只能作用于属性，我们用 volatile 修饰属性，这样编译器就不会对这个属性做指令重排序。</p>
</li>
<li><p>volatile 提供了可见性，任何一个线程对其的修改将立马对其他线程可见。volatile 属性不会被线程缓存，始终从主存中读取。</p>
</li>
<li><p>volatile 提供了 happens-before 保证，对 volatile 变量 V 的写入 happens-before 所有其他线程后续对 V 的读操作。</p>
</li>
<li><p>volatile 可以使纯赋值操作是原子的，如 <code>boolean flag = true; falg = false</code>。</p>
</li>
<li><p>volatile 可以在单例双重检查中实现可见性和禁止指令重排序，从而保证安全性。</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>happen-before 俗解：<a href="http://ifeve.com/easy-happens-before/" target="_blank" rel="noopener">http://ifeve.com/easy-happens-before/</a></p>
<p>JMM Cookbook(一)指令重排：<a href="http://ifeve.com/jmm-cookbook-reorderings/" target="_blank" rel="noopener">http://ifeve.com/jmm-cookbook-reorderings/</a></p>
<p>JMM Cookbook(二)内存屏障：<a href="http://ifeve.com/jmm-cookbook-mb/" target="_blank" rel="noopener">http://ifeve.com/jmm-cookbook-mb/</a></p>
<p>深入理解 Java 内存模型（二）——重排序：<a href="https://www.infoq.cn/article/java-memory-model-2/" target="_blank" rel="noopener">https://www.infoq.cn/article/java-memory-model-2/</a></p>
<p>深入理解 Java 内存模型（四）——volatile：<a href="https://www.infoq.cn/article/java-memory-model-4" target="_blank" rel="noopener">https://www.infoq.cn/article/java-memory-model-4</a></p>
<p>窥探真相：volatile 可见性实现原理：<a href="https://segmentfault.com/a/1190000020909627" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020909627</a></p>
<blockquote>
<p>因为是个人学习笔记，难免存在一些错误或纰漏，也请小伙伴们指正。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>程序员日常开发注意事项总结</title>
    <url>/2020/04/11/code-summary/</url>
    <content><![CDATA[<p>作为一名刚入行不久的菜鸟 Java 程序员，经常被自己的一些不好的开发习惯给坑，导致明明运行好好的项目突然出现意想不到的 Bug。然后，我就被导师叫过去进行了一番细心的指导，这里要特别感谢一下我的导师，可以说他是我目前开发路上的指路明灯。</p>
<a id="more"></a>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>这里，我总结了几条开发中我认为比较重要的注意事项：</p>
<p><strong>1. 完善代码注释</strong></p>
<p>我相信很多小伙伴跟我一样，自己写的代码过一段时间去看就不知道是怎么回事了，而且经常发出疑问，“咦，这是我写的代码吗”。所以，注释是一个很好的东西，它不仅可以帮助我们理解程序中的每一行代码在做什么，而且可以降低代码的维护成本。</p>
<p>但是，注释也不能随随便便的写，任何地方都写。这样会让代码显得冗余繁杂，反而降低了代码的可读性和维护性。</p>
<p>我们在写注释时要讲究简明扼要，突出含义。对于类的注释，要表明类的功能和副作用（即使用该类时会不会出现一些异常等）；对于方法的注释，要表明方法是干什么的，每个参数的含义以及方法的副作用。</p>
<p><strong>2. 完善单元测试</strong></p>
<p>单元测试可以帮助我们发现程序中一些的 Bug，提升代码质量，提高开发效率。</p>
<p>很多小伙伴应该和我一样也会时不时偷懒，没有去写单元测试，觉得很麻烦。但是，我在导师的督促下也补上了单元测试，后来我每次改了 Bug 后都用单元测试跑一下，就检查出了问题，比之前自己人工测试要快的多。突然就发现了单元测试的好处，虽然前期写单元测试有点麻烦，但是后期的收益是杠杠的，真香。</p>
<p><strong>3. 过时的方法代码不要急着删除</strong></p>
<p>在项目迭代中，我们会不断重构一些之前写的不是很好的方法。但是，过时的方法不应该马上删除，而是应该等重构的新方法上线运行一段时间，没有出现异常后才将过时的方法删除。</p>
<p>为什么要这样做呢？因为我们并不能保证重构的新方法上线后一定能稳定运行。如果上线后新方法在运行的过程中出现 Bug，并且影响了用户的部分操作。那么，过时的方法就可以作为一种应急的替代方法，将新方法换下来，以保证用户正常操作。之后，我们再进行新方法的 Bug 排查与修复。</p>
<p><strong>4. 项目的 API 只能增加不能删除</strong></p>
<p>在前后端分离的项目中，当需要修改项目 API 地址时，应该是在旧的 API 地址上再添加新的 API 地址，旧的 API 地址应保留至项目迭代几个版本后，没有出现问题才进行删除。</p>
<p>为什么要这样做呢？因为随着时间的推移，我们可能并不清楚到底有多少地方调用了旧的 API 地址。所以，当我们用新的 API 地址替换旧的 API 地址时，并不能保证所有的地方都完成替换了或者在替换时因为一些其他因素而漏掉了一些。如果此时就把旧的 API 地址删除了，那么上线后会存在很多风险。  </p>
<p>比较好的做法就是让旧的 API 地址随着项目一起迭代几个版本后才删除，这样我们有足够的时间去发现遗漏的地方，减小项目上线出现的风险。</p>
<p><strong>5. 请新建一个项目分支来修复 Bug</strong></p>
<p>当项目出现 Bug 需要进行修复时，应该从当前版本分支（确保此分支没有进行任何更改）上新开一个新分支来进行 Bug 修复，最后再合并回原分支上。</p>
<p>这样做有什么好处呢？首先，不会影响我们正在开发的内容；同时，我们在修复 Bug 时，并不能保证修改后的程序没有副作用，这样也便于我们进行测试。</p>
<p><strong>6. 新建一个项目分支来完成项目新需求开发</strong></p>
<p>当项目有新需求要进行开发时，应该在 Git 上新建一个项目分支来完成新需求的开发，并将分支命名成 <code>version_版本号_需求名</code> 这种形式。</p>
<p>为什么不直接在当前版本分支上开发呢？如果我们在当前版本分支上进行开发，当项目出现 Bug 需要马上修复并上线时，而当前版本分支上还有我们没有开发完的新需求，根本不具备重新上线的条件了。此时，只有重新从远程仓库将当前版本的内容下载到本地，再进行 Bug 修复。这样反而很影响我们的开发效率。</p>
<p>当我们在新分支上完成新需求开发时，应该先将当前版本分支合并到新分支上进行测试，没有问题后再合并到当前版本分支上。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在日常的开发中，养成良好的开发习惯不仅可以帮助我们提高开发效率，还可以降低开发过程中出现的一些不必要的失误与错误，间接地也改善了我们的代码质量。</p>
<p>所以，小伙伴们一定要养成良好的开发习惯哟，一起加油！欢迎补充。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Angular：使用[@Directive]自定义指令</title>
    <url>/2020/03/09/angular-directive/</url>
    <content><![CDATA[<p>在 Angular 中有三种类型的指令：</p>
<ul>
<li><p>组件，有模板的指令，组件是继承于指令的，只是扩展类与 UI 相关的属性。</p>
</li>
<li><p>属性型指令，改变 DOM 元素、组件或其他指令的行为和外观的指令。如，NgStyle、NgClass。</p>
</li>
<li><p>结构型指令，通过添加或移除 DOM 元素改变 DOM 布局的指令。如，NgIf、NgFor。</p>
</li>
</ul>
<p>然而，在实际的开发中，根据业务的需要，我们经常会拓展 Angular 组件的指令来方便业务的开发。下面让我们来看看如何创建自己的指令。</p>
<a id="more"></a>

<h3 id="创建属性型指令"><a href="#创建属性型指令" class="headerlink" title="创建属性型指令"></a>创建属性型指令</h3><p>在 Angular 中，属性型指令的创建至少需要一个带有 <code>@Directive</code> 装饰器的控制器类。这个装饰器指定了一个选择器名称，用于标识与指令相关联的属性名称。控制器类实现了指令的功能行为。</p>
<p>接下来，我们创建一个简单的指令，实现鼠标在元素上悬停时，改变起背景颜色；鼠标移开时，背景颜色消失；鼠标点击时，字体变大；鼠标松开时，字体恢复原样的功能。</p>
<p><strong>指令实现</strong></p>
<p>创建 background-exed.directive.ts 文件，实现如下代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, HostListener, ElementRef, Renderer2, HostBinding &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'[appBackgroundExe]'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BackgroundExeDirective &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@Input</span>(<span class="string">'appBackgroundExe'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  highLightColor: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> elementRef: ElementRef, <span class="keyword">private</span> renderer: Renderer2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 这种写法比较丑陋</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// this.elementRef.nativeElement.style.background = 'yellow';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 推荐这种写法， Renderer</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.renderer.setStyle(<span class="keyword">this</span>.elementRef.nativeElement, <span class="string">'background'</span>, <span class="string">'yellow'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@HostBinding</span>(<span class="string">'class.pressed'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  isPressed: <span class="built_in">boolean</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@HostListener</span>(<span class="string">'mouseenter'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onMouseEnter(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">this</span>.highLight(<span class="keyword">this</span>.highLightColor);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@HostListener</span>(<span class="string">'mouseleave'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onMouseLeave(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.highLight(<span class="literal">null</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@HostListener</span>(<span class="string">'mousedown'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onMouseDown(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.isPressed = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@HostListener</span>(<span class="string">'mouseup'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onMouseUp(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.isPressed = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> highLight(color: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// this.elementRef.nativeElement.style.background = color;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.renderer.setStyle(<span class="keyword">this</span>.elementRef.nativeElement, <span class="string">'background'</span>, color);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>其中，<code>selector: &#39;[appBackgroundExe]&#39;</code> 是指令关联的属性名称，以便 Angular 在编译时，能从模板中找到与此指令关联的 HTML 代码。  </p>
<p>构造函数中，注入了 <code>ElementRef</code> 和 <code>Renderer2</code> 模块的实例。通过 <code>ElementRef</code> 我们可以引用指令标识的 DOM 元素，并对其进行相关的操作；并且可以利用 <code>Renderer2</code> 提供的 API 对元素进行相关的渲染操作。  </p>
<p><code>@HostListener</code> 和 <code>@HostBinding</code> 是属性装饰器。<code>@HostListener</code> 是用来为宿主元素添加事件监听；而指令标记的元素，就是宿主元素。<code>@HostBinding</code> 是用来动态设置宿主元素的属性值。</p>
<p><strong>设置字体样式</strong></p>
<ul>
<li>appliation.component.less</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pressed</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>在模板中使用指令</strong></p>
<ul>
<li>application.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> [<span class="attr">appBackgroundExe</span>]=<span class="string">"'red'"</span>&gt;</span>鼠标移进，元素变成红色。鼠标移出，元素红色消失<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="创建结构型指令"><a href="#创建结构型指令" class="headerlink" title="创建结构型指令"></a>创建结构型指令</h3><p>结构型指令的创建与属性型指令创建大同小异。</p>
<p><strong>指令实现</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, Input, TemplateRef, ViewContainerRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    selector: <span class="string">'[appIf]'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> IfDirective &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">        <span class="keyword">private</span> templateRef: TemplateRef&lt;<span class="built_in">any</span>&gt;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">        <span class="keyword">private</span> viewContainerRef: ViewContainerRef</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    </span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Input</span>(<span class="string">'ifCreat'</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">set</span> condition(condition: <span class="built_in">boolean</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">if</span> (condition) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">this</span>.viewContainerRef.createEmbeddedView(<span class="keyword">this</span>.templateRef);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">this</span>.viewContainerRef.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中，<code>TemplateRef</code> 表示内嵌的 template 模板元素，通过它可以创建内嵌视图。<code>ViewContainerRef</code> 表示一个视图容器，可以添加一个或多个视图，通过它可以创建和管理基于 <code>TemplateRef</code> 实例的内嵌视图或组件视图。</p>
<p><strong>在模板中使用指令</strong></p>
<ul>
<li>application.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ifCreate</span>=<span class="string">"'true'"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文主要介绍了在 Angular 中如何自定义创建指令。在实际的开发中，我们可以很灵活地创建我们想要的指令。</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
  </entry>
  <entry>
    <title>Angular: [ControlValueAccessor] 自定义表单控件</title>
    <url>/2020/03/09/angular-controlvalueaccessor/</url>
    <content><![CDATA[<p>我们在实际开发中，通常会遇到各种各样的定制化功能，会遇到有些组件会与 Angular 的表单进行交互，这时候我们一般会从外部传入一个 FormGroup 对象，然后在组件的内部写相应的逻辑对 Angular 表单进行操作。如果我们只是对表单中的一个项进行定制，将整个表单对象传入显然不合适，并且组件也会显得臃肿。</p>
<a id="more"></a>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;form [formGroup]=<span class="string">"simpleForm"</span>&gt;                                </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;other-component [form]=<span class="string">"simpleForm"</span>&gt;&lt;<span class="regexp">/other-component&gt;        </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>form&gt;</span></pre></td></tr></table></figure>
<p>那么，我们能不能像原生表单一样去使用这些自定义组件呢？目前，开源组件 ng-zorro-antd 表单组件能和原生表单一样使用 formControlName 这个属性，这类组件就叫自定义表单组件。</p>
<h3 id="如何实现自定义表单控件"><a href="#如何实现自定义表单控件" class="headerlink" title="如何实现自定义表单控件"></a>如何实现自定义表单控件</h3><p>在 Angular 中，使用 ControlValueAccessor 可以实现组件与外层包裹的 form 关联起来。</p>
<p>ControlValueAccessor是用于处理以下内容的接口：</p>
<ul>
<li>将表单模型中的值写入视图/ DOM</li>
<li>在视图/ DOM更改时通知其他表单指令和控件</li>
</ul>
<p><strong>ControlValueAccessor</strong></p>
<p>ControlValueAccessor 接口定义了四个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">writeValue(obj: any): <span class="keyword">void</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">registerOnChange(fn: any): <span class="keyword">void</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">registerOnTouched(fn: any): <span class="keyword">void</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">setDisabledState(isDisabled: <span class="keyword">boolean</span>)?: <span class="keyword">void</span></span></pre></td></tr></table></figure>
<p><code>writeValue(obj：any)</code>：将表单模型中的新值写入视图或DOM属性（如果需要）的方法，它将来自外部的数据写入到内部的数据模型。数据流向： form model -&gt; component。</p>
<p><code>registerOnChange(fn：any)</code>：一种注册处理程序的方法，当视图中的某些内容发生更改时应调用该处理程序。它具有一个告诉其他表单指令和表单控件以更新其值的函数。通常在 registerOnChange 中需要保存该事件触发函数，在数据改变的时候，可以通过调用事件触发函数通知外部数据变了，同时可以将修改后的数据作为参数传递出去。数据流向： component -&gt; form model。</p>
<p><code>registerOnTouched(fn: any)</code>：注册 onTouched 事件，基本同 registerOnChange ，只是该函数用于通知表单组件已经处于 touched 状态，改变绑定的 FormControl 的内部状态。状态变更： component -&gt; form model。</p>
<p><code>setDisabledState(isDisabled: boolean)</code>：当调用 FormControl 变更状态的 API 时得表单状态变为 Disabled 时调用 setDisabledState() 方法，以通知自定义表单组件当前表单的读写状态。状态变更： form model -&gt; component。</p>
<h3 id="如何使用-ControlValueAccessor"><a href="#如何使用-ControlValueAccessor" class="headerlink" title="如何使用 ControlValueAccessor"></a>如何使用 ControlValueAccessor</h3><p><strong>搭建控件框架</strong>  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'app-test-control-value-accessor'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  templateUrl: <span class="string">'./test-control-value-accessor.component.html'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  providers: [&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    provide: NG_VALUE_ACCESSOR,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    useExisting: forwardRef(<span class="function"><span class="params">()</span> =&gt;</span> TestControlValueAccessorComponent),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    multi: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TestControlValueAccessorComponent <span class="keyword">implements</span> ControlValueAccessor &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  _counterValue = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> onChange = <span class="function">(<span class="params">_: <span class="built_in">any</span></span>) =&gt;</span> &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">get</span> counterValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._counterValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">set</span> counterValue(value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>._counterValue = value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 触发 onChange，component 内部的值同步到 form model</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.onChange(<span class="keyword">this</span>._counterValue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  increment() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.counterValue++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  decrement() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.counterValue--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// form model 的值同步到 component 内部</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  writeValue(obj: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (obj !== <span class="literal">undefined</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.counterValue = obj;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  registerOnChange(fn: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.onChange = fn;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  registerOnTouched(fn: <span class="built_in">any</span>): <span class="built_in">void</span> &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  setDisabledState?(isDisabled: <span class="built_in">boolean</span>): <span class="built_in">void</span> &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>注册 ControlValueAccessor</strong></p>
<p>为了获得 <code>ControlValueAccessor</code> 用于表单控件，Angular 内部将注入在<code>NG_VALUE_ACCESSOR</code>令牌上注册的所有值，这是将控件本身注册到 <code>DI</code> 框架成为一个可以让表单访问其值的控件。因此，我们需要做的就是<code>NG_VALUE_ACCESSOR</code> 使用我们自己的值访问器实例（这是我们的组件）扩展 multi-provider 。所以设置 <code>multi: true</code>，是声明这个 <code>token</code> 对应的类很多，分散在各处。</p>
<p>这里我们必须使用 <code>useExisting</code>，因为<code>CounterInputComponent</code> 可能在使用它的组件中被其创建为指令依赖项。这就得用到 <code>forwardRef</code> 了，这个函数允许我们引用一个尚未定义的对象。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">  providers: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">      provide: NG_VALUE_ACCESSOR,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      useExisting: forwardRef(<span class="function"><span class="params">()</span> =&gt;</span> TestControlValueAccessorComponent ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">      multi: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TestControlValueAccessorComponent <span class="keyword">implements</span> ControlValueAccessor &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>控件界面</strong></p>
<ul>
<li>test-control-value-accessor.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>自定义控件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"increment()"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123;counterValue&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"decrement()"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
<p><strong>在表单中使用</strong>   </p>
<ul>
<li>app.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"constainer"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> #<span class="attr">form</span>=<span class="string">"ngForm"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">app-test-control-value-accessor</span> <span class="attr">name</span>=<span class="string">"message"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-test-control-value-accessor</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> (<span class="attr">click</span>)=<span class="string">"submit(form.value)"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
<ul>
<li>app.component.ts</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'app-root'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  message = <span class="number">5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  submit(value: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://blog.thoughtram.io/angular/2016/07/27/custom-form-controls-in-angular-2.html" target="_blank" rel="noopener">https://blog.thoughtram.io/angular/2016/07/27/custom-form-controls-in-angular-2.html</a></p>
</li>
<li><p><a href="https://almerosteyn.com/2016/04/linkup-custom-control-to-ngcontrol-ngmodel" target="_blank" rel="noopener">https://almerosteyn.com/2016/04/linkup-custom-control-to-ngcontrol-ngmodel</a>  </p>
</li>
<li><p><a href="https://juejin.im/post/597176886fb9a06ba4746d15" target="_blank" rel="noopener">https://juejin.im/post/597176886fb9a06ba4746d15</a></p>
</li>
<li><p><a href="https://github.com/shhdgit/blogs/issues/11" target="_blank" rel="noopener">https://github.com/shhdgit/blogs/issues/11</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
  </entry>
  <entry>
    <title>HTTP 协议入门</title>
    <url>/2020/02/13/http-document/</url>
    <content><![CDATA[<p>HTTP 是 HyperText Transfer Protocol（超文本传输协议）的简写，它是 TCP/IP 协议集中的一个应用层协议，是客户端与服务端进行交互时必须遵循的规则。它用于定义 Web 浏览器与 Web 服务器之间交换数据的过程以及数据本身的格式，底层是靠 TCP 进行可靠地信息传输。</p>
<a id="more"></a>

<p>客户端向服务端发送 HTTP 请求返回的完整过程：</p>
<p><img alt="HTTP 请求返回流程" data-src="http-process.png"></p>
<h3 id="网络模型介绍"><a href="#网络模型介绍" class="headerlink" title="网络模型介绍"></a>网络模型介绍</h3><p><img alt="网络五层模型" data-src="five-layer-model.png"></p>
<p><strong>应用层</strong></p>
<p>应用层决定了向用户提供应用服务时通信的活动，它构建于 TCP 协议之上，HTTP协议也处于该层。</p>
<p>TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP（File Transfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统）服务就是其中两类。</p>
<p><strong>传输层</strong></p>
<p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输，向用户提供可靠的端到端服务，并且传输层向上层屏蔽了下层数据通信的细节。</p>
<p>传输层主要有两个协议: TCP （Transmission Control<br>Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据<br>报协议）。</p>
<p>在更多的情况下，使用的是 TCP 协议，因为它是一个可靠的传输协议。</p>
<p><strong>网络层</strong></p>
<p>网络层，为数据在结点之间传输创建逻辑链路，用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径(所谓的传输路线)到达对方计算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。</p>
<p><strong>数据链路层</strong></p>
<p>数据链路层，在通信的实体间建立数据链路连接。简单地说，就是将两台物理设备通过软件服务（如操作系统，设备驱动）建立起电路上的连接，使两台设备可以传输数据。</p>
<p><strong>物理层</strong></p>
<p>物理层，主要作用是定义物理设备如何传输数据。这里的物理设备，包括电脑硬件，网线等。</p>
<h3 id="HTTP-协议发展历史"><a href="#HTTP-协议发展历史" class="headerlink" title="HTTP 协议发展历史"></a>HTTP 协议发展历史</h3><p><strong>HTTP/0.9</strong></p>
<p>HTTP 于 1990 年问世。那时的 HTTP 并没有作为正式的标准被建立。<br>现在的 HTTP 其实含有 HTTP1.0 之前版本的意思，因此被称为 HTTP/0.9。</p>
<p>该版本极其简单：</p>
<ul>
<li>只有一个命令 GET；</li>
<li>没有 Header 等描述数据的信息；</li>
<li>服务器在发送数据完毕后，就关闭 TCP 连接。</li>
</ul>
<p><strong>HTTP/1.0</strong></p>
<p>HTTP/1.0 版本与 HTTP/0.9 相比，主要有：</p>
<ul>
<li>增加了很多命令，如 POST，PUT，HEAD；</li>
<li>增加了 Status Code 和 Header 相关内容；</li>
<li>增加了多字符集支持、多部分发送(multi-part type)、权限(authorization)、缓存(cache)、内容编码(content encoding)等。</li>
</ul>
<p><strong>HTTP/1.1</strong></p>
<p>HTTP/1.1 是目前主流的 HTTP 版本，有比较完善的功能。</p>
<ul>
<li><p>增加了 PATCH OPTIONS、DELETE 命令。</p>
</li>
<li><p>持久连接，即 TCP 连接默认不关闭，可以被多个请求复用，提高了请求性能。</p>
</li>
<li><p>管道机制(pipeline)，即在同一个 TCP 连接里面，客户端可以同时发送多个请求。例如，浏览器同时发出 A 请求和 B 请求，但是服务器还是按照顺序，先回应 A 请求，完成后再回应 B 请求。</p>
</li>
<li><p>增加 Host 字段，可以将请求发往同一个服务器的不同网站，为虚拟主机打下了基础。这个字段增加的好处就是在同一个物理服务器中可以同时部署多个 Web 服务，这样可以提高物理服务器的使用效率。</p>
</li>
</ul>
<p><strong>HTTP2</strong></p>
<p>HTTP2 目前还没有普及，但肯定是未来的主流。HTTP2 主要解决了传输性能的问题。</p>
<ul>
<li><p>所有数据以二进制传输。在 HTTP/1.1 版本中大部分数据是以文本形式传输，在 HTTP2 版本中，所有数据以二进制传输，统称为“帧”。</p>
</li>
<li><p>多工。因为有了以二进制传输的好处，同一个连接里面发送多个请求不再需要按照顺序来进行返回处理，而是同时返回。在返回第一个请求的同时也可以返回第二个请求，这样它就是一个并行的效率，可以更大限度地让整个 Web 应用的传输效率有一个质的提升。</p>
</li>
<li><p>头信息压缩。在 HTTP/1.1 中，每次发送请求和返回请求，它的 HTTP 头信息总是要完整发送和返回，而这部分头信息内容是以字符串形式保存，所以它占用的带宽量是很大的。而 HTTP2 中，对头信息进行了压缩，减少了对带宽的占用。</p>
</li>
<li><p>服务器推送。HTTP/2 允许服务器未经请求，主动向客户端发送资源。常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析 HTML 源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。</p>
</li>
</ul>
<h3 id="HTTP-三次握手"><a href="#HTTP-三次握手" class="headerlink" title="HTTP 三次握手"></a>HTTP 三次握手</h3><p><img alt="三次握手" data-src="three-way-handshaking.png"></p>
<p>为了准确无误地将数据送达目标处，TCP 协议采用了三次握手 (three-way handshaking) 策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了 TCP 的标志——SYN(synchronize) 和 ACK(acknowledgement)。  </p>
<p>发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。  </p>
<p>通俗点讲，发送端先发送一个数据包给接收端，当接收端收到数据包后就会知道发送端的发送数据功能正常；然后接收端又返回一个数据包给发送端，当发送端接收到数据包后就会知道接收端的发送和接收数据的功能正常；最后发送端再先接收端发送一个数据包，当接收端收到数据包后就会知道发送端的接收数据的功能也正常。这样发送端和接收端的发送和接收数据的功能都正常，就可以可靠地进行数据交互了。</p>
<p>若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p>
<h3 id="URI、URL-和-URN"><a href="#URI、URL-和-URN" class="headerlink" title="URI、URL 和 URN"></a>URI、URL 和 URN</h3><p><strong>URI</strong></p>
<p>URI（统一资源标识符）是 Uniform Resource Identifier 的缩写。它主要用于定位某一类特定的资源而设计，用来唯一标识互联网上的信息资源。它包括 URL 和 URN。</p>
<p><strong>URL</strong></p>
<p>URL（统一资源定位符）是 Uniform Resource Locator 的缩写。它用来找到资源所在的位置，并且去访问和得到资源。</p>
<p>URL 格式：</p>
<p><img alt="URL 的格式" data-src="url-format.png"></p>
<ul>
<li>协议</li>
</ul>
<p>获取资源时要指定协议类型。比如，http、https、ftp 等协议。</p>
<ul>
<li>登录信息（认证）</li>
</ul>
<p>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。这种方式在现在的 Web 应用开发中不太会使用到。如果用户每次访问资源，都需要在 URL 中填写用户名和密码，是很不方便的，也是很安全的做法。</p>
<ul>
<li>服务器地址</li>
</ul>
<p>指定资源所在服务器在互联网中的位置。它可以是 ip 地址，也可以是 DNS 可解析的地址。</p>
<ul>
<li>服务器端口号</li>
</ul>
<p>指定服务器连接的网络端口号。每一台服务器都有很多的端口，在这台服务器上可以运行很多软件的 Web 服务，这些 Web 服务可以监听不同的端口。如果我们要找这台服务器上某一个 Web 服务里面的资源，就要指定要找的是哪个 Web 服务，也就是说端口是用来定位服务器上的某个 Web 服务的。</p>
<ul>
<li>资源路径</li>
</ul>
<p>指定服务器上的文件路径来定位特指的资源。这与 UNIX 系统的文件目录结构相似。</p>
<ul>
<li>查询字符串</li>
</ul>
<p>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。</p>
<ul>
<li>片段标识符</li>
</ul>
<p>使用片段标识符通常可标记出已获取资源中的子资源(文档内的某个位置)。</p>
<p><strong>URN</strong></p>
<p>URN（永久统一资源定位符）是 Uniform Resource Name 的缩写。作为 HTTP 服务，如果某一类资源改变了位置，导致它的 URL 链接无法访问到资源，那么 URN 就解决了这个问题。也就是说，即便是资源改变了位置，通过 URN 还是可以访问到。</p>
<h3 id="HTTP-报文格式"><a href="#HTTP-报文格式" class="headerlink" title="HTTP 报文格式"></a>HTTP 报文格式</h3><p>用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。HTTP 报文大致可分为<strong>报文首部</strong>和<strong>报文主体</strong>两块。两者由最初出现的空行(CR+LF)来划分。通常，并不一定要有报文主体。</p>
<p><strong>请求报文</strong></p>
<p>请求报文是由请求方法、请求 URL、协议版本、可选的请求首部字段和内容实体构成的。</p>
<p><img alt="请求报问文" data-src="request-message.png"></p>
<p><strong>响应报文</strong></p>
<p>响应报文基本上由协议版本、状态码(表示请求成功或失败的数字代码)、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p>
<p><img alt="响应报文" data-src="reponse-message.png"></p>
<h3 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h3><p>HTTP 方法是用来定义对资源的操作，从定义上讲有各自的语义。注意，语义是定义上的，具体的操作需要根据实际情况来。</p>
<p>HTTP/1.0 和 HRTTP/1.1 支持的方法：</p>
<p>| 方法 | 说明 | 支持的 HTTP 协议版本 |<br>| – | – | – | – |<br>|  GET |  获取资源  |   1.0、1.1  |<br>|  POST |  传输实体主体  |   1.0、1.1  |<br>|  PUT |  传输文件  |   1.0、1.1  |<br>|  HEAD |  获得报文首部  |   1.0、1.1  |<br>|  DELETE |  删除文件  |   1.0、1.1  |<br>|  OPTIONS |  询问支持的方法  |  1.1  |<br>|  TRACE |  追踪路径  |  1.1  |<br>|  CONNECT |  要求用隧道协议连接代理  |  1.1  |<br>|  LINK |  建立和资源之间的联系  |  1.0  |<br>|  UNLINE |  断开连接关系  |  1.0  |</p>
<p>其中，LINK 和 UNLINK 已被 HTTP/1.1 废弃，不再使用。</p>
<p><strong>GET: 获取资源</strong></p>
<p>GET 方法用来请求访问已被 URL 识别的资源。指定的资源经服务器端解析后返回响应内容。</p>
<p><strong>POST: 传输实体主体</strong></p>
<p>POST 方法用来传输实体的主体。虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行传输，而是用 POST 方法。虽说POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。</p>
<p><strong>PUT: 传输文件</strong></p>
<p>PUT 方法用来传输文件。就像 FTP 协议的文件，上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URL 指定的位置。  </p>
<p>但是，鉴于 HTTP/1.1 的 PUT 方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的 Web 网站不使用该方法。若配合 Web 应用程序的验证机制，或架构设计采用 REST(REpresentationalState ransfer, 表征状态转移) 标准的同类Web 网站，就可能会开放使用 PUT 方法。</p>
<p><strong>HEAD: 获得报文首部</strong></p>
<p>HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URL 的有效性及资源更新的日期时间等。</p>
<p><strong>DELETE: 删除文件</strong></p>
<p>DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求  URL 删除指定的资源。  </p>
<p>但是，HTTP/1.1 的 DELETE 方法和 PUT 方法一样不带验证机制，所以一般的 Web 网站也不使用 DELETE 方法。当配合 Web 应用程序的验证机制，或遵守 REST 标准时还是有可能会开放使用的。</p>
<p><strong>OPTIONS: 询问支持的方法</strong></p>
<p>OPTIONS 方法用来查询针对请求 URL 指定的资源支持的方法。就是我们常说的，预请求。</p>
<p><strong>TRACE: 追踪路径</strong></p>
<p>TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。  </p>
<p>但是，TRACE 方法本来就不怎么常用，再加上它容易引发 XST（Cross-Site Tracing，跨站追踪）攻击，通常就更不会用到了。</p>
<p><strong>CONNECT: 要求用隧道协议连接代理</strong></p>
<p>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL （Secure Sockets Layer，安全套接层）和 TLS （Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>
<p>CONNECT 的格式：</p>
<blockquote>
<p>CONNECT 代理服务器名称 端口号 HTTP版本</p>
</blockquote>
<h3 id="HTTP-访问控制-CORS"><a href="#HTTP-访问控制-CORS" class="headerlink" title="HTTP 访问控制(CORS)"></a>HTTP 访问控制(CORS)</h3><p><strong>CORS</strong></p>
<p>跨域资源共享(CORS)是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个服务器上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器<strong>不同的域、协议或端口</strong>请求一个资源时，资源会发起一个<strong>跨域 HTTP 请求</strong>。</p>
<p>另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个<strong>预请求</strong>（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。</p>
<p>跨域：指不同域名之间相互访问，浏览器不能执行其他网站的脚本。它是由浏览器的<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">同源策略</a>造成的，是浏览器施加的安全机制。</p>
<p>同域：指同一协议、同一 ip 地址、同一端口，其中有一个不同就会产生跨域。</p>
<p><strong>预请求</strong></p>
<p>预请求必须首先使用 <code>OPTIONS</code> 方法发起一个请求到服务器，以获知服务器是否允许该实际请求。预请求的使用，可以避免跨域请求对服务器的用户数据产生未知的影响。</p>
<p>当满足以下条件时，可以不发送预请求：</p>
<ul>
<li><p>HTTP 方法  </p>
<ul>
<li>GET</li>
<li>HEAD</li>
<li>POST</li>
</ul>
</li>
<li><p>Fetch Standard 定义的 <a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header" target="_blank" rel="noopener">CORS-safelisted request-header</a>。安全的 request-header 如下：  </p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Content-Type（需要注意额外的限制）</li>
<li>DPR</li>
<li>Downlink</li>
<li>Save-Data</li>
<li>Viewport-Width</li>
<li>Width</li>
</ul>
</li>
<li><p>Content-Type 的值仅限于下列三者之一：</p>
<ul>
<li>text/plain</li>
<li>multipart/form-data</li>
<li>application/x-www-form-urlencoded</li>
</ul>
</li>
<li><p>XMLHttpRequestUpload 对象均没有注册任何事件监听器（不常用）。</p>
</li>
<li><p>请求中没有使用 ReadableStream 对象（不常用）。</p>
</li>
</ul>
<p>这些跨域请求与浏览器发出的其他跨域请求一样。如果服务器未返回正确的响应首部，则请求方不会收到任何数据。因此，那些不允许跨域请求的网站无需为这一新的 HTTP 访问控制特性担心。  </p>
<p><strong>预请求相关的响应首部字段</strong></p>
<ul>
<li>Access-Control-Allow-Origin</li>
</ul>
<p>Access-Control-Allow-Origin 响应首部字段，表明服务器允许访问资源的域。其语法如下：</p>
<blockquote>
<p>Access-Control-Allow-Origin: [origin] | *  </p>
</blockquote>
<p>其中，origin 参数的值指定了允许访问该资源的外域 URI。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为 “*”，表示允许来自所有域的请求。</p>
<ul>
<li>Access-Control-Allow-Headers</li>
</ul>
<p>Access-Control-Allow-Headers 响应首部字段用于预请求的响应，指明了实际请求中允许携带的首部字段。其语法如下：</p>
<blockquote>
<p>Access-Control-Allow-Headers: [field-name]（自定义的请求头） | *</p>
</blockquote>
<p>当有多个请求头时，使用逗号分隔。</p>
<ul>
<li>Access-Control-Expose-Headers</li>
</ul>
<p>在跨域访问时，XMLHttpRequest 对象的 getResponseHeader() 方法只能拿到一些最基本的响应头，如 Cache-Control、Content-Language、Content-Type、Expires、Last-Modified 等，如果要访问其他头，则需要服务器设置响应头。</p>
<p>Access-Control-Expose-Headers 响应首部字段让服务器把允许浏览器访问的头放入白名单，例如：</p>
<blockquote>
<p>Access-Control-Expose-Headers: X-My-Count, X-My-Title</p>
</blockquote>
<ul>
<li>Access-Control-Allow-Methods</li>
</ul>
<p>Access-Control-Allow-Methods 响应首部字段用于预请求的响应，指明了实际请求所允许使用的 HTTP 方法。其语法如下：</p>
<blockquote>
<p>Access-Control-Allow-Methods: [method] | *</p>
</blockquote>
<p>当有多个方法时，用逗号分隔。</p>
<ul>
<li>Access-Control-Max-Age   </li>
</ul>
<p>Access-Control-Max-Age 响应首部字段指定了预请求的结果能够被缓存多久。在有效时间内，浏览器无须为同一请求再次发起预请求。请注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。其语法如下：</p>
<blockquote>
<p>Access-Control-Max-Age: [detla-seconds]</p>
</blockquote>
<p>detla-seconds 参数表示预请求的结果在多少秒内有效。</p>
<ul>
<li>Access-Control-Allow-Credentials</li>
</ul>
<p>Access-Control-Allow-Credentials 响应首部字段指定了当浏览器的 credentials 设置为 true 时是否允许浏览器读取 response 的内容。当用在对预请求的响应中时，它指定了实际的请求是否可以使用 credentials。请注意：简单 GET 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。</p>
<h3 id="可缓存性"><a href="#可缓存性" class="headerlink" title="可缓存性"></a>可缓存性</h3><p>HTTP/1.1 定义的 <code>Cache-Control</code> 头用来区分对缓存机制的支持情况，请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。</p>
<p><strong>公共缓存 public</strong></p>
<blockquote>
<p>Cache-Control: public  </p>
</blockquote>
<p>“public” 表示 HTTP 请求在返回的过程中，所经过的任何路径（比如中间代理、CDN等）都可以对响应的内容进行缓存。</p>
<p><strong>私有缓存 private</strong></p>
<blockquote>
<p>Cache-Control: private</p>
</blockquote>
<p>“private” 表示响应内容只有发起请求的那个浏览器可缓存。</p>
<p><strong>强制确认缓存 no-cache</strong></p>
<blockquote>
<p>Cache-Control: no-cache  </p>
</blockquote>
<p>“no-cache” 表示每次有请求发出时，缓存会将此请求发到服务器，服务器端会验证请求中所描述的缓存是否过期，若未过期，则缓存才使用本地缓存副本。使用 no-cache 指令的目的是为了防止从缓存中返回过期的资源。</p>
<p><strong>禁止进行缓存 no-store</strong></p>
<blockquote>
<p>Cache-Control: no-store</p>
</blockquote>
<p>“no-store” 表示缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。</p>
<p><strong>缓存过期机制 max-age</strong></p>
<blockquote>
<p>Cache-Control: max-age=[seconds]</p>
</blockquote>
<p>过期机制中，最重要的指令是 “max-age=<seconds>“，表示资源能够被缓存的最大时间。</seconds></p>
<p><strong>缓存验证确认 must-revalidate</strong></p>
<p>“must-revalidate” 表示在设置了 max-age 的缓存中，必须先从服务端重新请求资源，以验证缓存是否真的过期了，而不能直接使用本地的缓存。</p>
<h3 id="缓存验证"><a href="#缓存验证" class="headerlink" title="缓存验证"></a>缓存验证</h3><p>当缓存的文档过期后，需要进行缓存验证或者重新获取资源。只有在服务器返回强校验器或者弱校验器时才会进行验证。</p>
<p><strong>Last Modified</strong></p>
<p>Last-Modified（上次修改时间）响应头可以作为一种弱校验器，通过对比上次修改时间以验证资源是否需要更新。说它弱是因为它只能精确到一秒。如果响应头里含有这个信息，客户端可以在后续的请求中带上 <code>If-Modified-Since</code> 或 <code>If-Unmodified-Since</code> 来验证缓存。</p>
<p><strong>ETag</strong></p>
<p>ETag 是缓存的一种强校验器，主要通过数据签名进行资源验证，最典型的做法是对资源进行哈希值计算。如果资源请求的响应头里含有 ETag，客户端可以在后续的请求的头中带上 <code>If-Match</code> 或 <code>If-None-Match</code> 头来验证缓存。</p>
<p>最后，当客户端向服务端发起缓存校验的请求时，服务端会返回 <code>200 ok</code> 表示返回正常的结果或者 <code>304 Not Modified</code>（不返回 body）表示浏览器可以使用本地缓存文件。304 的响应头也可以同时更新缓存文档的过期时间。</p>
<h3 id="HTTP-Cookie"><a href="#HTTP-Cookie" class="headerlink" title="HTTP Cookie"></a>HTTP Cookie</h3><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下一次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p>
<p>Cookie 主要用于以下三个方面：</p>
<ul>
<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>
<li>个性化设置（如用户自定义设置、主题等）</li>
<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>
</ul>
<p>Cookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销。</p>
<p><strong>设置 Cookie</strong></p>
<p>当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 Set-Cookie 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。</p>
<p>服务器使用 Set-Cookie 响应头部向用户代理（一般是浏览器）发送 Cookie 信息，告知客户端保存 Cookie 信息。其语法如下：</p>
<blockquote>
<p>Set-Cookie: [cookie name]= [value]</p>
</blockquote>
<p>Cookie 是以键值对形式存在的，可以同时设置多个，以逗号分隔。</p>
<p><strong>Cookie 属性</strong></p>
<ul>
<li>max-age  </li>
</ul>
<p>设置 Cookie 有效期，单位秒。例如：</p>
<blockquote>
<p>Set-Cookie: id=123; max-age=200</p>
</blockquote>
<ul>
<li>expires  </li>
</ul>
<p>设置 Cookie 过期时间。例如：</p>
<blockquote>
<p>Set-Cookie: id=123; expires=Wed, 21 Oct 2015 07:28:00 GMT;</p>
</blockquote>
<ul>
<li>secure</li>
</ul>
<p>Cookie 的 secure 属性用于限制 Web 页面仅在 HTTPS 安全连接时，<br>才可以发送Cookie。其语法如下：</p>
<blockquote>
<p>Set-Cookie: id=123; secure</p>
</blockquote>
<ul>
<li>HttpOnly</li>
</ul>
<p>Cookie 的 HttpOnly 属性是 Cookie 的扩展功能，它使 JavaScript 脚本的 Document.cookie API 无法获得 Cookie。其主要目的为防止跨站脚本攻击（Cross-sitescripting，XSS）对 Cookie 的信息窃取。其语法如下：</p>
<blockquote>
<p>Set-Cookie: id=123; HttpOnly</p>
</blockquote>
<ul>
<li>domain</li>
</ul>
<p>domain 标识指定了哪些主机可以接受  Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。比如，当指定 example.com 后，除 example.com 以外，<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 或 www2.example.com 等都可以发送 Cookie。其语法如下：</p>
<blockquote>
<p>Set-Cookie: id=123; domain=example.com</p>
</blockquote>
<h3 id="HTTP-持久连接"><a href="#HTTP-持久连接" class="headerlink" title="HTTP 持久连接"></a>HTTP 持久连接</h3><p>为解决上述 TCP 连接的问题，HTTP/1.1 和一部分的 HTTP/1.0 想出了持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse）的方法。持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</p>
<p>持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相应提高了。</p>
<p>在 HTTP/1.1 中，所有的连接默认都是持久连接。响应头格式如下：</p>
<blockquote>
<p>Connection: keep-alive | close</p>
</blockquote>
<h3 id="数据协商"><a href="#数据协商" class="headerlink" title="数据协商"></a>数据协商</h3><p>数据协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。数据协商会以响应资源的语言、字符集、编码方式等作为判断的基准。</p>
<p>请求报文和响应报文中的某些首部字段可以作为判断基准，字段分为请求和返回两类。</p>
<p><strong>请求类</strong></p>
<ul>
<li><p>Accept：用户代理（浏览器）可处理的数据类型。</p>
</li>
<li><p>Accept-Charset：用户代理（浏览器）可接受的字符集。</p>
</li>
<li><p>Accept-Encoding：用户代理（浏览器）可接受的数据编码方式，主要限制服务端如何进行数据压缩。</p>
</li>
<li><p>Accept-Language：用户代理（浏览器）可接受的自然语言类型。</p>
</li>
<li><p>User-Agent：HTTP 客户端程序的信息.</p>
</li>
</ul>
<p><strong>返回类</strong></p>
<ul>
<li><p>Content-Type：响应内容的数据类型。</p>
</li>
<li><p>Content-Encoding：响应内容的编码方式。</p>
</li>
<li><p>Content-Language：响应内容的自然语言类型。</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>HTTP 技术：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title>Widows 环境下安装 ElasticSearch 并配置 ElasticSearch Head</title>
    <url>/2020/02/08/elasticsearch-setup/</url>
    <content><![CDATA[<p>本文主要讲述 Windows 环境下的 ElasticSearch 的单例安装和分布式安装。</p>
<a id="more"></a>

<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>JDK 1.8 以上</li>
<li>ElasticSearch 7.0 以上  </li>
</ul>
<p>ElasticSearch 安装包下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p>
<p><img alt="ES 下载地址" data-src="es-download.png"></p>
<h3 id="ElasticSearch-单机安装"><a href="#ElasticSearch-单机安装" class="headerlink" title="ElasticSearch 单机安装"></a>ElasticSearch 单机安装</h3><p>ElasticSearch 安装包下载完成后，进行解压，然后在进入文件夹，找到 <code>bin</code> 目录下 <code>elasticsearch.bat</code> 文件，双击启动。  </p>
<p>启动完成后，在浏览器中访问 <code>http://localhost:9200/</code> 地址，出现下面的内容，则表示成功。</p>
<p><img alt="ES 成功安装信息" data-src="es-setup-info.png"></p>
<h3 id="配置-ElasticSearch-Head"><a href="#配置-ElasticSearch-Head" class="headerlink" title="配置 ElasticSearch Head"></a>配置 ElasticSearch Head</h3><p>ElasticSearch Head 是 ElasticSearch 的一个可视化界面工具。</p>
<p>下载与配置详情见 Gituhb 地址：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a></p>
<p>这里我推荐 <code>Running as a Chrome extension</code>，配置比较方便且不用下载压缩包。 </p>
<p><img alt="head 插件" data-src="head-chrome-extension.png"></p>
<p>注意，因为 ElasticSearch Head 和 ElasticSearch 是两个独立的工具，它们之间的访问是有跨域问题的，所以不管使用哪种方式配置 ElasticSearch Head，都要在 ElasticSearch 配置文件 <code>elasticsearch.yml</code> 末尾添加如下代码，以解决跨域问题：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span></pre></td></tr></table></figure>
<p>可以放开 <code>cluster.name</code>，<code>node.name</code>，<code>http.port</code> 的注释，自定义 ElasticSearch 信息，保存后重启 ElasticSearch。</p>
<p>最后，打开 ElasticSearch Head，连接 ElasticSearch，如图：</p>
<p><img alt="ElasticSearch 单例安装" data-src="es-single.png"></p>
<h3 id="ElasticSearch-分布式安装"><a href="#ElasticSearch-分布式安装" class="headerlink" title="ElasticSearch 分布式安装"></a>ElasticSearch 分布式安装</h3><p>首先，将 ElasticSearch 解压后的文件复制两份，并且确保两份文件是完全干净的，没有做过任何更改。不然，搭建完成后，会出现莫名的异常。</p>
<p><strong>主节点配置</strong></p>
<p>选择一个 ElasticSearch 文件作为主节点（Master），打开配置文件 <code>elasticsearch.yml</code>，做如下更改。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群名字</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">es</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 节点名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">master</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 网络绑定</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 设置对外服务的http端口，默认为9200</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 手动指定可以成为 mater 的所有节点的 name 或者 ip</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["127.0.0.1"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 跨域</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span></pre></td></tr></table></figure>
<p>保存配置文件，并启动主节点。</p>
<p><strong>从节点配置</strong></p>
<p>将剩下的两个文件作为 ElasticSearch 集群的从节点（Slave），我这里分别命名为 node-1 和 node-2。</p>
<p>从节点的配置基本相同，只是节点名称和端口需要修改。这里以 <code>node-1</code> 的配置为例，打开配置文件 <code>elasticsearch.yml</code>，做如下更改。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群名称，处于同一个集群所有节点，该名称必须相同</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">es</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 节点名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 是否可以成为master节点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 是否允许该节点存储数据,默认开启</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 网络绑定,这里我绑定 0.0.0.0,支持外网访问</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">http.port:</span> <span class="number">8200</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 支持跨域访问</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 集群发现，指定 master 节点的 ip 地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["127.0.0.1"]</span></span></pre></td></tr></table></figure>

<p>配置完成后，启动各节点，使用 ElasticSearch Head 工具查看集群信息，出现如图内容，说明集群搭建成功。</p>
<p><img alt="ElasticSearch 集群" data-src="es-discovery.png"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>之前查阅 ElasticSearch 集群搭建的相关文章的时候，有些文章提到了这个配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> <span class="string">["127.0.0.1"]</span></span></pre></td></tr></table></figure>

<p>但是这里没有使用，后面我通过查阅 ES 7.0.0 的官方文档： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/discovery-settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/discovery-settings.html</a>   </p>
<p>文档内容如下：</p>
<p><img alt="集群发现" data-src="discovery-info.png"></p>
<p>意思是，集群发现(Discovery)有关的配置主要使用 <code>discovery.seed_hosts</code> 和 <code>cluster.initial_master_nodes</code> 完成。</p>
<p>像 <code>discovery.zen.ping.unicast.hosts</code> 可能是 ElaticSearch 低版本中使用。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html" target="_blank" rel="noopener">ElasticSearch 官方文档</a></p>
<p><a href="https://www.jianshu.com/p/149a8da90bbc" target="_blank" rel="noopener">ElasticSearch 集群搭建及参数详解</a></p>
<p><a href="https://kalasearch.cn/blog/elasticsearch-tutorial/" target="_blank" rel="noopener">ElasticSearch 教程</a></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 ElasticSearch （7.x 版本）搜索引擎</title>
    <url>/2020/02/08/springboot-elasticsearch/</url>
    <content><![CDATA[<p>ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 语言开发的，并作为 Apache 许可条款下的开放源码发布，是一种流行的企业级搜索引擎。ElasticSearch 用于云计算中，能够达到实时搜索、稳定、可靠、快速、安装使用方便。官方客户端在 Java、.NET、PHP、Python、Apache Groovy、Ruby 和许多其他语言中都是可用的。  </p>
<a id="more"></a>

<p>本文主要讲述了 Spring Boot 如何集成 ElasticSearch 搜索引擎，并使用 ElasticSearch 官方提供的 <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.5/java-rest-high.html" target="_blank" rel="noopener">Java High Level REST Client</a> 进行 Java 客户端操作。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>ElasticSearch 7.5.1</li>
<li>Spring Boot 2.1.9</li>
</ul>
<p>首先需要安装 ElasticSearch 环境，并且最好安装一个 ElasticSearch 可视化界面（这里推荐 ElasticSearch Head 插件）便于我们查看数据。  </p>
<p>ElasticSearch 和 ElasticSearch Head 安装可以参考本人写的这篇博客：<a href="https://blog.csdn.net/oschina_41790905/article/details/104166069" target="_blank" rel="noopener">Widows 环境下安装 ElasticSearch 并配置 ElasticSearch Head 插件</a></p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在 pom.xml 文件中，添加  ElasticSearch 提供的 <code>Java High Level REST Client</code> 相关依赖。  </p>
<p><strong>注意</strong>：在添加 ElasticSearch 相关依赖时，一定要指明版本号。如果不指定版本号，会直接继承 Spring Boot 的版本号，这样会导致与 ElasticSearch 的版本不一致，而出现错误。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ElasticSearch High Level Client --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ./ ElasticSearch High Level Client --&gt;</span></span></pre></td></tr></table></figure>
<h3 id="配置-RestHighLevelClient"><a href="#配置-RestHighLevelClient" class="headerlink" title="配置 RestHighLevelClient"></a>配置 RestHighLevelClient</h3><p>这里进行 RestHighLevelClient 配置，用于操作 ElasticSearch。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * EsRestHighLevelClient</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsRestHighLevelClientConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.elasticsearch.rest.scheme&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String scheme;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.elasticsearch.rest.ip-address&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> List&lt;String&gt; ipAddressList;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(<span class="keyword">this</span>.createHttpHost()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 创建 HttpHost 对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 HttpHost 对象数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> HttpHost[] createHttpHost() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Asserts.check(!CollectionUtils.isEmpty(ipAddressList), <span class="string">"ElasticSearch cluster ip address cannot empty"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        HttpHost[] httpHosts = <span class="keyword">new</span> HttpHost[ipAddressList.size()];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = ipAddressList.size(); i &lt; len; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String ipAddress = ipAddressList.get(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String[] values = ipAddress.split(<span class="string">":"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            String ip = values[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> port = Integer.parseInt(values[<span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 创建 HttpHost</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            httpHosts[i] = <span class="keyword">new</span> HttpHost(ip, port, scheme);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> httpHosts;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="编写-ElaticSearch-相关-API"><a href="#编写-ElaticSearch-相关-API" class="headerlink" title="编写 ElaticSearch 相关 API"></a>编写 ElaticSearch 相关 API</h3><ul>
<li>索引创建</li>
</ul>
<p>ElaticSearch 7.x 的版本中已经废弃了 mapping，弃用了 type，也就是一个 index 相当于一个表。  </p>
<p>详情见官方文档关于<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html" target="_blank" rel="noopener">映射类型</a>去除部分。以下是关于 ElaticSearch 7.x 的映射类型描述：<br><img alt="映射类型" data-src="https://img-blog.csdnimg.cn/20200206185302377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29zY2hpbmFfNDE3OTA5MDU=,size_16,color_FFFFFF,t_70"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * 创建 ES 索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * <span class="doctag">@param</span> index      索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * <span class="doctag">@param</span> properties 文档属性集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回 true，表示创建成功</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  * <span class="doctag">@throws</span> IOException</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createIndex</span><span class="params">(String index, Map&lt;String, Map&lt;String, Object&gt;&gt; properties)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    XContentBuilder builder = XContentFactory.jsonBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// ES 7.0 后的版本中，已经弃用 type</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    builder.startObject()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .startObject(<span class="string">"mappings"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .field(<span class="string">"properties"</span>, properties)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .endObject()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .startObject(<span class="string">"settings"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .field(<span class="string">"number_of_shards"</span>, DEFAUT_SHARDS)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .field(<span class="string">"number_of_replicas"</span>, DEFAUT_REPLICAS)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .endObject()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .endObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(index).source(builder);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    CreateIndexResponse response = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> response.isAcknowledged();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>判断索引是否存在</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 判断索引是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回 true，表示存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExistIndex</span><span class="params">(String index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    getIndexRequest.local(<span class="keyword">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    getIndexRequest.humanReadable(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    getIndexRequest.includeDefaults(<span class="keyword">false</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>删除索引</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 删除索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回 true，表示删除成功</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteIndex</span><span class="params">(String index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AcknowledgedResponse response = restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (ElasticsearchException exception) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (exception.status() == RestStatus.NOT_FOUND) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"Not found index: "</span> + index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> exception;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>保存文档</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 保存文档</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * &lt;p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 如果文档存在，则更新文档；如果文档不存在，则保存文档。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> document 文档数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String index, ElasticSearchDocument&lt;?&gt; document)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    indexRequest.id(document.getId());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    indexRequest.source(JSON.toJSONString(document.getData()), XContentType.JSON);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 保存文档数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 批量保存文档</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * &lt;p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 如果集合中有些文档已经存在，则更新文档；不存在，则保存文档。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> index        索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> documentList 文档集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(String index, List&lt;ElasticSearchDocument&lt;?&gt;&gt; documentList)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(documentList)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 批量请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    documentList.forEach(doc -&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bulkRequest.add(<span class="keyword">new</span> IndexRequest(index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .id(doc.getId())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .source(JSON.toJSONString(doc.getData()), XContentType.JSON));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>删除文档</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 根据文档 ID 删除文档</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> id    文档 ID</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String index, String id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(index, id);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 根据查询条件删除文档</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> index        索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryBuilder 查询条件构建器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByQuery</span><span class="params">(String index, QueryBuilder queryBuilder)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    DeleteByQueryRequest deleteRequest = <span class="keyword">new</span> DeleteByQueryRequest(index).setQuery(queryBuilder);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    deleteRequest.setConflicts(<span class="string">"proceed"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    restHighLevelClient.deleteByQuery(deleteRequest, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 根据文档 ID 批量删除文档</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> index  索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> idList 文档 ID 集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(String index, List&lt;String&gt; idList)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(idList)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    idList.forEach(id -&gt; bulkRequest.add(<span class="keyword">new</span> DeleteRequest(index, id)));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>获取文档</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 根据索引和文档 ID 获取数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> id    文档 ID</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;   数据类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@return</span> T    返回 T 类型的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String index, String id, Class&lt;T&gt; resultType)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    GetRequest getRequest = <span class="keyword">new</span> GetRequest(index, id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    GetResponse response = restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String resultAsString = response.getSourceAsString();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> JSON.parseObject(resultAsString, resultType);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 条件查询</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> index         索引</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> sourceBuilder 条件查询构建起</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;           数据类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@return</span> T 类型的集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">searchByQuery</span><span class="params">(String index, SearchSourceBuilder sourceBuilder, Class&lt;T&gt; resultType)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 构建查询请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(index).source(sourceBuilder);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 获取返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SearchResponse response = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SearchHit[] hits = response.getHits().getHits();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建空的查询结果集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;T&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;(hits.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 以字符串的形式获取数据源</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        String sourceAsString = hit.getSourceAsString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        results.add(JSON.parseObject(sourceAsString, resultType));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> results;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><ul>
<li>使用 Postman 调用接口 POST <code>http://localhost:8080/api/users/batch</code> 向 ElasticSearch 中插入 2 条测试数据：</li>
</ul>
<p><img alt="es-save-data" data-src="save-data.png"></p>
<ul>
<li>使用可视化插件 ElasticSearch Head 查看数据：</li>
</ul>
<p><img alt="es-head-show" data-src="data-show.png"></p>
<ul>
<li><p>根据 ID 获取数据：<br><img alt="es-get-id" data-src="get-id.png"></p>
</li>
<li><p>根据 name 获取数据：<br><img alt="es-get-name" data-src="get-name.png"></p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.5/java-rest-high.html" target="_blank" rel="noopener">ElasticSearch Java Rest Client</a></p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">ElasticSearch Reference</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1522132" target="_blank" rel="noopener">Spring Boot 实战之 NoSQL 整合(ElasticSearch 7.3 版本)</a></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>由于自身能力有限，若有错误或者不当之处，还请大家批评指正，一起学习交流！</p>
<p>GitHub 源码地址：<a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-elasticsearch" target="_blank" rel="noopener">springboot-elasticsearch</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 Ehcache 实现缓存机制</title>
    <url>/2020/01/05/springboot-ehcache/</url>
    <content><![CDATA[<p>Ehcache 是一个用 Java 实现的使用简单，高速，实现线程安全的缓存管理类库，Ehcache 提供了用内存，磁盘文件存储，以及分布式存储方式等多种灵活的 cache 管理方案，采用限制比较宽松的 Apache License V2.0 作为授权方式。Ehcache 从 Hibernate 发展而来，逐渐覆盖了 Cache 界的所有功能，是当前成长趋向不错的一个项目。它具有快速、简单易用、低消耗、强扩展性、依赖性低、支持缓存或元素的失效、支持对象或序列化缓存、支持内存缓存和磁盘缓存、提供了 FIFO、LRU、LFU 缓存策略、采用分布式缓存机制等特点。</p>
<a id="more"></a>

<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在 pom.xml 文件中加入 <code>spring-boot-starter-cache</code> 和  <code>ehcache</code> 依赖包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring 的缓存依赖，使用 spring 缓存机制必须加入的依赖--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--集成 ehcache 需要的依赖--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="创建-Ehcache-配置文件"><a href="#创建-Ehcache-配置文件" class="headerlink" title="创建 Ehcache 配置文件"></a>创建 Ehcache 配置文件</h3><p>在资源文件(resource)目录下创建 <code>ehcache.xml</code> 配置文件，进行 Ehcache 的配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--默认的 ehcache 缓存配置--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span> /&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--指定缓存空间名称--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"user"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">           <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"5"</span> // 设置缓存有效时间为 <span class="attr">5</span> 秒</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">           <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">    /&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span></pre></td></tr></table></figure>
<h3 id="配置-application-properties-文件"><a href="#配置-application-properties-文件" class="headerlink" title="配置 application.properties 文件"></a>配置 application.properties 文件</h3><p>在 application.properties 文件中，配置 ehcache.xml 文件的加载路径。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ehcache 缓存配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.cache.ehcache.config</span>=<span class="string">classpath:config/ehcache.xml</span></span></pre></td></tr></table></figure>

<h3 id="Ehcache-配置文件参数说明"><a href="#Ehcache-配置文件参数说明" class="headerlink" title="Ehcache 配置文件参数说明"></a>Ehcache 配置文件参数说明</h3><p>name：缓存名称。  </p>
<p>maxElementsInMemory：缓存最大数目  </p>
<p>maxElementsOnDisk：硬盘最大缓存个数。   </p>
<p>eternal：对象是否永久有效，一旦设置了，timeout 将不起作用。  </p>
<p>overflowToDisk：是否保存到磁盘，当系统宕机时，会存入本地磁盘。 </p>
<p>timeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当 eternal=false 对象不是永久有效时使用，可选属性，默认值是 0，也就是可闲置时间无穷大。  </p>
<p>timeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。<br>最大时间介于创建时间和失效时间之间。仅当 eternal=false 对象不是永久有效时使用，默认是 0，也就是对象存活时间无穷大。  </p>
<p>diskPersistent：是否缓存虚拟机重启期数据。  </p>
<p>diskSpoolBufferSizeMB：这个参数设置 DiskStore（磁盘缓存）的缓存区大小。默认是 30MB。每个 Cache 都应该有自己的一个缓冲区。</p>
<p>diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是 120 秒。  </p>
<p>memoryStoreEvictionPolicy：当达到 maxElementsInMemory 限制时，Ehcache 将会根据指定的策略去清理内存。默认策略是 LRU（最近最少使用）。你可以设置为 FIFO（先进先出）或是 LFU（较少使用）。  </p>
<p>clearOnFlush：内存数量最大时是否清除。</p>
<p>memoryStoreEvictionPolicy：缓存策略，可选策略有:   </p>
<ul>
<li><p>FIFO(First In First Out)，这个是大家最熟的，先进先出。 </p>
</li>
<li><p>LFU(Less Frequently Used)，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。  </p>
</li>
<li><p>LRU(Least Recently Used)，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。 </p>
</li>
</ul>
<h3 id="开启缓存支持"><a href="#开启缓存支持" class="headerlink" title="开启缓存支持"></a>开启缓存支持</h3><p>在 SpringBoot 应用主类上添加 <code>@EnableCaching</code> 开启缓存支持，进行自动扫描。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EhcacheApplication</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SpringApplication.run(EhcacheApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>模拟数据库数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 数据工厂，模拟数据库的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataFactory</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;UserDTO&gt; userDtoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 初始化集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        userDtoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDTO user = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user = <span class="keyword">new</span> UserDTO();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setName(<span class="string">"star"</span> + i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setAge(<span class="number">23</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            userDtoList.add(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;UserDTO&gt; <span class="title">getUserDaoList</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userDtoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="编写业务代码"><a href="#编写业务代码" class="headerlink" title="编写业务代码"></a>编写业务代码</h3><ul>
<li>编写 DAO 层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserRepository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 获取用户信息(此处是模拟的数据)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">getUserByName</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDTO user = getUserFromList(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 从模拟的数据集合中筛选 username 的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> UserDTO <span class="title">getUserFromList</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;UserDTO&gt; userDaoList = DataFactory.getUserDaoList();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (UserDTO user : userDaoList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (Objects.equals(user.getName(), username)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>编写 Service 层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserService</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"user"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cacheable</span>(key = <span class="string">"#name"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">getUser</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDTO user = userRepository.getUserByName(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>由于在上一篇 <a href="../springboot-cache">springboot-cache</a> 已经对缓存用法做了详细说明，这里就简单介绍一下：</p>
<ul>
<li><p><code>@Cacheable</code>: 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。</p>
</li>
<li><p><code>@CachePut</code>：配置于方法上时，能够根据参数定义条件来进行缓存，其与 @Cacheable 不同的是，它不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中，所以主要用于数据新增和修改操作上。</p>
</li>
<li><p><code>@CacheEvict</code>：配置于方法上时，表示从缓存中移除相应数据。</p>
</li>
<li><p>编写 Controller 层</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserResource</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserService userService;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/users/&#123;name&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDTO&gt; <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDTO user = userService.getUser(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>通过多次向接口 <code>http://localhost:8080/api/users/star1</code> GET 数据来观察效果：</p>
<p><img alt="get" data-src="ehcache-get.png"></p>
<p>可以看到缓存的启用和效果如下所示：  </p>
<p><img alt="result" data-src="ehcache-result.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.ehcache.org/" target="_blank" rel="noopener">https://www.ehcache.org/</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 Guava Cache 实现缓存机制</title>
    <url>/2019/12/30/springboot-guava-cache/</url>
    <content><![CDATA[<p>Guava Cache 是一个全内存的本地缓存实现，而且提供了线程安全机制，相比于数据库或 Redis 存储，访问内存中的数据会更加高效。  </p>
<p>Guava 官网介绍，下面的这几种情况可以考虑使用 Guava Cache：</p>
<ul>
<li><p>愿意消耗一些内存空间来提升速度。</p>
</li>
<li><p>预料到某些键会被多次查询。</p>
</li>
<li><p>缓存中存放的数据总量不会超出内存容量。</p>
</li>
</ul>
<p>所以，可以将频繁用到的少量数据存储到 Guava Cache 中，以提高程序性能。下面我们来看看 Guava Cache 具体用法。</p>
<a id="more"></a>

<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在 pom.xml 中添加 <code>spring-boot-starter-cache</code> 和 <code>guava</code> 依赖。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!--guava 依赖--&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;artifactId&gt;guava&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;version&gt;27.0.1-jre&lt;/version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/dependency&gt;</span></pre></td></tr></table></figure>
<h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>模拟数据库的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 数据工厂，模拟数据库的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataFactory</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;UserDto&gt; userDtoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 初始化集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        userDtoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDto user = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user = <span class="keyword">new</span> UserDto();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setName(<span class="string">"star"</span> + i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setAge(<span class="number">23</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            userDtoList.add(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;UserDto&gt; <span class="title">getUserDaoList</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userDtoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="创建-Guava-Cache-配置类"><a href="#创建-Guava-Cache-配置类" class="headerlink" title="创建 Guava Cache 配置类"></a>创建 Guava Cache 配置类</h3><p>Guava Cache 配置比较简洁，下面配置了缓存数据的过期时间是 10s，最大缓存容量是 1000 个。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaCacheConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 设置缓存管理器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        GuavaCacheManager cacheManager = <span class="keyword">new</span> GuavaCacheManager();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        cacheManager.setCacheBuilder(CacheBuilder.newBuilder()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 缓存过期时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .expireAfterWrite(<span class="number">10</span>, TimeUnit.SECONDS)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 缓存最大容量是 1000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .maximumSize(<span class="number">1000</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> cacheManager;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>Guava Cache 除了代码中提到的设置缓存过期时间的策略外，还有其他的策略。下面是 Guava Cache 设置缓存过期时间的策略：</p>
<ul>
<li><p>expireAfterAccess: 当缓存项在指定的时间段内没有被读或写就会被回收。</p>
</li>
<li><p>expireAfterWrite：当缓存项在指定的时间段内没有更新就会被回收,如果我们认为缓存数据在一段时间后数据不再可用，那么可以使用该种策略。</p>
</li>
<li><p>refreshAfterWrite：当缓存项上一次更新操作之后的多久会被刷新。</p>
</li>
</ul>
<h3 id="编写业务代码"><a href="#编写业务代码" class="headerlink" title="编写业务代码"></a>编写业务代码</h3><ul>
<li>编写 DAO 层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserRepository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 获取用户信息(此处是模拟的数据)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUserByName</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDto user = getUserFromList(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 从模拟的数据集合中筛选 username 的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> UserDto <span class="title">getUserFromList</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;UserDto&gt; userDaoList = DataFactory.getUserDaoList();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (UserDto user : userDaoList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (Objects.equals(user.getName(), username)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>编写 Service 层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserService</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"guavaCache"</span>) <span class="comment">// 声明缓存的名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cacheable</span>(key = <span class="string">"#name"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUserByName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"从数据库中获取数据，而不是读取缓存"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userRepository.getUserByName(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>由于在上一篇 <a href="../springboot-cache">springboot-cache</a> 已经对缓存用法做了详细说明，这里就简单介绍一下：</p>
<ul>
<li><p><code>@Cacheable</code>: 主要针对方法配置，能够根据方法的请求参数对其结果进行缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。</p>
</li>
<li><p><code>@CachePut</code>：配置于方法上时，能够根据参数定义条件来进行缓存，其与 @Cacheable 不同的是，它不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中，所以主要用于数据新增和修改操作上。</p>
</li>
<li><p><code>@CacheEvict</code>：配置于方法上时，表示从缓存中移除相应数据。</p>
</li>
<li><p>编写 Controller 层</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserResource</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserService userService;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> CacheManager cacheManager;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/users/&#123;name&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDto&gt; <span class="title">getUser</span><span class="params">(@PathVariable String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"=================="</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDto user = userService.getUserByName(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(cacheManager.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>通过多次向接口 <code>http://localhost:8080/api/users/star1</code> GET 数据来观察效果：</p>
<p><img alt="get" data-src="guava-cacheget.png"></p>
<p>可以看到缓存的启用和效果如下所示：  </p>
<p><img alt="result" data-src="guava-cache-result.png"></p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-guava-cache" target="_blank" rel="noopener">springboot-guava-cache</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 缓存技术</title>
    <url>/2019/12/30/springboot-cache/</url>
    <content><![CDATA[<p>Spring 定义 CacheManager 和 Cache 接口用来统一不同的缓存技术。例如 JCache、 EhCache、 Hazelcast、 Guava、 Redis 等。在使用 Spring 集成 Cache 的时候，我们需要注册实现的 CacheManager 的 Bean。Spring Boot 默认使用的是 SimpleCacheConfiguration，即使用 ConcurrentMapCacheManager 来实现的缓存。</p>
<a id="more"></a>

<h3 id="CacheManager：缓存管理器，管理各种缓存组件"><a href="#CacheManager：缓存管理器，管理各种缓存组件" class="headerlink" title="CacheManager：缓存管理器，管理各种缓存组件"></a>CacheManager：缓存管理器，管理各种缓存组件</h3><table>
<thead>
<tr>
<th>CacheManager</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SimpleCacheManager</td>
<td>使用检点 Collection 来存储缓存，主要用于测试</td>
</tr>
<tr>
<td>ConcurrentMapCacheManager</td>
<td>使用 ConcurrentMap 存储缓存</td>
</tr>
<tr>
<td>NoOpCacheManager</td>
<td>仅用于测试，不会实际存储缓存</td>
</tr>
<tr>
<td>EhCacheCacheManager</td>
<td>使用 EhCache 作为缓存技术</td>
</tr>
<tr>
<td>GuavaCacheManager</td>
<td>使用 Guava 作为缓存技术</td>
</tr>
<tr>
<td>HazelcastCacheManager</td>
<td>使用 Hazelcast 作为缓存技术</td>
</tr>
<tr>
<td>JCacheCacheManager</td>
<td>支持 JCache（JSR-107）标准的实现作为缓存技术</td>
</tr>
<tr>
<td>RedisCacheManager</td>
<td>使用 Redis 作为缓存技术</td>
</tr>
</tbody></table>
<h3 id="Cache-注解详解"><a href="#Cache-注解详解" class="headerlink" title="Cache 注解详解"></a>Cache 注解详解</h3><ul>
<li><p><strong>@CacheConfig</strong>：主要用于配置该类中会用到的一些共用的缓存配置。<br>在这里 @CacheConfig(cacheNames = “users”)：配置了该数据访问对象中返回的内容将存储于名为 users 的缓存对象中，我们也可以不使用该注解，直接通过 @Cacheable 自己配置缓存集的名字来定义。</p>
</li>
<li><p><strong>@Cacheable</strong>：主要针对方法配置，能够根据方法的请求参数对其结果进行缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：</p>
<ul>
<li><p><em>value、cacheNames</em>：两个等同的参数（cacheNames 为Spring 4 新增，作为 value 的别名），用于指定缓存存储的集合名。由于 Spring 4 中新增了 @CacheConfig，因此在 Spring 3 中原本必须有的 value 属性，也成为非必需项了。</p>
</li>
<li><p><em>key</em>：缓存对象存储在 Map 集合中的 key 值，非必需，缺省按照函数的所有参数组合作为 key 值，若自己配置需使用 SpEL表 达式，比如：@Cacheable(key = “#p0”)：使用函数第一个参数作为缓存的 key 值，更多关于 SpEL 表达式的详细内容可参考官方文档。</p>
</li>
<li><p><em>condition</em>：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key = “#p0”, condition = “#p0.length() &lt; 3”)，表示只有当第一个参数的长度小于3的时候才会被缓存，若做此配置上面的AAA用户就不会被缓存，读者可自行实验尝试。</p>
</li>
<li><p><em>unless</em>：另外一个缓存条件参数，非必需，需使用 SpEL 表达式。它不同于 condition 参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对 result 进行判断。</p>
</li>
<li><p><em>keyGenerator</em>：用于指定 key 生成器，非必需。若需要指定一个自定义的 key 生成器，我们需要去实现<code>org.springframework.cache.interceptor.KeyGenerator</code> 接口，并使用该参数来指定。需要注意的是，该参数与 key 是互斥的。</p>
</li>
<li><p><em>cacheManager</em>：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用。</p>
</li>
<li><p><em>cacheResolver</em>：用于指定使用那个缓存解析器，非必需。需通过<br><code>org.springframework.cache.interceptor.CacheResolver</code> 接口来实现自己的缓存解析器，并用该参数指定。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>@CachePut</strong>：配置于方法上，能够根据参数定义条件来进行缓存，它与 @Cacheable 不同的是，它不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入缓存中，所以主要用于数据新增和修改操作上。它的参数与 @Cacheable 类似，具体功能可参考上面对 @Cacheable 参数的解析。</p>
</li>
<li><p><strong>@CacheEvict</strong>：配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同 @Cacheable 一样的参数之外，它还有下面两个参数：</p>
<ul>
<li><p><em>allEntries</em>：非必需，默认为 false。当为 true 时，会移除所有数据。</p>
</li>
<li><p><em>beforeInvocation</em>：非必需，默认为 false，会在调用方法之后移除数据；当为 true 时，会在调用方法之前移除数据。</p>
</li>
</ul>
</li>
</ul>
<h3 id="搭建-Spring-Boot-默认缓存"><a href="#搭建-Spring-Boot-默认缓存" class="headerlink" title="搭建 Spring Boot 默认缓存"></a>搭建 Spring Boot 默认缓存</h3><p><strong>开启缓存支持</strong></p>
<p>在启动类上添加 <code>@EnableCaching</code> 开启缓存支持，进行自动扫描。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span>  <span class="comment">// 开启缓存功能</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheApplication</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		SpringApplication.run(CacheApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>添加 spring-boot-starter-cache 依赖</strong></p>
<p>在 pom.xml 中添加 spring-boot-starter-cache 依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>模拟数据库数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 数据工厂，模拟数据库的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataFactory</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;UserDto&gt; userDtoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 初始化集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        userDtoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDto user = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user = <span class="keyword">new</span> UserDto();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setName(<span class="string">"star"</span> + i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setAge(<span class="string">"2"</span> + i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            userDtoList.add(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;UserDto&gt; <span class="title">getUserDaoList</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userDtoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="编写缓存业务代码"><a href="#编写缓存业务代码" class="headerlink" title="编写缓存业务代码"></a>编写缓存业务代码</h3><ul>
<li>编写 DAO 层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserRepository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 获取用户信息(此处是模拟的数据)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDto user = getUserFromList(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 删除用户信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserDto&gt; <span class="title">deleteUser</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;UserDto&gt; userDaoList = DataFactory.getUserDaoList();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userDaoList.remove(getUserFromList(username));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userDaoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 新增数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserDto&gt; <span class="title">save</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 添加到集合</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;UserDto&gt; userDaoList = DataFactory.getUserDaoList();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (UserDto userDto : userDaoList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 不能重复添加相同数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (Objects.equals(userDto.getName(), username)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> userDaoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDto user = <span class="keyword">new</span> UserDto();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        user.setName(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        user.setAge(<span class="string">"50"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userDaoList.add(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userDaoList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 从模拟的数据集合中筛选 username 的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> UserDto <span class="title">getUserFromList</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;UserDto&gt; userDaoList = DataFactory.getUserDaoList();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (UserDto user : userDaoList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (Objects.equals(user.getName(), username)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>编写 Service 层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserService</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"users"</span>)<span class="comment">// 指定缓存名称，在本类中是全局的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 缓存 key 是 username 的数据到缓存 users 中，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 如果没有指定 key，则方法参数作为 key 保存到缓存中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Cacheable</span>(key = <span class="string">"#username"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"从数据库中获取数据，而不是读取缓存"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userRepository.getUser(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 新增或更新缓存中的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#username"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserDto&gt; <span class="title">save</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userRepository.save(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 从缓存 users 中删除 key 是 username 的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@CacheEvict</span>(key = <span class="string">"#username"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserDto&gt; <span class="title">deleteUser</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"从数据库中删除数据，以及缓存中的数据"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> userRepository.deleteUser(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>编写 Controller 层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * CacheResource</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheResource</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserService userService;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/users/&#123;username&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserDto&gt; <span class="title">getUser</span><span class="params">(@PathVariable String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 获取数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserDto user = userService.getUser(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/users/&#123;username&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;UserDto&gt;&gt; save(<span class="meta">@PathVariable</span> String username) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;UserDto&gt; userDtoList = userService.save(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userDtoList);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/users/&#123;username&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;UserDto&gt;&gt; delete(<span class="meta">@PathVariable</span> String username) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;UserDto&gt; userDtoList = userService.deleteUser(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userDtoList);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>通过多次向接口 <code>http://localhost:8080/api/users/star1</code> GET 数据来观察效果：</p>
<p><img alt="get" data-src="cache-get.png"></p>
<p>可以看到缓存的启用和效果如下所示：</p>
<p><img alt="result" data-src="cache-result.png"></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring 事务管理及失效总结</title>
    <url>/2019/12/19/spring-transaction/</url>
    <content><![CDATA[<p>所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。  </p>
<p>Spring 并不直接管理事务，而是提供了多种事务管理器，他们将事务管理的职责委托给 Hibernate 或者 JTA 等持久化机制所提供的相关平台框架的事务来实现。  </p>
<p> Spring 事务管理器接口： <code>org.springframework.transaction.PlatformTransactionManager</code> ，通过这个接口，Spring 为各个平台如 JDBC(DataSourceTransactionManager)、Hibernate(HibernateTransactionManager)、JPA(JpaTransactionManager) 等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p>
<a id="more"></a>
<h3 id="Spring-事务的分类"><a href="#Spring-事务的分类" class="headerlink" title="Spring 事务的分类"></a>Spring 事务的分类</h3><p>Spring 提供了两种事务管理方式：<strong>声明式事务管理</strong>和<strong>编程式事务管理</strong>。对不同的持久层访问技术，编程式事务提供一致的事务编程风格，通过模板化的操作一致性地管理事务；而声明式事务基于 Spring AOP 实现，却并不需要程序开发者成为 AOP 专家，亦可轻易使用 Spring 的声明式事务管理。</p>
<p><strong>声明式事务</strong></p>
<p>Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>
<p>简单地说，声明式事务是<strong>编程式事务 + AOP 技术</strong>包装，使用注解进行扫包，指定范围进行事务管理。声明式事务管理要优于编程式事务管理，这正是 Spring 倡导的非侵入式的开发方式。  </p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> transactionDemo &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>编程式事务</strong></p>
<p>在 Spring 出现以前，编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中显式调用 beginTransaction()、commit()、rollback() 等事务管理相关的方法，这就是编程式事务管理。  </p>
<p>简单地说，编程式事务就是在代码中显式调用开启事务、提交事务、回滚事务的相关方法，因此代码侵入性较大。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> PlatformTransactionManager transactionManager;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transactionDemo</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TransactionStatus transactionStatus = <span class="keyword">this</span>.transactionManager.getTransaction(<span class="keyword">new</span> DefaultTransactionDefinition());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          </span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">// 提交事务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">this</span>.transactionManager.commit(transactionStatus);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">// 回滚事务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">this</span>.transactionManager.rollback(transactionStatus);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="Spring-事务的原理"><a href="#Spring-事务的原理" class="headerlink" title="Spring 事务的原理"></a>Spring 事务的原理</h3><p>使用 AOP <strong>环绕通知</strong> 和 <strong>异常通知</strong>。  </p>
<p>注意： 在使用 Spring 事务时不能使用 <code>try-catch</code> 进行异常捕获，要将异常抛给外层，使其进行异常拦截，触发事务机制。</p>
<h3 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h3><p>所谓事务的传播行为是指如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。事务传播行为是为了解决业务层方法之间互相调用的事务问题。</p>
<p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>
<p>在 Spring 中有七种事务传播行为， 下面我们就来看看吧。</p>
<p><strong>REQUIRED</strong></p>
<p>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。@Transactional 注解默认使用就是这个事务传播行为。<br>也就是说：</p>
<ul>
<li>如果外部方法没有开启事务的话，REQUIRED 修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</li>
<li>如果外部方法开启事务并且被 REQUIRED 的话，所有 REQUIRED 修饰的内部方法和外部方法均属于同一事务，只要一个方法回滚，整个事务均回滚。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methoA</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassB classB = <span class="keyword">new</span> ClassB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        classB.methodB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>使用 REQUIRED 传播行为修饰的 methodA() 和 methodB() 的话，两者使用的就是同一个事务，只要其中一个方法发生回滚，整个事务都回滚。</p>
<p><strong>REQUIRES_NEW</strong></p>
<p>创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说，不管外部方法是否开启事务，REQUIRES_NEW 修饰的内部方法会开启一个新的事务。如果外部方法开启事务，则两个事务互不干扰，相互独立，并且外部事务会挂起，等待内部事务执行完后，才继续执行。</p>
<p>示列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methoA</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassB classB = <span class="keyword">new</span> ClassB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        classB.methodB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>如果使用 REQUIRED 事务传播行为修饰 methodA()，使用 REQUIRES_NEW 修饰 methodB()。那么，methodA() 发生异常回滚，methodB() 是不会跟着回滚，因为 methodB() 开启了独立的事务。但是，如果 methodB() 发生异常回滚了，并且抛出的异常被 methodA() 的事务管理机制检测到了，methodA() 也会回滚。</p>
<p><strong>SUPPORTS</strong></p>
<p>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。这个通常是用来处理那些并非原子性的非核心业务逻辑操作。不常用。</p>
<p><strong>NOT_SUPPORTED</strong></p>
<p>以非事务方式运行，如果当前存在事务，则把当前事务挂起。它可以帮助将事务极可能的缩小，因为一个事务越大，它存在的风险也就越多，所以在处理事务的过程中，要保证尽可能的缩小范围。</p>
<p>示列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methoA</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassB classB = <span class="keyword">new</span> ClassB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        classB.methodB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.NOT_SUPPORTED)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// TODO 执行 1000 次非核心业务逻辑</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>假如 methodB() 执行循环 1000 次的非核心业务逻辑操作，并且它处在 methodA() 的事务中，这样会造成事务太大，导致出现一些难以考虑周全的异常情况。所以，使用 NOT_SUPPORTED 修饰 methodB()，当执行到 methodB() 时，将 methodA() 的事务挂起，等 methodB() 以非事务的状态运行完成后，再继续 methodA() 的事务。</p>
<p><strong>NEVER</strong></p>
<p>以非事务方式运行，如果当前存在事务，则抛出抛出Runtime 异常，强制停止执行。 </p>
<p>如果 methodA() 是使用 REQUIRED 修饰的， 而methodB() 的是使用 NEVER 修饰的。当执行到 methodB() 时，就要抛出异常了。</p>
<p><strong>MANDATORY</strong></p>
<p>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。也就是说，MANDATORY 要求上下文中必须要存在事务，否则就会抛出异常。</p>
<p>配置 MANDATORY 级别的事务是有效控制上下文调用代码而遗漏添加事务管理的保证手段。比如，一段代码不能单独被调用执行，但是一旦被调用，就必须有事务包含的情况，就可以使用 MANDATORY 级别的事务。</p>
<p><strong>NESTED</strong></p>
<p>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 <strong>REQUIRED</strong>。</p>
<p>也就是说，如果外部方法开启事务的话，NESTED 修饰的内部方法属于外部事务的子事务，外部主事务回滚的话，子事务也会回滚，而内部子事务可以单独回滚而不影响外部主事务和其他子事务。因为 NESTED 事务它有一个 savepoint，在内部方法执行失败后进行回滚，外部方法也会回滚到 savepoint 点上。此时，如果外部方法将内部方法抛出的异常进行了捕获则会继续往下执行直到完成自己的事务。如果外部方法没有捕获异常，则会根据事务规则进行回滚。</p>
<p>如果外部方法未开启事务，NESTED 和 REQUIRED 作用相同，修饰的内部方法都会新开启自己的事务，且开启的事务相互独立，互不干扰。</p>
<p>示列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methoA</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassB classB = <span class="keyword">new</span> ClassB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="comment">// savepoint</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			classB.methodB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="comment">// TODO 执行其他业务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// TODO 业务代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>当 methodB() 执行失败后进行回滚，methodA() 也会回滚到 savepoint 点上，而 methodA() 捕获了 methodB() 抛出的异常，继续执行自己的业务代码。</p>
<h3 id="基于注解-Transactional-声明事务失效分析"><a href="#基于注解-Transactional-声明事务失效分析" class="headerlink" title="基于注解 @Transactional 声明事务失效分析"></a>基于注解 @Transactional 声明事务失效分析</h3><p>在开发过程中，可能会遇到使用 @Transactional 进行事务管理时出现失效的情况。这里我们的讨论是基于事务的默认传播行为是 <code>REQUIRED</code>。</p>
<p><strong>常见失效场景</strong>  </p>
<ul>
<li><p>如果使用 MySQL 且引擎是 MyISAM，则事务会不起作用，原因是 MyISAM 不支持事务，改成 InnoDB 引擎则支持事务。</p>
</li>
<li><p>注解 @Trasactional 只能加在 <code>public</code> 修饰的方法上事务才起效。如果加在 <code>protect</code>、<code>private</code> 等非 <code>public</code> 修饰的方法上，事务将失效。</p>
</li>
<li><p>如果在开启了事务的方法内，使用了 <code>try-catch</code> 语句块对异常进行了捕获，而没有将异常抛到外层，事务将不起效。</p>
</li>
<li><p>在不同类之间的方法调用中，如果 A 方法开启了事务，B 方法没有开启事务，B 方法调用了 A 方法。如果 B 方法中发生异常，但不是调用的 A 方法产生的，则异常不会使 A 方法的事务回滚，此时事务无效。如果 B 方法中发生异常，异常是调用的 A 方法产生的，则 A 方法的事务回滚，此时事务有效。在 B 方法上加上注解 @Trasactional，这样 A 和 B 方法就在同一个事务里了，不管异常产生在哪里，事务都是有效的。<br>简单地说，不同类之间方法调用时，异常发生在无事务的方法中，但不是被调用的方法产生的，被调用的方法的事务无效。只有异常发生在开启事务的方法内，事务才有效。</p>
</li>
<li><p>在同一个类的方法之间调用中，如果 A 方法调用了 B 方法，不管 A 方法有没有开启事务， B 方法的事务是无效的。</p>
</li>
<li><p>如果使用了Spring + MVC，则 <code>context:component-scan</code> 重复扫描问题可能会引起事务失效。</p>
</li>
</ul>
<p><strong>原因分析</strong></p>
<p>在应用系统调用声明 @Transactional 的目标方法时，Spring Framework 默认使用 AOP 代理，在代码运行时生成一个代理对象，再由这个代理对象来统一管理。  </p>
<p>Spring 事务是使用 AOP 环绕通知和异常通知，就是对方法进行拦截，在方法执行前开启事务，在捕获到异常时进行事务回滚，在方法执行完成后提交事务。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>Spring 团队建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。在接口上使用 @Transactional 注解，只能当你设置了基于接口的代理时它才生效。因为注解是不能继承的，这就意味着如果正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装。    </p>
<p>Spring 文档中写到：Spring AOP 部分使用 JDK 动态代理或者 CGLIB 来为目标对象创建代理，如果被代理的目标对象实现了至少一个接口，则会使用 JDK 动态代理。所有该目标类型实现的接口都将被代理。若该目标对象没有实现任何接口，则创建一个CGLIB代理。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.im/post/5b00c52ef265da0b95276091#heading-9" target="_blank" rel="noopener">https://juejin.im/post/5b00c52ef265da0b95276091#heading-9</a> </p>
<p><a href="https://blog.csdn.net/rylan11/article/details/76609643" target="_blank" rel="noopener">https://blog.csdn.net/rylan11/article/details/76609643</a>  </p>
<p><a href="https://blog.csdn.net/justloveyou_/article/details/73733278" target="_blank" rel="noopener">https://blog.csdn.net/justloveyou_/article/details/73733278</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/2019/12/19/bridge-pattern/</url>
    <content><![CDATA[<p>桥接模式（Bridge），将抽象部分和它的实现部分分离，使它们都可以独立地变化。  </p>
<p>桥接模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是把抽象与行为实现分离开来，从而可以保持各部分的独立性以及应对它们的功能扩展。</p>
<a id="more"></a>

<p>也就是说，实现系统可能有多种方式分类，每一种分类都有可能变化。桥接模式的核心意图就是把这些分类独立出来，让它们各自独立变化，减少它们之间的耦合。</p>
<h3 id="桥接模式解析"><a href="#桥接模式解析" class="headerlink" title="桥接模式解析"></a>桥接模式解析</h3><p><img alt="桥接模式结构图" data-src="bridge-struct.png"></p>
<p><strong>角色介绍</strong></p>
<ul>
<li>Abstraction：维护了 Implementor 类，两者是聚合关系，Abstraction 充当桥接类。</li>
<li>RefinedAbstraction：是 Abstraction 抽象类的子类。</li>
<li>Implementor：行为实现类的接口。</li>
<li>ConcreteImplementorA/ConcreteImplementorA：行为的具体实现类。</li>
</ul>
<p><strong>桥接模式基本代码</strong></p>
<ul>
<li>Abstraction 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Implementor implementor;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Abstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.implementor = implementor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        implementor.operation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>RefinedAbstraction 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefinedAbstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(implementor);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>.operation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Implementor 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ConcreteImplementorA 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"具体实现 A 的方法执行"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ConcreteImplementorB 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"具体实现 B 的方法执行"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Main 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Implementor implementorA = <span class="keyword">new</span> ConcreteImplementorA();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Abstraction refinedAbstractionA = <span class="keyword">new</span> RefinedAbstraction(implementorA);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        refinedAbstractionA.operation();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Implementor implementorB = <span class="keyword">new</span> ConcreteImplementorB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Abstraction refinedAbstractionB = <span class="keyword">new</span> RefinedAbstraction(implementorB);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        refinedAbstractionB.operation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>手机操作问题，对不同品牌手机的不同软件功能进行编程，如通讯录、手机游戏等。</p>
<p><strong>传统方法</strong></p>
<ul>
<li>结构图</li>
</ul>
<p><img alt="代码结构图" data-src="bridge-code-struct.png"></p>
<ul>
<li>手机类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * AbstractHandset</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandset</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>手机品牌 M 和手机品牌 N 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetM</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetM</span> <span class="keyword">extends</span> <span class="title">AbstractHandset</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetN</span> <span class="keyword">extends</span> <span class="title">AbstractHandset</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>手机游戏类和手机 MP3 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetMGame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetMGame</span> <span class="keyword">extends</span> <span class="title">HandsetM</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"运行 M 品牌手机的游戏"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetNGame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetNGame</span> <span class="keyword">extends</span> <span class="title">HandsetN</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"运行 N 品牌手机的游戏"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetMMP3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetMMP3</span> <span class="keyword">extends</span> <span class="title">HandsetM</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"运行 M 品牌手机的 MP3"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetNMP3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetNMP3</span> <span class="keyword">extends</span> <span class="title">HandsetN</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"运行 N 品牌手机的 MP3"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Main 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        HandsetM handsetM = <span class="keyword">new</span> HandsetMGame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        handsetM.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        HandsetN handsetN = <span class="keyword">new</span> HandsetNMP3();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        handsetN.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>传统方法使用多层继承的方案，在扩展上存在<strong>类爆炸</strong>的问题。当我们要给每个品牌的手机增加一个新功能时，就要在每个品牌的手机下面增加一个子类，这样增加了代码维护的成本。</p>
<p>事实上，很多情况下使用继承会带来麻烦。对象的继承关系是在编译时就定义好了的，所以无法在运行时改变从父类继承的实现。子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然导致其子类发生变化。当需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其他更适合的类替换。这种依赖关系限制了灵活性并最终限制复用。</p>
<p><strong>使用桥接模式改进</strong></p>
<ul>
<li>结构图</li>
</ul>
<p><img alt="桥接结构图" data-src="bridge-code-struct1.png"></p>
<ul>
<li>手机软件类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetSoft</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandsetSoft</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>手机功能等具体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetGame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetGame</span> <span class="keyword">implements</span> <span class="title">HandsetSoft</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"运行手机游戏"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetMP3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetMP3</span> <span class="keyword">implements</span> <span class="title">HandsetSoft</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"运行手机 MP3"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>手机类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * AbstractHandset</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandset</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> HandsetSoft handsetSoft;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractHandset</span><span class="params">(HandsetSoft handsetSoft)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.handsetSoft = handsetSoft;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>手机具体品牌类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetM</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetM</span> <span class="keyword">extends</span> <span class="title">AbstractHandset</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandsetM</span><span class="params">(HandsetSoft handsetSoft)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(handsetSoft);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.handsetSoft.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HandsetN</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandsetN</span> <span class="keyword">extends</span> <span class="title">AbstractHandset</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandsetN</span><span class="params">(HandsetSoft handsetSoft)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>(handsetSoft);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.handsetSoft.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Main 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        HandsetM handsetM = <span class="keyword">new</span> HandsetM(<span class="keyword">new</span> HandsetGame());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        handsetM.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        HandsetN handsetN = <span class="keyword">new</span> HandsetN(<span class="keyword">new</span> HandsetMP3());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        handsetN.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>桥接模式，实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成。<strong>桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本</strong>。</p>
<p>桥接模式要求正确识别出系统中两个独立变化的维度(抽象和实现)，因此其使用范围有一定的局限性，即需要有这样的应用场景。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2019/12/09/adapter-pattern/</url>
    <content><![CDATA[<p>适配器模式（Adapter），将一个类的接口转换成客户希望的另外一个借口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。它主要应用于希望复用一些现存的类，但是接口又于复用环境要求不一致的情况。</p>
<p>适配器模式主要分为三类：对象适配器模式、类适配器模式、接口适配器模式。</p>
<a id="more"></a>

<h3 id="适配器模式解析"><a href="#适配器模式解析" class="headerlink" title="适配器模式解析"></a>适配器模式解析</h3><p>这里主要以对象适配器为例。</p>
<p><img alt="适配器结构图" data-src="adapterStruct.png"></p>
<p><strong>角色介绍</strong></p>
<ul>
<li>Target：客户所期待的接口，可以是具体的或抽象的类，也可以是接口。</li>
<li>Adaptee：需要适配的类。</li>
<li>Adapter：通过在内部包装一个 Adaptee 对象，把源接口转换成目标接口。</li>
</ul>
<p><strong>适配器模式基本代码</strong></p>
<ul>
<li>Target 类：目标类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"普通请求！"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>Adaptee 类：需要适配的类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"特殊请求！"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Adapter 类：适配器类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Target</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Adaptee adaptee = <span class="keyword">new</span> Adaptee();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        adaptee.specificRequest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Main 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Target target = <span class="keyword">new</span> Adapter();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        target.request();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以充电器为例，充电器本身相当于 Adapter, 220V 交流电相当于被适配者 Adaptee，转换为 5V 直流电相当于目标者。</p>
<p><strong>对象适配器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Voltage220V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Voltage5V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Voltage5V</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * VoltageAdapter</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">implements</span> <span class="title">Voltage5V</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Voltage220V voltage220V = <span class="keyword">new</span> Voltage220V();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> output220V = voltage220V.output220V();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> output220V / <span class="number">44</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Voltage5V voltage5V = <span class="keyword">new</span> VoltageAdapter();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(voltage5V.output5V());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>对象适配器，遵循合成复用原则，使用成本低，并且灵活。</p>
<p><strong>类适配器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Voltage220V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Voltage5V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Voltage5V</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * VoltageAdapter</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Voltage220V</span> <span class="keyword">implements</span> <span class="title">Voltage5V</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> output220V = <span class="keyword">this</span>.output220V();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> output220V / <span class="number">44</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Voltage5V voltage5V = <span class="keyword">new</span> VoltageAdapter();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(voltage5V.output5V());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">`</span></pre></td></tr></table></figure>
<p>由于 Java 是单继承机制，所以类适配器需要继承被适配类，有一定局限性；被适配类的方法在 Adapter 中都会暴露出来，也增加了使用的成本。但是其继承了被适配类，所以它可以根据需求重写被适配类中的方法，使得Adapter 的灵活性增强了。</p>
<p><strong>接口适配器</strong></p>
<p>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现(空方法)，那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求。适用于一个接口不想使用其所有的方法的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Voltage</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Voltage</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output10V</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output20V</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * AbstractVoltage</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractVoltage</span> <span class="keyword">implements</span> <span class="title">Voltage</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output10V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output20V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Voltage220V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Voltage5V</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage5V</span> <span class="keyword">extends</span> <span class="title">AbstractVoltage</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Voltage220V voltage220V = <span class="keyword">new</span> Voltage220V();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> v = voltage220V.output220V();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> v / <span class="number">44</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Voltage5V voltage5V = <span class="keyword">new</span> Voltage5V();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(voltage5V.output5V());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>一般地，使用一个已经存在的类，但如果它的接口，也就是它的方法和要求不相同时，就可以考虑使用适配器模式。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/2019/12/09/builder-pattern/</url>
    <content><![CDATA[<p>建造者模式（Builder），又叫生成器模式，是一种对象构建模式。它将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br>建造者模式可以将一个产品的内部表象和产品的生成过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了。</p>
<a id="more"></a>

<h3 id="建造者模式解析"><a href="#建造者模式解析" class="headerlink" title="建造者模式解析"></a>建造者模式解析</h3><p><img alt="建造者模式结构图" data-src="builderStruct.png"></p>
<p><strong>角色介绍</strong></p>
<ul>
<li>Product（产品角色）：具体产品对象。</li>
<li>Builder（抽象建造者）：是为创建一个 Product 对象的各个部件指定的抽象接口。</li>
<li>ConcreteBuilder（具体建造者）：实现 Builder 接口，构建和装配各个部件。</li>
<li>Director（指挥者）：是构建一个使用 Builder 接口的对象。它主要是用于创建一个复杂的对象。 它主要有两个作用，一是隔离了客户与对象的生产过程，二是负责控制产品对象的生产过程。</li>
</ul>
<p><strong>建造者模式基本代码</strong></p>
<ul>
<li>Product 类：产品类，由多个部件组成。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> List&lt;String&gt; parts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 添加部件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String part)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.parts.add(part);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 列举所有部件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.parts.forEach(System.out::println);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Builder 类：抽象建造者类，确定产品由两个部件 PartA 和 PartB 组成，并声明一个得到产品结果的方法 getResult()。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">Product <span class="title">getResult</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ConcreteBuilderA 类：具体建造者 A。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilderA</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        product.add(<span class="string">"X"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        product.add(<span class="string">"Y"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> product;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ConcreteBuilderB 类：具体建造者 B。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilderB</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        product.add(<span class="string">"M"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       product.add(<span class="string">"N"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> product;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>Director 类：指挥者类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(Builder builder)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.buildPartA();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.buildPartB();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Main 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Director director = <span class="keyword">new</span> Director();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ConcreteBuilderA builderA = <span class="keyword">new</span> ConcreteBuilderA();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ConcreteBuilderB builderB = <span class="keyword">new</span> ConcreteBuilderB();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        director.build(builderA);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Product resultA = builderA.getResult();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resultA.show();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        director.build(builderB);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Product resultB = builderB.getResult();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resultB.show();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>需求：盖房子，过程有打桩、砌墙、封顶。房子有各种各样的，比如普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不相同的。</p>
<p><strong>传统写法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * House</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer length;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer width;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer high;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(Integer length)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.length = length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> width;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(Integer width)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.width = width;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getHigh</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> high;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHigh</span><span class="params">(Integer high)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.high = high;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"House&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"length="</span> + length +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", width="</span> + width +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", high="</span> + high +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 普通房子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouseBuilder</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">build</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        House house = <span class="keyword">new</span> House();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setLength(<span class="number">50</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setWidth(<span class="number">20</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setHigh(<span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> house;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 高房子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighHouseBuilder</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">build</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        House house = <span class="keyword">new</span> House();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setLength(<span class="number">60</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setWidth(<span class="number">30</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setHigh(<span class="number">6</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> house;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 普通房子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        CommonHouseBuilder commonHouseBuilder = <span class="keyword">new</span> CommonHouseBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        House commonHouse = commonHouseBuilder.build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(commonHouse.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 高房子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        HighHouseBuilder highHouseBuilder = <span class="keyword">new</span> HighHouseBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        House highHouse = highHouseBuilder.build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(highHouse.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>上面这种写法将建造过程和表象都放在了一起，耦合性很强，而且普通房子和高房子的建造过程是一样的，只是内部的细节不同，代码是可以复用的。如果我们又要进行别墅的建造，建造过程我们又要重新写一遍，而且很容易漏写步骤。所以让我们使用建造者模式改进。</p>
<p><strong>使用建造者模式改进</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * House</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer length;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer width;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer high;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(Integer length)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.length = length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> width;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(Integer width)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.width = width;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getHigh</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> high;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHigh</span><span class="params">(Integer high)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.high = high;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"House&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"length="</span> + length +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", width="</span> + width +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", high="</span> + high +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Builder</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">Product <span class="title">getResult</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 普通房子建造者</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouseBuilder</span> <span class="keyword">implements</span> <span class="title">HouseBuilder</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> House house = <span class="keyword">new</span> House();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildHigh</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setHigh(<span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWidth</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setWidth(<span class="number">20</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildLength</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       house.setLength(<span class="number">50</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> house;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 高房子建造者</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighHouseBuilder</span> <span class="keyword">implements</span> <span class="title">HouseBuilder</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> House house = <span class="keyword">new</span> House();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildHigh</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setHigh(<span class="number">6</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWidth</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setWidth(<span class="number">30</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildLength</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        house.setLength(<span class="number">60</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> house;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * HouseDirector</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildHouse</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        houseBuilder.buildHigh();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        houseBuilder.buildLength();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        houseBuilder.buildWidth();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        HouseDirector houseDirector = <span class="keyword">new</span> HouseDirector();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 普通房子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        CommonHouseBuilder commonHouseBuilder = <span class="keyword">new</span> CommonHouseBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        houseDirector.buildHouse(commonHouseBuilder);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        House commonHouse = commonHouseBuilder.getResult();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(commonHouse.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 高房子</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        HighHouseBuilder highHouseBuilder = <span class="keyword">new</span> HighHouseBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        houseDirector.buildHouse(highHouseBuilder);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        House highHouse = highHouseBuilder.getResult();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(highHouse.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>建造者模式，主要用于创建一些复杂的对象，这些对象内部构建间的建造顺序通常是稳定的，但对象内部的构建通常面临复杂的变化。而建造者模式的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品的构建过程，所以如果要改变一个产品内部的表示，只需再定义一个具体的建造者就可以了。</p>
<p>最后，建造者模式是逐步建造产品的，所以建造者的 Builder 类里的那些建造方法必须是足够普遍的，以便为各类型的具体建造者构造。如果产品的差异性较大，就不适合使用建造者模式。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2019/12/09/prototype-pattern/</url>
    <content><![CDATA[<p>原型模式（Prototype），用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。<br>原型模式是一种创建型设计模式，其实就是从一个对象再创建另外一个可定制的对象，而且不需要知道任何创建的细节。</p>
<a id="more"></a>

<p><strong>示例</strong></p>
<p>有一个简历类，必须要有姓名，可以设置性别和年龄，也可以设置工作经历。最后复制三份相同简历。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Resume</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String timeArea;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String company;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonInfo</span><span class="params">(String sex, String age)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.sex = sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkExperience</span><span class="params">(String timeArea, String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.timeArea = timeArea;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.company = company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"Resume&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", timeArea='"</span> + timeArea + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", company='"</span> + company + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume a = <span class="keyword">new</span> Resume(<span class="string">"God.Gao"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setPersonInfo(<span class="string">"woman"</span>, <span class="string">"20"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setWorkExperience(<span class="string">"2014-2018"</span>, <span class="string">"XXXCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume b = <span class="keyword">new</span> Resume(<span class="string">"God.Gao"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b.setPersonInfo(<span class="string">"woman"</span>, <span class="string">"20"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b.setWorkExperience(<span class="string">"2014-2018"</span>, <span class="string">"XXXCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume c = <span class="keyword">new</span> Resume(<span class="string">"God.Gao"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c.setPersonInfo(<span class="string">"woman"</span>, <span class="string">"20"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c.setWorkExperience(<span class="string">"2014-2018"</span>, <span class="string">"XXXCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(c.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>此写法比较好理解，简单易操作。但是，假如需要二十份相同简历，就需要二十次实例化，并且每 new 一次，都需要执行一次构造函数，如果构造函数的执行时间很长，那么多次的执行这个初始化操作就实在是太低效了。假如我们又需要修改其中一个属性的值，那就要修改二十次，这样就很麻烦，效率也低。</p>
<p><strong>使用原型模式改进</strong></p>
<p>Java 中 Object 类是所有类的基类，Object 类提供了一个 clone() 方法，该方法可以将一个 Java 对象复制一份，但是需要实现 clone() 的 Java 类必须要实现一个 Cloneable 接口，这样就可以完成原型模式了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Resume</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String timeArea;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String company;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonInfo</span><span class="params">(String sex, String age)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.sex = sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkExperience</span><span class="params">(String timeArea, String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.timeArea = timeArea;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.company = company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"Resume&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", timeArea='"</span> + timeArea + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", company='"</span> + company + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume a = <span class="keyword">new</span> Resume(<span class="string">"God.Gao"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setPersonInfo(<span class="string">"woman"</span>, <span class="string">"20"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setWorkExperience(<span class="string">"2014-2018"</span>, <span class="string">"XXXCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume b = (Resume) a.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume c = (Resume) a.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(c.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>原型模式实际就是对象的克隆。一般在初始化的信息不发生变化的情况下，克隆是最好的办法。这既隐藏了对象创建的细节，又对性能是大大的提高。</p>
<p>上述代码实现的克隆属于浅克隆。既然有浅克隆，就有深克隆。</p>
<h3 id="浅克隆-VS-深克隆"><a href="#浅克隆-VS-深克隆" class="headerlink" title="浅克隆 VS 深克隆"></a>浅克隆 VS 深克隆</h3><p><strong>浅克隆</strong>  </p>
<blockquote>
<p>浅克隆是指，被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用都仍然指向原来的对象。——《大话设计模式》</p>
</blockquote>
<p>对于数据类型是基本数据类型的成员变量，浅克隆会直接进行值传递，也就是将该属性值复制一份给新的对象。<br>对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅克隆会进行引用传递，也就是只是将该成员变量的引用值(内存地址)复制一份给新的对象；因此原始对象及其复本引用同一对象。在这种情况下，在一个对象中修改该成员变量的值会影响到另一个对象的该成员变量的值。</p>
<p><strong>深克隆</strong>   </p>
<p>深克隆，顾名思义，除了复制对象的所有基本数据类型的成员变量值，还为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深克隆要对整个对象(包括对象的引用类型)进行复制。这样就不会出现一个对象的成员变量的值被修改会影响另一个对象的成员变量的值。</p>
<p><strong>浅克隆&amp;深克隆示例对比</strong>  </p>
<p>示例：复制下面的简历（Resume）类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> WorkExperience workExperience;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workExperience = <span class="keyword">new</span> WorkExperience();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonInfo</span><span class="params">(String sex, String age)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.sex = sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkExperience</span><span class="params">(String workDate, String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">this</span>.workExperience.setWorkDate(workDate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">this</span>.workExperience.setCompany(company);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"Resume&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", workExperience="</span> + workExperience +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * WorkExperience</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkExperience</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String company;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWorkDate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkDate</span><span class="params">(String workDate)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workDate = workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCompany</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.company = company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"WorkExperience&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"workDate='"</span> + workDate + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", company='"</span> + company + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>使用浅克隆复制</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Resume</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> WorkExperience workExperience;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workExperience = <span class="keyword">new</span> WorkExperience();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonInfo</span><span class="params">(String sex, String age)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.sex = sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkExperience</span><span class="params">(String workDate, String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">this</span>.workExperience.setWorkDate(workDate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">this</span>.workExperience.setCompany(company);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"Resume&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", workExperience="</span> + workExperience +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * WorkExperience</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkExperience</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String company;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWorkDate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkDate</span><span class="params">(String workDate)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workDate = workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCompany</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.company = company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"WorkExperience&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"workDate='"</span> + workDate + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", company='"</span> + company + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume a = <span class="keyword">new</span> Resume(<span class="string">"God.Gao"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setPersonInfo(<span class="string">"woman"</span>, <span class="string">"20"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setWorkExperience(<span class="string">"2014-2018"</span>, <span class="string">"XXXCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume b = (Resume) a.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b.setWorkExperience(<span class="string">"2015-2019"</span>, <span class="string">"xiaokejiCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume c = (Resume) a.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c.setWorkExperience(<span class="string">"2014-2017"</span>, <span class="string">"yunCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(c.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resume&#123;name=<span class="string">'God.Gao'</span>, sex=<span class="string">'woman'</span>, age=<span class="string">'20'</span>, workExperience=WorkExperience&#123;workDate=<span class="string">'2014-2017'</span>, company=<span class="string">'yunCompany'</span>&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Resume&#123;name=<span class="string">'God.Gao'</span>, sex=<span class="string">'woman'</span>, age=<span class="string">'20'</span>, workExperience=WorkExperience&#123;workDate=<span class="string">'2014-2017'</span>, company=<span class="string">'yunCompany'</span>&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Resume&#123;name=<span class="string">'God.Gao'</span>, sex=<span class="string">'woman'</span>, age=<span class="string">'20'</span>, workExperience=WorkExperience&#123;workDate=<span class="string">'2014-2017'</span>, company=<span class="string">'yunCompany'</span>&#125;&#125;</span></pre></td></tr></table></figure>
<p>从结果可以看出，使用浅克隆复制对象，当对象中存在引用类型的成员变量时，只是复制了该成员变量的引用地址，并没有让该成员变量指向复制过的新对象。因此造成了一个对象修改该成员变量的值影响到了其他对象的该成员变量的值。</p>
<ul>
<li>使用深克隆复制</li>
</ul>
<p>深克隆有两种实现方式：1. 重写 clone() 方法，2. 使用序列化的方式。  </p>
<ol>
<li>重写 clone() 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Resume</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> WorkExperience workExperience;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workExperience = <span class="keyword">new</span> WorkExperience();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonInfo</span><span class="params">(String sex, String age)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.sex = sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkExperience</span><span class="params">(String workDate, String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">this</span>.workExperience.setWorkDate(workDate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">this</span>.workExperience.setCompany(company);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume resume = (Resume) <span class="keyword">super</span>.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 对引用类型的属性进行克隆</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        resume.workExperience = (WorkExperience) <span class="keyword">this</span>.workExperience.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> resume;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"Resume&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", workExperience="</span> + workExperience +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * WorkExperience</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkExperience</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String company;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWorkDate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkDate</span><span class="params">(String workDate)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workDate = workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCompany</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.company = company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"WorkExperience&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"workDate='"</span> + workDate + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", company='"</span> + company + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume a = <span class="keyword">new</span> Resume(<span class="string">"God.Gao"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setPersonInfo(<span class="string">"woman"</span>, <span class="string">"20"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setWorkExperience(<span class="string">"2014-2018"</span>, <span class="string">"XXXCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume b = (Resume) a.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b.setWorkExperience(<span class="string">"2015-2019"</span>, <span class="string">"xiaokejiCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume c = (Resume) a.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c.setWorkExperience(<span class="string">"2014-2017"</span>, <span class="string">"yunCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(c.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ol start="2">
<li>使用序列化的方式</li>
</ol>
<p><strong>注意</strong>：使用序列化方式实现深克隆时，所涉及的类必须实现 Serializable 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Resume</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6395782880219068537L</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> WorkExperience workExperience;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workExperience = <span class="keyword">new</span> WorkExperience();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPersonInfo</span><span class="params">(String sex, String age)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.sex = sex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkExperience</span><span class="params">(String workDate, String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workExperience.setWorkDate(workDate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workExperience.setCompany(company);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 创建对象输出流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 将对象以对象流的方式输出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            objectOutputStream.writeObject(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 创建对象输入流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 读取对象流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> objectInputStream.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (IOException | SecurityException | ClassNotFoundException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (objectInputStream != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    objectInputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (byteArrayInputStream != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    byteArrayInputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (objectOutputStream != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    objectOutputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (byteArrayOutputStream != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    byteArrayOutputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"Resume&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", workExperience="</span> + workExperience +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * WorkExperience</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkExperience</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">939371138425810409L</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String company;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWorkDate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkDate</span><span class="params">(String workDate)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.workDate = workDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCompany</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.company = company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"WorkExperience&#123;"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">"workDate='"</span> + workDate + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">", company='"</span> + company + <span class="string">'\''</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'&#125;'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume a = <span class="keyword">new</span> Resume(<span class="string">"God.Gao"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setPersonInfo(<span class="string">"woman"</span>, <span class="string">"20"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setWorkExperience(<span class="string">"2014-2018"</span>, <span class="string">"XXXCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume b = (Resume) a.deepClone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b.setWorkExperience(<span class="string">"2015-2019"</span>, <span class="string">"xiaokejiCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Resume c = (Resume) a.deepClone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c.setWorkExperience(<span class="string">"2014-2017"</span>, <span class="string">"yunCompany"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(c.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resume&#123;name=<span class="string">'God.Gao'</span>, sex=<span class="string">'woman'</span>, age=<span class="string">'20'</span>, workExperience=WorkExperience&#123;workDate=<span class="string">'2014-2018'</span>, company=<span class="string">'XXXCompany'</span>&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Resume&#123;name=<span class="string">'God.Gao'</span>, sex=<span class="string">'woman'</span>, age=<span class="string">'20'</span>, workExperience=WorkExperience&#123;workDate=<span class="string">'2015-2019'</span>, company=<span class="string">'xiaokejiCompany'</span>&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Resume&#123;name=<span class="string">'God.Gao'</span>, sex=<span class="string">'woman'</span>, age=<span class="string">'20'</span>, workExperience=WorkExperience&#123;workDate=<span class="string">'2014-2017'</span>, company=<span class="string">'yunCompany'</span>&#125;&#125;</span></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率，不用重新初始化对象，而是动态地获得对象运行时的状态。如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码。<br>在实现深克隆的时候可能需要比较复杂的代码，需要为每一个类实现一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了开放封闭原则。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>（抽象）工厂模式</title>
    <url>/2019/12/09/factory-pattern/</url>
    <content><![CDATA[<p><strong>示例</strong></p>
<p>实现两数的加、减、乘、除运算。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Operation 运算类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB, String operate)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (Objects.equals(operate, <span class="string">"+"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result = numberA + numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(operate, <span class="string">"-"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result = numberA - numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(operate, <span class="string">"*"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result = numberA * numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(operate, <span class="string">"/"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result = numberA / numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> numberA = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> numberB = <span class="number">15</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String operate = <span class="string">"*"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> result = Operation.getResult(numberA, numberB, operate);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"计算结果是："</span> + result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上面的实现方式虽然简单且易于理解，但是当我们再增加一个新的运算（比如立方运算）时，就要对 Operation 类中的运算方法进行修改，这样可能会使得本来运行良好的功能代码发生意外的变化，导致程序发生异常。所以我们需要将代码进行改进。</p>
<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式是属于创建型模式，是工厂模式的一种，是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。<br>简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为(代码)。在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式。</p>
<p><strong>使用简单工厂模式改进</strong></p>
<p><img alt="简单工厂" data-src="simpleFactory.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Operation</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationAdd 加法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA + numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationSub 减法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA - numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationMul 乘法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA * numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationDiv 除法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (numberB == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">"除数不能为 0！"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA / numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * SimpleFactory</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title">newOperation</span><span class="params">(String operate)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Operation operation = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (Objects.equals(operate, <span class="string">"+"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            operation = <span class="keyword">new</span> OperationAdd();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(operate, <span class="string">"-"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            operation = <span class="keyword">new</span> OperationSub();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(operate, <span class="string">"*"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            operation = <span class="keyword">new</span> OperationMul();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(operate, <span class="string">"/"</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            operation = <span class="keyword">new</span> OperationDiv();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> operation;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> numberA = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> numberB = <span class="number">15</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String operate = <span class="string">"*"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Operation operation = SimpleFactory.newOperation(operate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> result = operation.getResult(numberA, numberB);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>如果我们需要对其中的运算进行修改，只需修改它相应的运算类即可；如果需要增加新的运算方式，只需增加相应的运算子类，然后在工厂类里增加一个判断分支，添加相应的实例化代码。</p>
<p><strong>简单工厂模式</strong>的最大优点在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。但是每当要增加一个新的功能时，都要到工厂类的方法里增加一个分支条件，这样就违背了开放封闭原则。  </p>
<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>工厂方法模式（Factory Method），定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p>
<p><strong>使用工厂方法模式改进</strong></p>
<p><img alt="工厂方法" data-src="factoryMethod.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Operation</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationAdd 加法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA + numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationSub 减法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA - numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationMul 乘法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA * numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationDiv 除法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (numberB == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">"除数不能为 0！"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA / numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * IFactory</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">Operation <span class="title">newOperation</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * AddFactory 加法工厂类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Operation <span class="title">newOperation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationAdd();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * SubFactory 减法工厂类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Operation <span class="title">newOperation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationSub();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * MulFactory 乘法工厂类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Operation <span class="title">newOperation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationMul();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * DivFactory 除法工厂类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Operation <span class="title">newOperation</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationDiv();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> numberA = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> numberB = <span class="number">15</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        MulFactory mulFactory = <span class="keyword">new</span> MulFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Operation operation = mulFactory.newOperation();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">double</span> result = operation.getResult(numberA, numberB);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>工厂方法模式，克服了简单工厂模式违背开放封闭原则的缺点，又保持了封装对象创建过程的优点。它们都是集中封装了对象的创建，使得要更换对象时，不需要做大的改动就可实现，降低了客户程序与产品对象的耦合。  </p>
<p>工厂方法模式，是简单工厂模式的进一步抽象和推广。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。但缺点是由于每加一个产品，就需要加一个产品工厂的类，增加了额外的开发量。</p>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式定义了一个接口用于创建相关或有依赖关系的对象簇，而无需指明且体的类。抽象工厂模式是<strong>将简单工厂模式和工厂方法模式进行整合</strong>。从设计层面看，抽象工厂模式就是对简单工厂模式的改进(或者称为进一步的抽象)。将工厂抽象成两层，抽象工厂和具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成了工厂簇更利于代码的维护和扩展。</p>
<p><strong>使用抽象工厂模式改进</strong> </p>
<p><img alt="抽象工厂" data-src="abstractFactory.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Operation</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationAdd 加法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA + numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationSub 减法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA - numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationMul 乘法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA * numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationDiv 除法运算</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> numberA, <span class="keyword">double</span> numberB)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (numberB == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">"除数不能为 0！"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> numberA / numberB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationAccess 利用反射技术实例化对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAccess</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title">createOperation</span><span class="params">(Class&lt;? extends Operation&gt; clazz)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Operation operation = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            operation = clazz.newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> operation;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>一般来说，所有在用简单工厂的地方，都可以考虑用反射技术来去除 switch 或 if，解除分支判断带来的耦合。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>工厂模式是将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到与主项目的依赖关系的解耦目的，从而提高项目的扩展和维护性。创建对象实例时，不要直接 new 类，而是把这个 new 类的动作放在一个工厂的方法中并返回。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2019/12/09/singleton-pattern/</url>
    <content><![CDATA[<p>单例设计模式（Singleton），属于创建型模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法(静态方法)。</p>
<a id="more"></a>

<p><strong>单例设计模式八种方式</strong></p>
<ul>
<li>饿汉式(静态常量)</li>
<li>饿汉式(静态代码块)</li>
<li>懒汉式(线程不安全)</li>
<li>懒汉式(线程安全，同步方法)</li>
<li>懒汉式(线程安全，同步代码块)</li>
<li>双重检查</li>
<li>静态内部类</li>
<li>枚举</li>
</ul>
<h3 id="饿汉式（静态常量、静态代码块）"><a href="#饿汉式（静态常量、静态代码块）" class="headerlink" title="饿汉式（静态常量、静态代码块）"></a>饿汉式（静态常量、静态代码块）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 饿汉式（静态变量）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 私有化构造函数，让外部不能进行实例化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> INSTANCE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 饿汉式（静态代码块）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        INSTANCE = <span class="keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> INSTANCE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>说明</strong>   </p>
<p>此方式比较简单，就是在类装载的时候就完成实例化，避免了线程同步问题。 但在类装载的时候就完成实例化，没有达到懒加载的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。<br>这种方式基于 classloder 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，但是导致类装载的原因很多种，因此不能确定有其他的方式(或者其他的静态方法)导致类装载，这时候初始化 instance 就没有达到懒加载的效果，故可能造成<strong>内存浪费</strong>。</p>
<h3 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 懒汉式（线程不安全）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 私有化构造函数，让外部不能进行实例化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 当调用到该方法时，才去创建实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            instance = <span class="keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> instance;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>说明</strong>  </p>
<p>此方式虽然起到了懒加载的效果，但是只能在单线程下使用。如果在多线程下，一个线程进入了 <code>if (instance == null)</code> 判断语句，还没有来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例，所以在多线程环境下不可使用这种方式。在实际开发中，也不要使用这这种方式。</p>
<h3 id="懒汉式（线程安全-同步方法）"><a href="#懒汉式（线程安全-同步方法）" class="headerlink" title="懒汉式（线程安全-同步方法）"></a>懒汉式（线程安全-同步方法）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 懒汉式（线程安全， 同步方法）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 私有化构造函数，让外部不能进行实例化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 在方法上加入同步处理 synchronized 关键字，解决线程安全问题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            instance = <span class="keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> instance;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>说明</strong>  </p>
<p>此方式解决了线程安全问题，但是效率太低了，每个线程在获得类的实例时候，执行 getInstance 方法都要进行同步，而这个方法只执行一次实例化代码就够了，后面要获得该类实例，直接返回就行了。在实际开发中，不推荐使用这种方式。</p>
<h3 id="懒汉式（线程安全，-同步代码块）"><a href="#懒汉式（线程安全，-同步代码块）" class="headerlink" title="懒汉式（线程安全， 同步代码块）"></a>懒汉式（线程安全， 同步代码块）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 懒汉式（线程安全， 同步代码块）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 私有化构造函数，让外部不能进行实例化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 加入同步处理 synchronized 关键字，解决线程安全问题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                instance = <span class="keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> instance;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>说明</strong>  </p>
<p>此方式，是对懒汉式（同步方法）的单例模式进行改进，解决效率低的问题，但是这种同步代码块的方式并不能起到线程同步的作用。假如一个线程进入了 <code>if (instance == nul)</code> 判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p>
<h3 id="懒汉式（双重检查）"><a href="#懒汉式（双重检查）" class="headerlink" title="懒汉式（双重检查）"></a>懒汉式（双重检查）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 懒汉式（双重检查）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 私有化构造函数，让外部不能进行实例化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 使用 volatile 修饰，让修改值立即更新到主存，保证变量的一致性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 加入同步处理 synchronized 关键字，解决线程安全问题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> instance;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>说明</strong></p>
<p>双重检查概念是多线程开发中常使用到的，此段代码中进行了两次 <code>if (instance== null)</code> 检查，这样就可以保证线程安全了。同时，实例化代码只用执行一次，后面再次访问时，判断 <code>if (instance== nll)</code>，直接返回实例化对象，也避免了反复进行方法同步。所以这种方式既解决了线程安全问题，也解决了懒加载问题，同时保证了效率。</p>
<h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><p>静态内部类在它的外部类被装载时并不会被装载，只有在被调用时才会被装载，而且只会被装载一次，在装载时线程是安全的。它既保证了懒加载，也保证了线程安全，所以静态内部类也是一种实现单例模式很好的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>说明</strong>  </p>
<p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。<br>静态内部类方式在 Singleton 类被装载时并不会立即实例化，而是在需要实例化时，调用 getInstance 方法，才会装载 SingletonInstance 类，从而完成 Singleton 的实例化。静态内部类的静态属性只会在第一次加载类的时候初始化，并且 JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  Singleton1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 一个属性，保证是单例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    INSTANCE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>说明</strong></p>
<p>使用枚举实现单例模式，不仅可以避免多线程问题，而且还能防止反序列化重新创建对象。这种方式是《Effective Java》作者提倡的方式。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需<br>要频繁创建和销毁的对象，使用单例模式可以提高系统性能。当需要实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用 new 的方式。 </p>
<p><strong>单例模式使用的场景</strong>：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即:重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session 工厂等)。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式七大原则</title>
    <url>/2019/12/09/design-priciple/</url>
    <content><![CDATA[<p>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础。</p>
<a id="more"></a>

<p><strong>常用七大原则</strong></p>
<ul>
<li>单一职责原则</li>
<li>接口隔离原则</li>
<li>依赖倒置原则</li>
<li>里式替换原则</li>
<li>开闭原则</li>
<li>迪米特法则</li>
<li>合成/聚合复用原则</li>
</ul>
<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>就一个类而言，一个类应该只负责一项职责。比如类 A 负责两个不同职责：职责 1 和 职责 2。当职责 1 需求变更而改变类 A 时，可能会造成职责 2 执行错误，所以需要将 A 的粒度分解成 A1，A2。</p>
<p><strong>单一职责原则注意事项和细节</strong></p>
<ul>
<li>降低类的复杂度，一个类只负责一项职责</li>
<li>提高类的可读性，可维护性</li>
<li>降低变更引起的风险</li>
<li>通常情况下，我们应当遵守单一职责原则。只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则。</li>
</ul>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>一个类不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。</p>
<p><strong>示例</strong></p>
<p><img alt="接口隔离示例" data-src="interfaceIsolation1.png"> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * IOperation</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOperation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationA</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationA</span> <span class="keyword">implements</span> <span class="title">IOperation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"A 的 operation1 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"A 的 operation2 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"A 的 operation3 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"A 的 operation4 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"A 的 operation5 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationB</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationB</span> <span class="keyword">implements</span> <span class="title">IOperation</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"B 的 operation1 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"B 的 operation2 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"B 的 operation3 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"B 的 operation4 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"B 的 operation5 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * A</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">(IOperation operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">(IOperation operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation2();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">(IOperation operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation3();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * B</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">(IOperation operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      operation.operation1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">(IOperation operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation4();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">(IOperation operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation5();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">``` </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">根据 UML 类图可知，类 A 通过接口 IOperation 依赖类 OperationA，类 B 通过接口 IOperation 依赖类 OperationB。如果接口 IOperation 对于类 A 和类 B 来说不是最小接口，那么类 OperationA 和类 OperationB 必须去实现它们不需要的方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">**根据接口隔离原则改进**</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">将 IOperation 接口拆分成几个独立的接口，类 A 和类 B 分别与它们需要的接口建立依赖关系,也就是采用接口隔离原则。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">![接口隔离改进](interfaceIsolation2.png)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```java</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * IOperation1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOperation1</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * IOperation2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOperation2</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * IOperation3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOperation3</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationA</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationA</span> <span class="keyword">implements</span> <span class="title">IOperation1</span>, <span class="title">IOperation2</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"A 的 operation1 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"A 的 operation2 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"A 的 operation3 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * OperationB</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationB</span> <span class="keyword">implements</span> <span class="title">IOperation1</span>, <span class="title">IOperation3</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"B 的 operation1 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"B 的 operation4 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"B 的 operation5 方法"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * A 通过接口 IOperation1，IOperation2 依赖 OperationA 类，  </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *   只实现了 operation1，operation2，operation3 方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">(IOperation1 operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">(IOperation2 operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation2();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">(IOperation2 operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation3();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * B 通过接口 IOperation1，IOperation3 依赖 OperationB 类，  </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *   只实现了 operation1，operation4，operation5 方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">(IOperation1 operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      operation.operation1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span><span class="params">(IOperation3 operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation4();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">(IOperation3 operation)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        operation.operation5();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>依赖倒置原则是指：  </p>
<ol>
<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象。</li>
<li>抽象不应该依赖细节，细节应该依赖抽象。</li>
<li>依赖倒置的中心思想是面向接口编程。</li>
<li>依赖倒置原则是基于这样的设计理念：相对细节的多变性，抽象的东西要稳定的多，故以抽象为基础搭建的架构比以细节为基础搭建的架构要稳定的多。在 Java 中，抽象是指接口或者抽象类，细节就是具体的实现类。</li>
<li>使用接口或抽象类的目的是制定好规范，而不涉及具体的操作，把展现细节的任务交给它们的实现类进行完成。</li>
</ol>
<p><strong>示例</strong></p>
<p>Person 类发送消息的功能。  </p>
<p><img alt="依赖倒置示例" data-src="dependencyInversion1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Person</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Email email)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(email.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Email</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"message"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述方案简单，比较容易想到。但是，如果我们发送的对象是微信，短信等等，则新增类，同时 Person 也要增加相应的发送方法，这样对类的改动就比较大。 </p>
<p><strong>根据依赖倒置原则改进</strong>  </p>
<p>解决思路：引入一个抽象的接口 ISend 来表示发送者，这样 Person 类与接口 ISend 发生依赖，其次 Email，WeiXin 等属于发送的范畴，它们各自实现 ISend 接口,这样就符合依赖倒转原则。</p>
<p><img alt="依赖倒置改进" data-src="dependencyInversion2.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * ISend</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISend</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">String <span class="title">getMessage</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Email</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">ISend</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"Email message."</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span> <span class="keyword">implements</span> <span class="title">ISend</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"WeiXin message."</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Person</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(ISend send)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(send.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>依赖倒置的注意事项和细节</strong></p>
<ul>
<li>低层模块尽量都要有接口或抽象类，或者两者都有，这样程序的稳定性更好。</li>
<li>变量的声明尽量是接口或抽象类，这样变量的引用和实际对象间，就存在一个缓冲层，便于程序的扩展和优化。</li>
<li>继承时遵循里式替换原则。</li>
</ul>
<p><strong>依赖关系传递的三种方式</strong></p>
<ul>
<li><p>接口传递</p>
</li>
<li><p>构造方法传递</p>
</li>
<li><p>setter 方法传递</p>
</li>
</ul>
<h3 id="里式替换原则"><a href="#里式替换原则" class="headerlink" title="里式替换原则"></a>里式替换原则</h3><p>里式替换原则是指，如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。<strong>换句话说，所有引用基类的地方必须能透明地使用其子类的对象</strong>。<br>在使用继承时，遵循里氏替换原则，在<strong>子类中尽量不要重写父类的方法</strong>。<br>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过<strong>聚合，组合，依赖</strong>来解决问题。</p>
<p><strong>面向对象编程中继承性的思考和说明</strong>  </p>
<ol>
<li>继承包含这样一层含义：父类中凡是已经实现的方法，实际上是在设定规范，虽然它不强制要求所有继承它的子类必须遵循这些规范，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</li>
<li>继承在给程序带来便利的同时，也带来了弊端。使用继承会给程序带来侵入性，程序的可移植性降低，增加了程序间的耦合性；如果一个类被其他类所继承，在修改这个类时，必须考虑到它所有的子类，并且父类修改后，所涉及到子类的功能可能会故障。</li>
<li>编程中在使用继承时，遵循里式替换原则。</li>
</ol>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        A a = <span class="keyword">new</span> A();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a.function1(<span class="number">20</span>, <span class="number">9</span>)); <span class="comment">// 11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        B b = <span class="keyword">new</span> B();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.function1(<span class="number">20</span>, <span class="number">9</span>));<span class="comment">// 本意是求 20 - 9，结果是 20 + 9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.function2(<span class="number">20</span>, <span class="number">9</span>)); <span class="comment">// 20 + 9 + 9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * A</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 返回两数之差</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a - b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * B 继承 A</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 重写了父类的方法，可能是无意识的重写</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.function1(a, b) + <span class="number">9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>我们发现原来运行正常的相减功能发生了错误。原因就是类 B 无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差，特别是运行多态比较频繁的时候。</p>
<p><strong>根据里氏替换原则改进</strong>   </p>
<p>将原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用<strong>依赖，聚合，组合</strong>等关系代替。</p>
<p><img alt="里氏替换" data-src="liskovSubstitution.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Base</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 将基础的方法和成员写到基类中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * A</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 返回两数之差</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a - b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * B</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> A a = <span class="keyword">new</span> A();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 重写了父类的方法，可能是无意识的重写</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.function1(a, b) + <span class="number">9</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 仍然使用 A 类的方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">function3</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a.function1(a, b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        A a = <span class="keyword">new</span> A();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a.function1(<span class="number">20</span>, <span class="number">9</span>)); <span class="comment">// 11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        B b = <span class="keyword">new</span> B();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.function3(<span class="number">20</span>, <span class="number">9</span>));<span class="comment">// 使用组合仍然可以使用到A类相关方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.function2(<span class="number">20</span>, <span class="number">9</span>)); <span class="comment">// 20 + 9 + 9</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><p>开闭原则(Open Closed Principle)是编程中最基础、最重要的设计原则。一个程序实体，如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节。当程序需要变化时，尽量通过扩展程序实体的行为来实现变化，而不是通过修改已有的代码来实现变化。编程中遵循其它原则，以及使用设计模式的目的就是遵循开放封闭原则。</p>
<p><strong>示例</strong></p>
<p><img alt="开闭原则示例" data-src="openAndClosed1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * GraphicTools</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicTools</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (s.getType() == <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            drawRetangle(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.getType() == <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            drawCirCle(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRetangle</span><span class="params">(Shape s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"绘制长方形"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCirCle</span><span class="params">(Shape s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Shape</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> type;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> type;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.type = type;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Retangle</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Retangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Retangle</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">this</span>.type = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Circle</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.type = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        GraphicTools graphicTools = <span class="keyword">new</span> GraphicTools();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        graphicTools.drawShape(<span class="keyword">new</span> Retangle());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        graphicTools.drawShape(<span class="keyword">new</span> Circle());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>如果此时需要增加一个绘制椭圆的功能，我们需要在 GraphicTools 类中增加此方法，做一些修改，便违反了开放封闭原则，即当我们给类增加新功能的时候，尽量不修改代码，或尽可能少的修改代码。</p>
<p><strong>根据开放封闭原则改进</strong></p>
<p>将Shape类做成抽象类，并提供一个抽象的 draw 方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承 Shape,并实现 draw 方法即可，使用方的代码就不需要修改了。</p>
<p><img alt="开闭原则改进" data-src="openAndClosed2.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * GraphicTools</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicTools</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.draw();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Shape</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Retangle</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Retangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"绘制长方形"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Circle</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        GraphicTools graphicTools = <span class="keyword">new</span> GraphicTools();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        graphicTools.drawShape(<span class="keyword">new</span> Retangle());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        graphicTools.drawShape(<span class="keyword">new</span> Circle());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><ol>
<li>一个对象应该对其他对象保持最少的了解。  </li>
<li>类与类关系越密切，耦合度越大。</li>
<li>迪米特法则(Demeter Principle)又叫<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息。  </li>
<li>迪米特法则还有个更简单的定义：只与直接的朋友通信。</li>
<li><strong>直接的朋友</strong>：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</li>
</ol>
<p><strong>迪米特法则注意事项与细节</strong></p>
<ul>
<li>迪米特法则的核心是降低类之间的耦合。</li>
<li>但是注意:由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并不是要求完全没有依赖关系。</li>
</ul>
<h3 id="合成-聚合复用原则"><a href="#合成-聚合复用原则" class="headerlink" title="合成/聚合复用原则"></a>合成/聚合复用原则</h3><p>合成复用原则是指，类之间的依赖尽量使用合成/聚合的方式，而不是使用继承。</p>
<p><strong>示例</strong></p>
<p><img alt="合成复用" data-src="compositeReuse.png"></p>
<p>合成和聚合都是关联的特殊种类。聚合表示一种弱的拥有关系，体现的是 A 对象可以包含 B 对象，但 B 对象不是 A 对象的一部分；合成则是一种强的拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。</p>
<p>合成/聚合复用原则的好处是，优先使用对象的合成/聚合将有助于保持每个类被封装，并被集中在单个任务上。这样类和类的继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 MyBatis（注解方式）实现多数据源配置</title>
    <url>/2019/12/09/springboot-multidatasource-mybatis-annotation/</url>
    <content><![CDATA[<p>MyBatis 注解方式配置多数据源与 XML 方式大同小异，唯一不同是注解方式不用指定 XML 文件的位置。</p>
<a id="more"></a>

<h3 id="配置数据源信息"><a href="#配置数据源信息" class="headerlink" title="配置数据源信息"></a>配置数据源信息</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 数据源一</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.resource1.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 注意区分 spring.datasource.url 与自定义jdbc配置的 jdbc-url</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.resource1.jdbc-url=jdbc:mysql:<span class="comment">//localhost:3306/game?useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.resource1.username=root</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.resource1.password=root</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 数据源二</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.resource2.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.resource2.jdbc-url=jdbc:mysql:<span class="comment">//localhost:3306/bookstore?useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.resource2.username=root</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.resource2.password=root</span></pre></td></tr></table></figure>
<h3 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h3><p>集成 MyBatis 配置数据源步骤如下：</p>
<ul>
<li>创建数据源 <code>Datasource</code></li>
<li>创建 Session 会话工厂 <code>SqlSessionFactroy</code></li>
<li>创建数据库事务 <code>DataSourceTransactionManager</code></li>
<li>创建 <code>SqlSessionTemplate</code></li>
</ul>
<p>最关键的地方就是数据源配置这部分，需要一层一层注入,先创建<code>DataSource</code>，再创建<code>SqlSessionFactory</code>，然后再创建事务管理器<code>DataSourceTransactionManager</code>，最后包装到<code>SqlSessionTemplate</code>中。</p>
<p><strong>数据源一</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.mybatis.mapper.primary"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sqlSessionFactoryRef = <span class="string">"PrimarySqlSessionFactory"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryDataSourceConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 配置数据源</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"PrimaryDataSource"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.primary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 配置 sql 会话工厂</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"PrimarySqlSessionFactory"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sessionFactory</span><span class="params">(@Qualifier(<span class="string">"PrimaryDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bean.setDataSource(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> bean.getObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 事务管理器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"PrimaryTransactionManager"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">(@Qualifier(<span class="string">"PrimaryDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"PrimarySqlSessionTemplate"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"PrimarySqlSessionFactory"</span>)</span> SqlSessionFactory sessionFactory) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sessionFactory);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>数据源二</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.mybatis.mapper.secondary"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sqlSessionFactoryRef = <span class="string">"SecondarySqlSessionFactory"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondaryDataSourceConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 配置数据源</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"SecondaryDataSource"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.secondary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 配置 sql 会话工厂</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"SecondarySqlSessionFactory"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sessionFactory</span><span class="params">(@Qualifier(<span class="string">"SecondaryDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bean.setDataSource(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> bean.getObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 事务管理器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"SecondaryTransactionManager"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">(@Qualifier(<span class="string">"SecondaryDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"SecondarySqlSessionTemplate"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"SecondarySqlSessionFactory"</span>)</span> SqlSessionFactory sessionFactory) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sessionFactory);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>注意：在 springboot 2.x 之前，需要使用注解 <code>@primary</code> 指定主库，否则会报错。</p>
<p>最后，详细代码可以查看本示例的 Demo。</p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-multidatasource-mybatis-annotation" target="_blank" rel="noopener">springboot-multidatasource-mybatis-annotation</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 MyBatis（XML 方式）实现多数据源配置</title>
    <url>/2019/12/09/springboot-multidatasource-mybatis-xml/</url>
    <content><![CDATA[<p>在实际开发中，我们会遇到一个应用需要访问多个数据源的情况。因此，我们需要配置多个数据源。这里我们来看看使用 MyBatis（XML 方式）实现多数据源配置。</p>
<a id="more"></a>

<h3 id="添加相关依赖"><a href="#添加相关依赖" class="headerlink" title="添加相关依赖"></a>添加相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="配置数据源信息"><a href="#配置数据源信息" class="headerlink" title="配置数据源信息"></a>配置数据源信息</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源一</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.primary.jdbc-url</span>=<span class="string">jdbc:mysql://localhost:3306/game?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.primary.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.primary.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.primary.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源二</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.secondary.jdbc-url</span>=<span class="string">jdbc:mysql://localhost:3306/product?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.secondary.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.secondary.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.secondary.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr></table></figure>

<h3 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h3><p>集成 MyBatis 配置数据源步骤如下：</p>
<ul>
<li>创建数据源 <code>Datasource</code></li>
<li>创建 Session 会话工厂 <code>SqlSessionFactroy</code></li>
<li>创建数据库事务 <code>DataSourceTransactionManager</code></li>
<li>创建 <code>SqlSessionTemplate</code></li>
</ul>
<p>最关键的地方就是数据源配置这部分，需要一层一层注入,先创建<code>DataSource</code>，再创建<code>SqlSessionFactory</code>，然后再创建事务管理器<code>DataSourceTransactionManager</code>，最后包装到<code>SqlSessionTemplate</code>中。</p>
<p><strong>数据源一</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.mybatis.mapper.primary"</span>, sqlSessionTemplateRef = <span class="string">"PrimarySqlSessionTemplate"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcePrimaryConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"PrimaryDataSource"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.primary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourcePrimary</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"PrimarySqlSessionFactory"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryPrimary</span><span class="params">(@Qualifier(<span class="string">"PrimaryDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .getResources(<span class="string">"classpath:mybatis/mapper/primary/*.xml"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"PrimaryTransactionManager"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManagerPrimary</span><span class="params">(@Qualifier(<span class="string">"PrimaryDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"PrimarySqlSessionTemplate"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplatePrimary</span><span class="params">(@Qualifier(<span class="string">"PrimarySqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>数据源二</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.mybatis.mapper.secondary"</span>, sqlSessionTemplateRef = <span class="string">"SecondarySqlSessionTemplate"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceSecondaryConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"SecondaryDataSource"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.secondary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"SecondarySqlSessionFactory"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactorySecondary</span><span class="params">(@Qualifier(<span class="string">"SecondaryDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSessionFactoryBean factoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        factoryBean.setDataSource(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        factoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .getResources(<span class="string">"classpath:mybatis/mapper/secondary/*.xml"</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> factoryBean.getObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"SecondaryTransactionManager"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManagerSecondary</span><span class="params">(@Qualifier(<span class="string">"SecondaryDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"SecondarySqlSessionTemplate"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplateSecondary</span><span class="params">(@Qualifier(<span class="string">"SecondarySqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>以上配置完成之后，集成 MyBatis 多数据源配置就已经完成了，接下来就可以操作数据啦！</p>
<p>最后，详细代码可以查看本示例的 Demo。</p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-multidatasource-mybatis-xml" target="_blank" rel="noopener">springboot-multidatasource-mybatis-xml</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 MyBatis（注解方式）操作数据库</title>
    <url>/2019/12/09/springboot-mybatis-annotation/</url>
    <content><![CDATA[<p>注解方式相较于 XML 方式而言，SQL 语句查找方便，直接放在接口方法的注解上，可以很容易找到，但 SQL 语句排版效果不是很好，如果是复杂的 SQL 语句很难看明白它的逻辑，并且对动态 SQL 语句的支持很差，需要单独提供生成 SQL 语句的方法。</p>
<p>下面，我们来看看基于注解方式的 MyBatis 如何配置。</p>
<a id="more"></a>

<h3 id="添加-MyBatis-依赖"><a href="#添加-MyBatis-依赖" class="headerlink" title="添加 MyBatis 依赖"></a>添加 MyBatis 依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;version&gt;1.3.1&lt;/version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/dependency&gt;</span></pre></td></tr></table></figure>

<h3 id="配置数据源信息"><a href="#配置数据源信息" class="headerlink" title="配置数据源信息"></a>配置数据源信息</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/game?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.username=root</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.password=root</span></pre></td></tr><tr><td class="code"><pre><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span></pre></td></tr></table></figure>

<h3 id="创建-Mapper-类"><a href="#创建-Mapper-类" class="headerlink" title="创建 Mapper 类"></a>创建 Mapper 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span> <span class="comment">// 此处可以不用添加注解，可以统一在启动类上添加 @MapperScan</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM user WHERE username = #&#123;username&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String name)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO user(username, password) VALUES(#&#123;username&#125;, #&#123;password&#125;)"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>, keyColumn = <span class="string">"id"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@UpdateProvider</span>(type = UserDAOProvider<span class="class">.<span class="keyword">class</span>, <span class="title">method</span> </span>= <span class="string">"updateByPrimaryKey"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(@Param(<span class="string">"user"</span>)</span> User user)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>其中，Update 方法使用的是一个 type 和一个 method 属性来指定，它们指定了 Provider 类中的一个方法。因为在进行数据更新时需要判断字段是否为空来决定是否更新这个字段，而在 XML 配置中可以使用 <code>&lt;if&gt;</code> 标签实现。如果使用注解的方式，就只能通过提供一个 Provider 类来动态生成 SQL 语句。</p>
<ul>
<li>UserDAOProvider.class</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDAOProvider</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateByPrimaryKey</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        User user = (User) map.get(<span class="string">"user"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span> || user.getId() == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"The primaryKey can not be null."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 拼接 sql 语句</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder updateStrSb = <span class="keyword">new</span> StringBuilder(<span class="string">"UPDATE user SET "</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder setStrSb = <span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (user.getUsername() != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            setStrSb.append(<span class="string">"username = #&#123;user.username&#125;,"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (user.getPassword() != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            setStrSb.append(<span class="string">"password = #&#123;user.password&#125;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (setStrSb.length() &lt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"None element to update."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        updateStrSb.append(setStrSb).append(<span class="string">" WHERE id = #&#123;user.id&#125;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> updateStrSb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="在启动类上添加-MapperScan-注解"><a href="#在启动类上添加-MapperScan-注解" class="headerlink" title="在启动类上添加 @MapperScan 注解"></a>在启动类上添加 @MapperScan 注解</h3><p>MyBatis 启动时可以不在 mapper 层加上 @Mapper 注解，但是一定要在启动类上加上 @MapperScan 注解，并指定扫包范围。如果在 mapper 接口类上加上了 @Mapper 注解，就不需要在启动类上加上 @MapperScan 注解了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.mybatis.mapper"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SpringApplication.run(MybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样，MyBatis 注解方式的使用配置就完成了，接下来就可以操作数据库啦！</p>
<p>最后，详细代码可以查看本示例的 Demo。</p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-mybatis-annotation" target="_blank" rel="noopener">springboot-mybatis-annotation</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 Mybatis（XML 方式）和 PageHelper 分页插件</title>
    <url>/2019/12/09/springboot-mybatis-xml/</url>
    <content><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它对 JDBC 的操作数据库的过程进行封装，支持定制化 SQL、存储过程以及高级映射，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJO（Plain Old Java Objects，普通的 Java 对象）映射成数据库中的记录。</p>
<p>通俗地讲，MyBatis 就是我们使用 Java 程序操作数据库时的一种工具，可以简化我们使用 JDBC 时的很多操作，而且还简化了数据库记录与 POJO 之间的映射方式。</p>
<a id="more"></a>

<h3 id="添加相关依赖"><a href="#添加相关依赖" class="headerlink" title="添加相关依赖"></a>添加相关依赖</h3><p><strong>MyBatis 依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<p><strong>PageHelper 分页插件依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="配置数据源信息"><a href="#配置数据源信息" class="headerlink" title="配置数据源信息"></a>配置数据源信息</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/game?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 配置数据源，使用阿里巴巴的 druid 数据库连接池</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.max-active</span>=<span class="string">20</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.test-on-borrow</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.allow</span>=<span class="string">true</span></span></pre></td></tr></table></figure>

<h3 id="配置-MyBatis-与-PageHelper-信息"><a href="#配置-MyBatis-与-PageHelper-信息" class="headerlink" title="配置 MyBatis 与 PageHelper 信息"></a>配置 MyBatis 与 PageHelper 信息</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MyBatis 配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.config-location</span>=<span class="string">classpath:mybatis/mybatis-config.xml</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mybatis/mapper/*.xml</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.example.mybatis.entity</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># PagerHelper  分页</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">pagehelper.helperDialect</span>=<span class="string">mysql</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">pagehelper.reasonable</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">pagehelper.supportMethodsArguments</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">pagehelper.params</span>=<span class="string">count=countSql</span></span></pre></td></tr></table></figure>

<h3 id="Mapper-映射配置"><a href="#Mapper-映射配置" class="headerlink" title="Mapper 映射配置"></a>Mapper 映射配置</h3><p>Mapper 类是一个接口，它的实现类不是一个 JAVA 类，而是一个与之对应的 XML 文件。Mapper 类中声明的方法对应 XML 文件中的一段 SQL 语句 。 </p>
<p><strong>Mapper 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">Student <span class="title">selectById</span><span class="params">(Integer id)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(Integer id)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Mapper 映射的 XML 文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.mybatis.mapper.StudentMapper"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.example.mybatis.entity.Student"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span>  <span class="attr">property</span>=<span class="string">"gender"</span> <span class="attr">javaType</span>=<span class="string">"com.example.mybatis.constant.GenderEnum"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"BaseColumnList"</span> &gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        id, name, age, gender</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        SELECT</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"BaseColumnList"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        FROM student</span></pre></td></tr><tr><td class="code"><pre><span class="line">        WHERE id = #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        SELECT</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"BaseColumnList"</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        FROM student</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertStudent"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       INSERT INTO student (</span></pre></td></tr><tr><td class="code"><pre><span class="line">           name,</span></pre></td></tr><tr><td class="code"><pre><span class="line">           age,</span></pre></td></tr><tr><td class="code"><pre><span class="line">           gender</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ) VALUES (</span></pre></td></tr><tr><td class="code"><pre><span class="line">          #&#123;name&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          #&#123;age&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          #&#123;gender&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudent"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        UPDATE student</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SET </span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null || name != ''"</span>&gt;</span>name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age != null"</span>&gt;</span>age = #&#123;age&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender != null"</span>&gt;</span>gender = #&#123;gender&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        WHERE id = #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStudent"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        DELETE FROM student WHERE id = #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></pre></td></tr></table></figure>

<p>其中 namespace 指定了该 XML 文件对应的 Mapper 类。resultMap 的标签，定义的是我们 SQL 查询的字段与实体类之间的映射关系。</p>
<h3 id="编写-Service-类"><a href="#编写-Service-类" class="headerlink" title="编写 Service 类"></a>编写 Service 类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">(Integer id)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Student student = studentMapper.selectById(id);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> student;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">listStudent</span><span class="params">(Integer pageNum, Integer pageSize)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 如果 pageSize 为空，默认返回 10 条数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (pageSize == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pageSize = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 分页</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Page&lt;Student&gt; studentPage = PageHelper.startPage(pageNum, pageSize)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .doSelectPage(() -&gt; studentMapper.selectAll());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Student&gt; students = studentPage.getResult();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> students;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStudent</span><span class="params">(Student student)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        studentMapper.insertStudent(student);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(Student student)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        studentMapper.updateStudent(student);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(Integer id)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        studentMapper.deleteStudent(id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>最后， 详细代码可以查看本示例的 Demo。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>MyBatis 中文官网：<a href="http://www.mybatis.cn/" target="_blank" rel="noopener">http://www.mybatis.cn/</a></p>
<p>PageHelper 官网：<a href="https://pagehelper.github.io/" target="_blank" rel="noopener">https://pagehelper.github.io/</a></p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-mybatis-xml" target="_blank" rel="noopener">springboot-mybatis-xml</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 JPA 实现多数据源配置</title>
    <url>/2019/12/09/springboot-multidatasource-jpa/</url>
    <content><![CDATA[<p>在实际开发中，我们会遇到一个应用需要访问多个数据源的情况。因此，我们需要配置多个数据源。这里我们来看看使用 Jpa 实现多数据源配置。</p>
<a id="more"></a>

<h3 id="添加-JPA-依赖"><a href="#添加-JPA-依赖" class="headerlink" title="添加 JPA 依赖"></a>添加 JPA 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="配置数据源信息"><a href="#配置数据源信息" class="headerlink" title="配置数据源信息"></a>配置数据源信息</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源一</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.primary.jdbc-url</span>=<span class="string">jdbc:mysql://localhost:3306/product?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.primary.diver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.primary.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.primary.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源二</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.secondary.jdbc-url</span>=<span class="string">jdbc:mysql://localhost:3306/game?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.secondary.diver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.secondary.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.secondary.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># JPA 配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">mysql</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.generate-ddl</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.open-in-view</span>=<span class="string">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.hibernate.naming.physical-strategy</span>=<span class="string">org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.hibernate.naming.implicit-strategy</span>=<span class="string">org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.MySQL5Dialect</span></span></pre></td></tr></table></figure>
<h3 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h3><p>集成 JPA 配置数据源步骤如下：</p>
<ul>
<li>创建数据源 <code>DataSource</code></li>
<li>创建实体管理器工厂对象 <code>LocalContainerEntityManagerFactoryBean</code></li>
<li>创建实体管理器对象 <code>EntityManager</code></li>
<li>创建事务管理器对象 <code>PlatformTransactionManager</code></li>
</ul>
<p><strong>数据源一</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableJpaRepositories</span>(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        entityManagerFactoryRef = <span class="string">"entityManagerFactoryPrimary"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        transactionManagerRef = <span class="string">"transactionManagerPrimary"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        basePackages = &#123;<span class="string">"com.example.jpa.repository.primary"</span>&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryDataSourceConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> HibernateProperties hibernateProperties;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"primaryDataSource"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.primary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getVendorProperties</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> hibernateProperties.determineHibernateProperties(jpaProperties.getProperties(), <span class="keyword">new</span> HibernateSettings());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactoryPrimary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> builder.dataSource(dataSource())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .properties(getVendorProperties())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 设置映射的实体类位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .packages(<span class="string">"com.example.jpa.entity.primary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .persistenceUnit(<span class="string">"primaryPersistenceUnit"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerPrimary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManagerPrimary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerSecondary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>数据源二</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableJpaRepositories</span>(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        entityManagerFactoryRef = <span class="string">"entityManagerFactorySecondary"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        transactionManagerRef = <span class="string">"transactionManagerSecondary"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        basePackages = &#123;<span class="string">"com.example.jpa.repository.secondary"</span>&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondaryDataSourceConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> HibernateProperties hibernateProperties;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"secondaryDatasource"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.secondary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getVendorProperties</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> hibernateProperties.determineHibernateProperties(jpaProperties.getProperties(), <span class="keyword">new</span> HibernateSettings());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerFactorySecondary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactorySecondary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> builder.dataSource(dataSource())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .properties(getVendorProperties())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 设置映射的实体类位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                .packages(<span class="string">"com.example.jpa.entity.secondary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .persistenceUnit(<span class="string">"secondaryPersistenceUnit"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .build();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"entityManagerSecondary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManagerSecondary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> entityManagerFactorySecondary(builder).getObject().createEntityManager();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManagerSecondary"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerSecondary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>以上完成之后，多数据源配置就已经完成了，接下来就可以操作数据啦！  </p>
<p>最后， 详细代码可以查看本示例的 Demo。</p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-multidatasource-jpa" target="_blank" rel="noopener">springboot-multidatasource-jpa</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 JPA 操作数据库</title>
    <url>/2019/12/09/springboot-jpa/</url>
    <content><![CDATA[<p>Jpa (Java Persistence API) 是 Sun 官方提出的 Java 持久化规范。它为 Java 开发人员提供了一种对象/关联映射工具来管理 Java 应用中的关系数据。它的出现主要是为了简化现有的持久化开发工作和整合 ORM 技术，结束现在 Hibernate，TopLink，JDO 等 ORM 框架各自为营的局面。</p>
<p>下面我们来看看，Spring Boot 怎样集成 JPA。 </p>
<a id="more"></a>

<h3 id="添加-JPA-依赖"><a href="#添加-JPA-依赖" class="headerlink" title="添加 JPA 依赖"></a>添加 JPA 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="配置数据源信息"><a href="#配置数据源信息" class="headerlink" title="配置数据源信息"></a>配置数据源信息</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/game?useSSL=false&amp;serverTimezone=CTT&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.jpa.open-in-view</span>=<span class="string">false</span></span></pre></td></tr></table></figure>

<h3 id="使用-JPA-配置数据源"><a href="#使用-JPA-配置数据源" class="headerlink" title="使用 JPA 配置数据源"></a>使用 JPA 配置数据源</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableJpaAuditing</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.jpa.repository"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EntityScan</span>(basePackages = <span class="string">"com.example.jpa.entity"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="创建抽象审计类"><a href="#创建抽象审计类" class="headerlink" title="创建抽象审计类"></a>创建抽象审计类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener<span class="class">.<span class="keyword">class</span>)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">class</span> <span class="title">AbstractAuditingEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8636810082784692918L</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="meta">@CreatedDate</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="meta">@Temporal</span>(TIMESTAMP)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> Date createdDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="meta">@LastModifiedDate</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="meta">@Temporal</span>(TIMESTAMP)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> Date lastModifiedDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedDate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> createdDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedDate</span><span class="params">(Date createdDate)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.createdDate = createdDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> Date <span class="title">getLastModifiedDate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> lastModifiedDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastModifiedDate</span><span class="params">(Date lastModifiedDate)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">this</span>.lastModifiedDate = lastModifiedDate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="创建映射实体类"><a href="#创建映射实体类" class="headerlink" title="创建映射实体类"></a>创建映射实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"people"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">AbstractAuditor</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2189163594057781698L</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Id</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Long id;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>, columnDefinition = <span class="string">"nvarchar(20)"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>, columnDefinition = <span class="string">"int"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.id = id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="编写一个继承-JpaRepository-的接口完成数据访问"><a href="#编写一个继承-JpaRepository-的接口完成数据访问" class="headerlink" title="编写一个继承 JpaRepository 的接口完成数据访问"></a>编写一个继承 JpaRepository 的接口完成数据访问</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PeopleRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">People</span>, <span class="title">Long</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="编写-Service-相关类"><a href="#编写-Service-相关类" class="headerlink" title="编写 Service 相关类"></a>编写 Service 相关类</h3><p>调用 PeopleRepository 类相关方法，进行数据库操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeopleService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> PeopleRepository peopleRepository;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> PeopleMapper peopleMapper;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePeople</span><span class="params">(PeopleDTO dto)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        People people = peopleMapper.convertToPeople(dto);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        peopleRepository.save(people);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>Spring Data JPA 官方文档：<a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#reference" target="_blank" rel="noopener">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#reference</a></p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-jpa" target="_blank" rel="noopener">springboot-jpa</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 JdbcTemplate 实现多数据源配置</title>
    <url>/2019/12/09/springboot-multidatasource-jdbctemplate/</url>
    <content><![CDATA[<p>在实际开发中，我们会遇到一个应用需要访问多个数据源的情况。因此，我们需要配置多个数据源。使用 JdbcTemplate 实现多数据源配置是比较简单的。</p>
<a id="more"></a>

<h3 id="添加相关依赖"><a href="#添加相关依赖" class="headerlink" title="添加相关依赖"></a>添加相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="配置数据源信息"><a href="#配置数据源信息" class="headerlink" title="配置数据源信息"></a>配置数据源信息</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源一</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.one.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.one.url</span>=<span class="string">jdbc:mysql://localhost:3306/game?useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.one.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.one.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源二</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.two.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.two.url</span>=<span class="string">jdbc:mysql://localhost:3306/product?useUnicode=true&amp;characterEncoding=utf-8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.two.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.two.password</span>=<span class="string">root</span></span></pre></td></tr></table></figure>

<h3 id="创建-DataSource-和-JdbcTemplate"><a href="#创建-DataSource-和-JdbcTemplate" class="headerlink" title="创建 DataSource 和 JdbcTemplate"></a>创建 DataSource 和 JdbcTemplate</h3><p><strong>数据源一</strong></p>
<p>这里将数据源一作为主数据源，并添加 <code>@Primary</code> 注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceOneConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"DataSourceOne"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.one"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"JdbcTemplateOne"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Primary</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(@Qualifier(<span class="string">"DataSourceOne"</span>)</span> DataSource dataSource) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>数据源二</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTwoConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"DataSourceTwo"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.two"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"JdbcTemplateTwo"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(@Qualifier(<span class="string">"DataSourceTwo"</span>)</span> DataSource dataSource) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="编写-DAO-和-Service"><a href="#编写-DAO-和-Service" class="headerlink" title="编写 DAO 和 Service"></a>编写 DAO 和 Service</h3><p>上面的配置工作完成后，接下来编写数据库操作的 DAO 类和 Service 类。</p>
<p><strong>数据源一</strong></p>
<ul>
<li>编写 DAO 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"JdbcTemplateOne"</span>) <span class="comment">// 由于是多数据源，在注入 JdbcTemplate 时，需指明是哪个数据源的。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String sql = <span class="string">"INSERT INTO user(username, password) VALUES(?,?)"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> count = jdbcTemplate.update(sql, user.getUsername(), user.getPassword());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> count;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>编写 Service 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userRepository.insertUser(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        logger.info(<span class="string">"Insert user success"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>数据源二</strong></p>
<ul>
<li>编写 DAO 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductRepository</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"JdbcTemplateTwo"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertProduct</span><span class="params">(Product product)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String sql = <span class="string">"INSERT INTO product(product_name, price, address) VALUES(?,?,?)"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> count = jdbcTemplate.update(sql, product.getProductName(), product.getPrice(), product.getAddress());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> count;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>编写 Service 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ProductService<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> ProductRepository productRepository;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertProduct</span><span class="params">(Product product)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        productRepository.insertProduct(product);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        logger.info(<span class="string">"Insert product success"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>最后，详细代码可以查看本示例的 Demo。</p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-multidatasource-jdbctemplate" target="_blank" rel="noopener">springboot-multidatasource-jdbctemplate</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 集成 JdbcTemplate 操作数据库</title>
    <url>/2019/12/09/springboot-jdbctemplate/</url>
    <content><![CDATA[<p>本示例使用 Spring Boot 集成 Druid 数据库连接池和 JdbcTemplate 操作数据库，包括对数据的增删改查操作。</p>
<a id="more"></a>

<h3 id="添加相关依赖"><a href="#添加相关依赖" class="headerlink" title="添加相关依赖"></a>添加相关依赖</h3><p>添加 <code>spring-boot-starter-jdbc</code> 依赖、MySQL 依赖、Druid 数据库连接池依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p><strong>添加配置信息</strong></p>
<ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/game?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.username</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 配置阿里巴巴提供的 Druid 数据库连接池</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druidmax-active</span>=<span class="string">20</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.test-on-borrow</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.druid.stat-view-servlet.allow</span>=<span class="string">true</span></span></pre></td></tr></table></figure>

<p><strong>创建 DataSource 和 JdbcTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 这里要将配置的 DruidDataSource 数据源注入 JdbcTemplate 中，不然默认注入 Spring Boot 自带的 HikariDatasource。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="使用-JdbcTemplate-操作数据库"><a href="#使用-JdbcTemplate-操作数据库" class="headerlink" title="使用 JdbcTemplate 操作数据库"></a>使用 JdbcTemplate 操作数据库</h3><p><strong>User 实体类</strong></p>
<p>实体类的字段名要和数据库的字段名一一对应。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Long id;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String username;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String password;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.id = id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> username;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.username = username;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> password;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.password = password;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>DAO 层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String sql = <span class="string">"SELECT id, username, password FROM user WHERE username = ?"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;String, Object&gt; resultMap = jdbcTemplate.queryForMap(sql, username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        User user = <span class="keyword">new</span> User();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        user.setId(DataConvertUtils.getLong(resultMap.get(<span class="string">"id"</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        user.setUsername(DataConvertUtils.getString(resultMap.get(<span class="string">"username"</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        user.setPassword(DataConvertUtils.getString(resultMap.get(<span class="string">"password"</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">listUser</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String sql = <span class="string">"SELECT id, username, password FROM user"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;User&gt; users = maps.stream().map(e -&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            User user = <span class="keyword">new</span> User();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setId(DataConvertUtils.getLong(e.get(<span class="string">"id"</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setUsername(DataConvertUtils.getString(e.get(<span class="string">"username"</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            user.setPassword(DataConvertUtils.getString(e.get(<span class="string">"password"</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;).collect(Collectors.toList());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> users;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 不存在则插入，存在则更新</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 注：被插入的数据中需要存在 UNIQUE 索引或 PRIMARY KEY 字段，这里使用 username 字段作为唯一索引 (UNIQUE)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveOrUpdateUser</span><span class="params">(User user)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String sql = <span class="string">"INSERT INTO user(username, password) VALUES(?,?)"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">" ON DUPLICATE KEY"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">" UPDATE password = ?"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> count = jdbcTemplate.update(sql, user.getUsername(), user.getPassword(), user.getPassword());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String sql = <span class="string">"DELETE FROM user WHERE username = ?"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> count = jdbcTemplate.update(sql, username);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Service 层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        User user = userRepository.getUser(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">listUser</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;User&gt; users = userRepository.listUser();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> users;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateUser</span><span class="params">(User user)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userRepository.saveOrUpdateUser(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        logger.debug(<span class="string">"Update user success"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String username)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userRepository.deleteUser(username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        logger.debug(<span class="string">"Delete user for username: &#123;&#125;"</span>, username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-jdbctemplate" target="_blank" rel="noopener">springboot-jdbctemplate</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 整合 C3P0 数据库连接池</title>
    <url>/2019/12/09/springboot-c3p0/</url>
    <content><![CDATA[<p>本示例使用 C3P0 + DbUtils + SQLServer 进行整合来操作数据库。</p>
<a id="more"></a>

<h3 id="配置-C3P0-信息"><a href="#配置-C3P0-信息" class="headerlink" title="配置 C3P0 信息"></a>配置 C3P0 信息</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SQLServer 数据库配置信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.jdbcUrl</span>=<span class="string">jdbc:sqlserver://localhost:1433;DatabaseName=game</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.user</span>=<span class="string">gm</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.password</span>=<span class="string">root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.driverClass</span>=<span class="string">com.microsoft.sqlserver.jdbc.SQLServerDriver</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.minPoolSize</span>=<span class="string">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.maxPoolSize</span>=<span class="string">10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.maxIdleTime</span>=<span class="string">30</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.checkoutTimeout</span>=<span class="string">30000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.acquireIncrement</span>=<span class="string">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.maxStatements</span>=<span class="string">1000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.initialPoolSize</span>=<span class="string">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.idleConnectionTestPeriod</span>=<span class="string">60</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.acquireRetryAttempts</span>=<span class="string">30</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.acquireRetryDelay</span>=<span class="string">1000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.breakOnAcquireFailure</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.breakAfterAcquireFailure</span>=<span class="string">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">c3p0.testConnectionOnCheckout</span>=<span class="string">false</span></span></pre></td></tr></table></figure>
<h3 id="引入-C3P0-和-SQLServer-依赖"><a href="#引入-C3P0-和-SQLServer-依赖" class="headerlink" title="引入 C3P0 和 SQLServer 依赖"></a>引入 C3P0 和 SQLServer 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.microsoft.sqlserver<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mssql-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.jre8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 dbutils 依赖操作数据库 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">``` </span></pre></td></tr><tr><td class="code"><pre><span class="line">### 创建 C3P0 配置类</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```java</span></pre></td></tr><tr><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class C3p0Configuration &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Bean(name = "dataSource")</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Primary // 用 @Primary 区分主数据源</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @ConfigurationProperties(prefix = "c3p0") // 指定配置文件中，前缀为 c3p0 的属性值</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public DataSource dataSource()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return DataSourceBuilder.create()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .type(ComboPooledDataSource.class).build();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h3 id="创建-QueryRunner-对象"><a href="#创建-QueryRunner-对象" class="headerlink" title="创建 QueryRunner 对象"></a>创建 QueryRunner 对象</h3><p>QueryRunner 中提供了对 SQL 语句操作的 API，不用我们手动写操作数据库的代码，同时也无需编写任何清理或资源泄漏防护代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryRunnerConfiguration</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"queryRunner"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">queryRunner</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 使用 SQlServer 数据库时，pmdKnownBroken 要设置为 true，否则在预编译时的参数无法自动传入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource,<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在使用 DbUtils 组件进行数据库操作时，如果是操作 SQLServer 数据库，在构建 QueryRunner 对象时，pmdKnownBroken 要设置为 true，否则在预编译时的参数无法自动传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> QueryRunner(dataSource,<span class="keyword">true</span>);</span></pre></td></tr></table></figure>

<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-c3p0" target="_blank" rel="noopener">springboot-c3p0</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 资源配置文件读取</title>
    <url>/2019/12/09/springboot-properties/</url>
    <content><![CDATA[<p>在实际开发中，我们会遇到关于配置文件的读取，获取配置文件的自定义配置，以及如何多环境下的配置文件信息的获取。</p>
<a id="more"></a>

<h3 id="配置读取优先级"><a href="#配置读取优先级" class="headerlink" title="配置读取优先级"></a>配置读取优先级</h3><ol>
<li><p>命令行参数。</p>
</li>
<li><p>从 <code>java:comp/env</code> 得到的 JNDI 属性。</p>
</li>
<li><p>通过 <code>System.getProperties()</code> 获取的 Java 系统参数。</p>
</li>
<li><p>操作系统环境变量。</p>
</li>
<li><p><code>RandomValuePropertySource</code> 配置的 <code>random.*</code> 属性值。如 ${random.int}、${random.long}、${random.value}、${random.uuid} 等。</p>
</li>
<li><p>JAR 包外部的 <code>application-{profile}.properties</code> 或 <code>application.yml</code> （带 spring.profile）配置文件。</p>
</li>
<li><p>JAR 包内部的 <code>application-{profile}.properties</code> 或 <code>application.yml</code> （带 spring.profile）配置文件。 </p>
</li>
<li><p>JAR 包外部的 <code>application.properties</code> 或 <code>application.yml</code>（不带 spring.profile）配置文件。</p>
</li>
<li><p>JAR 包内部的 <code>application.properties</code>或 <code>application.yml</code>（不带 spring.profile）配置文件。<br>（从 JAR 包外向 JAR 包内进行寻找，优先加载带 <code>{profile}</code> 的文件，再加载不带 <code>{profile}</code>的文件） </p>
</li>
<li><p><code>@Configuration</code> 注解类上的 <code>@PropertySource</code>。</p>
</li>
<li><p>通过 <code>SpringApplication.setDefaultProperties</code> 指定默认属性。</p>
</li>
</ol>
<p>注意：<code>application.properties</code> 文件的优先级高于 <code>application.yml</code> 文件的优先级。</p>
<h3 id="配置依赖项"><a href="#配置依赖项" class="headerlink" title="配置依赖项"></a>配置依赖项</h3><p>在 pom.xml 文件中，加入 <code>spring-boot-configuration-processor</code> 依赖项，用于读取配置值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h3 id="属性配置与实体类的映射"><a href="#属性配置与实体类的映射" class="headerlink" title="属性配置与实体类的映射"></a>属性配置与实体类的映射</h3><ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 32 位随机字符串</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">rand.stringValue</span> = <span class="string">$&#123;random.value&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 随机的 int 类型数字</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">rand.intNumber</span> = <span class="string">$&#123;random.int&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 随机的 long 类型数字</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">rand.longNumber</span> = <span class="string">$&#123;random.long&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 100 以内的随机int类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">rand.number</span> = <span class="string">$&#123;random.int(100)&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 0-100 范围内的随机int类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">rand.rangeNumber</span> = <span class="string">$&#123;random.int[0,100]&#125;</span></span></pre></td></tr></table></figure>
<ul>
<li>author.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">author.name</span> = <span class="string">yifanzheng</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">author.nickname</span> = <span class="string">star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">author.intro</span> = <span class="string">good boy!</span></span></pre></td></tr></table></figure>

<p><strong>方式一</strong>  </p>
<p>在 <code>@Configuration</code> 注解的类上加上 <code>@ConfigurationProperties(prefix=&quot;前缀名&quot;)</code> 注解，可以使用 <code>@PropertySource</code> 注解指定加载的配置文件，不加时默认加载 <code>application.properties</code> 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * AuthorConfig</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"author"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:author.properties"</span>) <span class="comment">// 指定配置文件的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String nickname;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String intro;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickname</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> nickname;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickname</span><span class="params">(String nickname)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>注意：使用这种方式配置的类，在使用 @Autowired 注入时，不能直接 return 注入的对象，它只是指向 Spring 容器中对象资源的一个标识，可以通过这个标识返回该对象中的值。</p>
<p><strong>方式二</strong> </p>
<p>使用 <code>@Value</code> 注解，直接映射实体类的各个属性。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * RandomConfig</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * @author star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rand.stringValue&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String stringValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rand.intNumber&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer intNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rand.longNumber&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Long longNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rand.number&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer number;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rand.rangeNumber&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer rangeNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStringValue</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> stringValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStringValue</span><span class="params">(String stringValue)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.stringValue = stringValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getIntNumber</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> intNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntNumber</span><span class="params">(Integer intNumber)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.intNumber = intNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getLongNumber</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> longNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLongNumber</span><span class="params">(Long longNumber)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.longNumber = longNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> number;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(Integer number)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.number = number;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getRangeNumber</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> rangeNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRangeNumber</span><span class="params">(Integer rangeNumber)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.rangeNumber = rangeNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>方式三</strong>  </p>
<p>在方法上使用 <code>@Bean</code> 注解，配合以上注解使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * AuthorBeanConfig 使用 <span class="doctag">@Bean</span> 注解的方式获取配置信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:author.properties"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorBeanConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"author"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> AuthorBean <span class="title">getAuthorBean</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> AuthorBean();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>在没有使用 <code>@PropertySource</code> 注解指定加载的文件时，默认使用 <code>application.properties</code> 文件中与实体对象的属性相同的配置项。<br><code>@PropertySources</code> 注解优先级比较低，即使指定了加载的文件，但出现与 <code>application.properties</code> 文件相同的配置项时会被其覆盖。</p>
<h3 id="自定义-YAML-资源文件属性配置"><a href="#自定义-YAML-资源文件属性配置" class="headerlink" title="自定义 YAML 资源文件属性配置"></a>自定义 YAML 资源文件属性配置</h3><ul>
<li>创建 <code>user.yml</code> 文件，进行属性配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 配置 user 对象的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">demo:</span></pre></td></tr><tr><td class="code"><pre><span class="line"> user:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: star</span></pre></td></tr><tr><td class="code"><pre><span class="line">  age: <span class="number">22</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  desc: good boy!</span></pre></td></tr></table></figure>
<ul>
<li>使用注解标记 <code>User.java</code> 对象文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * UserConfig</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@author</span> star</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> **/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"demo.user"</span>) <span class="comment">// 前缀名注释必须有，不然会报错</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:user.yml"</span>,encoding = <span class="string">"utf-8"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// @Value() 注解必须要</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;desc&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String desc;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.name = name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.age = age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> desc;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.desc = desc;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p><code>application-dev.properties</code>: 开发环境<br><code>application-prod.properties</code>: 生产环境</p>
<p>Spring Boot 通过 <code>application.roperties</code> 文件，设置 <code>spring.profiles.active</code> 属性加载相应的文件，如：<code>spring.profiles.active=dev</code>。</p>
<p><strong>注意</strong>：Spring Boot 根据环境激活配置文件的规则是，默认加载 <code>application.properties</code> 文件，当此文件配置了 <code>spring.profiles.active=xxx</code> 后，会加载 <code>application-xxx.properties</code> 文件中的配置项，并覆盖 <code>application.properties</code> 中相同的配置项。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ul>
<li>使用 YAML 文件时，属性值和冒号中间必须要有空格。</li>
<li>YAML 文件在配置中文值时，读取不会出现乱码问题；properties 文件配置中文值，读取会出现乱码。因为 Spring Boot 是以 <code>iso-8859-1</code> 的编码格式读取 properties 文件。</li>
</ul>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-properties" target="_blank" rel="noopener">springboot-properties</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 使用 devtools 实现热部署</title>
    <url>/2019/12/09/springboot-devtools/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在进行 Spring Boot 的 Web 项目开发中，我们经常会遇到源代码文件、配置文件等的修改，但每次修改后都会重启 Web 服务器才能修改后的文件生效，这样很耗时，影响开发效率。而热部署就是不需要重启 Web 服务器就可以保证各项文件修改后便立即生效。</p>
<a id="more"></a>

<h3 id="spring-boot-devtools-介绍"><a href="#spring-boot-devtools-介绍" class="headerlink" title="spring-boot-devtools 介绍"></a>spring-boot-devtools 介绍</h3><ul>
<li><p><code>spring-boot-devtools</code> 是一个为开发者服务的模块，可以实现 Spring Boot 热部署，其中最重要的功能就是自动将应用代码更改到最新的 App 上面去。</p>
</li>
<li><p><code>spring-boot-devtools</code> 可以实现页面热部署，实现类文件热部署（类文件修改后不会立即生效），实现对属性配置文件的热部署。其原理是 <code>spring-boot-devtools</code> 会监听 Classpath 下的文件变动，并且会立即重启应用（发生在保存时机）。</p>
</li>
<li><p>由于采用的虚拟机机制，重启的时候只是加载了在开发的 Class，没有重新加载第三方的 JAR 包，所以重启是很快的。</p>
</li>
</ul>
<h3 id="配置热部署"><a href="#配置热部署" class="headerlink" title="配置热部署"></a>配置热部署</h3><ul>
<li>在 pom.xml 文件中，添加项目 <code>spring-boot-devtools</code> 依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署依赖--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--没有该项配置，热部署不会起作用--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr></table></figure>
<ul>
<li>在资源文件 <code>application.properties</code> 中进行热部署的相关配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 页面修改后立即生效，关闭缓存，立即刷新</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 热部署生效</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.enabled</span>=<span class="string">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 设置需要重启的目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.additional-paths</span>=<span class="string">src/java/main</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 设置不需要重启的目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">spring.devtools.restart.exclude</span>=<span class="string">static/**,public/**,WEB-INF/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 为 mybatis 设置，生产环境可删除</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># restart.include.mapper=/mapper-[\\w-\\.]+jar</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># restart.include.pagehelper=/pagehelper-[\\w-\\.]+jar</span></span></pre></td></tr></table></figure>
<p>当热部署搭建完成后，程序只要启动一次即可，后面修改代码时，只需保存后便可以触发热部署机制，自动重启服务。</p>
<h3 id="设置-IDEA-环境自动编译"><a href="#设置-IDEA-环境自动编译" class="headerlink" title="设置 IDEA 环境自动编译"></a>设置 IDEA 环境自动编译</h3><p>在使用 IDEA 编译器时，需要设置自动编译。</p>
<ul>
<li>在编译器选项中勾选 <code>Build project automatically</code> 选项</li>
</ul>
<p><img alt="idea-compiler" data-src="idea-compiler.png"></p>
<ul>
<li>使用快捷键：<code>Ctrl + Alt + Shift + /</code> 调出 Registry 窗口,勾选 <code>compiler.automake.allow.when.app.running</code> 选项</li>
</ul>
<p><img alt="registry" data-src="registry.png"></p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-devtools" target="_blank" rel="noopener">springboot-devtools</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 定制 Banner</title>
    <url>/2019/12/09/springboot-banner/</url>
    <content><![CDATA[<p>Spring Boot 启动时会有默认的 Banner 被加载，但 Spring Boot 也支持自定义 Banner 功能。</p>
<a id="more"></a>

<h3 id="自定义-Banner"><a href="#自定义-Banner" class="headerlink" title="自定义 Banner"></a>自定义 Banner</h3><p>只需在 resources 目录下放置名为 banner.txt、banner.gif 、banner.jpg 或 banner.png 的文件，Spring Boot 在启动时会自动加载文件中的内容作为 Banner。</p>
<p>如果是文本文件，Spring Boot 会将其直接输出。 </p>
<p>如果是图像文件（ banner.gif 、banner.jpg 或 banner.png ），Spring Boot 会将图像转为 ASCII 字符，然后输出。</p>
<h3 id="Banner-图形生成地址"><a href="#Banner-图形生成地址" class="headerlink" title="Banner 图形生成地址"></a>Banner 图形生成地址</h3><p><a href="https://devops.datenkollektiv.de/banner.txt/index.html" target="_blank" rel="noopener">https://devops.datenkollektiv.de/banner.txt/index.html</a></p>
<p><a href="http://www.network-science.de/ascii/" target="_blank" rel="noopener">http://www.network-science.de/ascii/</a></p>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-banner" target="_blank" rel="noopener">springboot-banner</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 快速上手</title>
    <url>/2019/12/09/springboot-helloworld/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>微框架，与 Spring4 一起诞生，比如 @RestController。</li>
<li>可以快速上手，整合了一些子项目（开源框架或者第三方开源库）。</li>
<li>可以依赖很少的配置就可以十分快速的搭建并运行项目。</li>
<li>完全注解化，简化 XML 配置，不需要 web.xml 文件，内置嵌入 HTTP 服务器。</li>
</ul>
<a id="more"></a>

<h3 id="Spring-Boot-特点"><a href="#Spring-Boot-特点" class="headerlink" title="Spring Boot 特点"></a>Spring Boot 特点</h3><ul>
<li>基于 Spring，使开发者快速上手，门槛低（Spring 全家桶）。</li>
<li>Spring Boot 可以创建独立运行的应用而不依赖容器。</li>
<li>不需要打包成 war 包，可以放入 Tomcat 中直接运行。</li>
<li>提供 Maven 极简配置，但会引入许多不需要的包。</li>
<li>根据项目来依赖，从而配置 Spring，需要什么配什么。</li>
<li>提供可视化的相关功能，方便监控，比如性能、应用的健康程度等。</li>
<li>简化了配置，不用再看过多的 XML。</li>
<li>为微服务 Spring Cloud 铺路，Spring Boot 可以整合各式各样的框架来构建为服务，比如 Dubbo、Thrift 等。</li>
</ul>
<h3 id="Spring-Boot-使用场景"><a href="#Spring-Boot-使用场景" class="headerlink" title="Spring Boot 使用场景"></a>Spring Boot 使用场景</h3><ul>
<li>有 Spring 的地方都行</li>
<li>J2EE/Web 项目</li>
<li>微服务</li>
</ul>
<h3 id="Spring-Boot-Starter"><a href="#Spring-Boot-Starter" class="headerlink" title="Spring Boot Starter"></a>Spring Boot Starter</h3><p>Spring Boot Starter 它包含了一系列可以集成到应用里面的依赖包，可以一站式集成 Spring 及其他技术，而不需要到处找示例代码和依赖包。Spring Boot 官方的启动器都是以 spring-boot-starter-xxx 命名的，代表了一个特定的应用类型。下面是一些 Spring Boot 常用的依赖模块。</p>
<ul>
<li>spring-boot-starter-logging：使用 Spring Boot 默认的日志框架 Logback。</li>
<li>spring-boot-starter-log4j：添加 Log4j 的支持。</li>
<li>spring-boot-starter-web：支持 Web 应用开发，包含 Tomcat 和 spring-mvc。</li>
<li>spring-boot-starter-tomcat：使用 Spring Boot 默认的 Tomcat 作为应用服务器。</li>
<li>spring-boot-starter-jetty：使用 Jetty 而不是默认的 Tomcat 作为应用服务器。</li>
<li>spring-boot-starter-test：包含常用的测试所需的依赖，如 JUnit、Hamcrest、Mockito 和 spring-test 等。</li>
<li>spring-boot-starter-aop：包含 spring-aop 和 AspectJ 来支持面向切面编程 (AOP)。</li>
<li>spring-boot-starter-security：包含 spring-security。</li>
<li>spring-boot-starter-jdbc：支持使用 JDBC 访问数据库。</li>
<li>spring-boot-starter-redis：支持使用 Redis。</li>
<li>spring-boot-starter-data-mongodb：包含 spring-data-mongodb 来支持 MongoDB。</li>
<li>spring-boot-starter-data-jpa：包含 spring-data-jpa、spring-orm 和 Hibernate 来支持 JPA。</li>
<li>spring-boot-starter-amqp：通过 spring-rabbit 支持 AMQP。</li>
<li>spring-boot-starter-actuator：添加适用于生产环境的功能，如性能指标和监测等功能。</li>
</ul>
<h3 id="Spring-Boot-amp-Spring-Cloud"><a href="#Spring-Boot-amp-Spring-Cloud" class="headerlink" title="Spring Boot &amp; Spring Cloud"></a>Spring Boot &amp; Spring Cloud</h3><ul>
<li><p>Spring Boot 其实是一个快速开发框架，能够帮助我们<strong>快速整合第三方常用框架，完全采用注解化，简化 XML 配置，最终以 Java 应用程序进行执行。</strong></p>
</li>
<li><p>Spring Cloud 目前是一套完整微服务解决框架，功能强大。如：注册中心，客户端调用工具，服务治理（负载均衡、断路器、分布式配置中心）。</p>
</li>
<li><p>Spring Boot 的 Web组件默认集成 Spring MVC；Spring Cloud 依赖于Spring Boot 实现微服务，使用 Spring MVC 编写微服务接口。</p>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li><p><strong>Spring Boot 只是一个快速开发框架，不是微服务框架！</strong>  </p>
</li>
<li><p><strong>Spring Boot + Spring Cloud 实现微服务开发！（RPC 远程通讯技术）</strong></p>
</li>
</ul>
<h3 id="Spring-Boot-初体验"><a href="#Spring-Boot-初体验" class="headerlink" title="Spring Boot 初体验"></a>Spring Boot 初体验</h3><p><strong>快速搭建</strong></p>
<p>借助 Spring 官网：<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a> 进行快速搭建。</p>
<p><img alt="spring-init" data-src="springInit.png">  </p>
<p>点击 Generate，然后就会有一个 zip 包下载到本地，进行解压，导入到 IDE 即可开发。</p>
<p><strong>手动搭建</strong></p>
<ul>
<li>创建一个 POM 文件。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></pre></td></tr></table></figure>
<p>这里引入 <code>spring-boot-maven-plugin</code> 插件是为了在使用 <code>mvn package</code> 打包时，会生成一个直接可以运行的 JAR 包文件，使用 <code>java -jar</code> 命令可以直接运行。</p>
<ul>
<li>创建 Spring Boot 应用主类</li>
</ul>
<p>使用注解 <code>@SpringBootApplication</code> 标记该类，让 Spring Boot 自动给程序进行配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        SpringApplication.run(ApplicationDemo<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>搭建 Web 工程  </li>
</ul>
<p>在 POM 文件中引入 <code>spring-boot-starter-web</code> 依赖，使程序支持 Web 应用开发。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>创建 API</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldResource</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String message = <span class="string">"Hello World!"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yifanzheng/springboot-action/tree/master/springboot-helloworld" target="_blank" rel="noopener">springboot-helloworld</a></p>
]]></content>
      <categories>
        <category>Spring Boot 系列</category>
      </categories>
  </entry>
</search>
